ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccZnvLT0.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	debounce_on
  19              		.bss
  20              		.type	debounce_on, %object
  21              		.size	debounce_on, 1
  22              	debounce_on:
  23 0000 00       		.space	1
  24              		.global	btn_can_change
  25              		.type	btn_can_change, %object
  26              		.size	btn_can_change, 1
  27              	btn_can_change:
  28 0001 00       		.space	1
  29              		.global	dimming
  30              		.type	dimming, %object
  31              		.size	dimming, 1
  32              	dimming:
  33 0002 00       		.space	1
  34              		.global	toggle_light_time_ms
  35              		.data
  36              		.align	2
  37              		.type	toggle_light_time_ms, %object
  38              		.size	toggle_light_time_ms, 4
  39              	toggle_light_time_ms:
  40 0000 F4010000 		.word	500
  41              		.global	total_time_ms
  42              		.align	2
  43              		.type	total_time_ms, %object
  44              		.size	total_time_ms, 4
  45              	total_time_ms:
  46 0004 F4010000 		.word	500
  47              		.global	on_time_ms
  48              		.align	2
  49              		.type	on_time_ms, %object
  50              		.size	on_time_ms, 4
  51              	on_time_ms:
  52 0008 FA000000 		.word	250
  53              		.global	off_time_ms
  54              		.align	2
  55              		.type	off_time_ms, %object
  56              		.size	off_time_ms, 4
  57              	off_time_ms:
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccZnvLT0.s 			page 2


  58 000c FA000000 		.word	250
  59              		.global	duty_cycle
  60              		.align	2
  61              		.type	duty_cycle, %object
  62              		.size	duty_cycle, 4
  63              	duty_cycle:
  64 0010 0000003F 		.word	1056964608
  65              		.comm	currentMode,1,1
  66              		.comm	previousMode,1,1
  67              		.section	.text.ToggleModes,"ax",%progbits
  68              		.align	2
  69              		.global	ToggleModes
  70              		.thumb
  71              		.thumb_func
  72              		.type	ToggleModes, %function
  73              	ToggleModes:
  74              	.LFB63:
  75              		.file 1 ".\\main.c"
   1:.\main.c      **** /******************************************************************************
   2:.\main.c      **** * Project Name		: CE95352 Blinking LED
   3:.\main.c      **** * File Name			: main.c
   4:.\main.c      **** * Version 			: **
   5:.\main.c      **** * Device Used		: CY8C5888LTI-LP097
   6:.\main.c      **** * Software Used		: PSoC Creator 3.1 SP2
   7:.\main.c      **** * Compiler    		: ARM GCC 4.8.4, ARM RVDS Generic, ARM MDK Generic
   8:.\main.c      **** * Related Hardware	: CY8CKIT059 PSoC 5 LP Prototyping Kit 
   9:.\main.c      **** * Owner				: KLMZ
  10:.\main.c      **** *
  11:.\main.c      **** ********************************************************************************
  12:.\main.c      **** * Copyright (2015), Cypress Semiconductor Corporation. All Rights Reserved.
  13:.\main.c      **** ********************************************************************************
  14:.\main.c      **** * This software is owned by Cypress Semiconductor Corporation (Cypress)
  15:.\main.c      **** * and is protected by and subject to worldwide patent protection (United
  16:.\main.c      **** * States and foreign), United States copyright laws and international treaty
  17:.\main.c      **** * provisions. Cypress hereby grants to licensee a personal, non-exclusive,
  18:.\main.c      **** * non-transferable license to copy, use, modify, create derivative works of,
  19:.\main.c      **** * and compile the Cypress Source Code and derivative works for the sole
  20:.\main.c      **** * purpose of creating custom software in support of licensee product to be
  21:.\main.c      **** * used only in conjunction with a Cypress integrated circuit as specified in
  22:.\main.c      **** * the applicable agreement. Any reproduction, modification, translation,
  23:.\main.c      **** * compilation, or representation of this software except as specified above 
  24:.\main.c      **** * is prohibited without the express written permission of Cypress.
  25:.\main.c      **** *
  26:.\main.c      **** * Disclaimer: CYPRESS MAKES NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, WITH 
  27:.\main.c      **** * REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  28:.\main.c      **** * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  29:.\main.c      **** * Cypress reserves the right to make changes without further notice to the 
  30:.\main.c      **** * materials described herein. Cypress does not assume any liability arising out 
  31:.\main.c      **** * of the application or use of any product or circuit described herein. Cypress 
  32:.\main.c      **** * does not authorize its products for use as critical components in life-support 
  33:.\main.c      **** * systems where a malfunction or failure may reasonably be expected to result in 
  34:.\main.c      **** * significant injury to the user. The inclusion of Cypress' product in a life-
  35:.\main.c      **** * support systems application implies that the manufacturer assumes all risk of 
  36:.\main.c      **** * such use and in doing so indemnifies Cypress against all charges. 
  37:.\main.c      **** *
  38:.\main.c      **** * Use of this Software may be limited by and subject to the applicable Cypress
  39:.\main.c      **** * software license agreement. 
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccZnvLT0.s 			page 3


  40:.\main.c      **** *******************************************************************************/
  41:.\main.c      **** 
  42:.\main.c      **** #include <device.h>
  43:.\main.c      **** #include <stdio.h>
  44:.\main.c      **** #include <string.h>
  45:.\main.c      **** #include <unistd.h>
  46:.\main.c      **** #include <stdbool.h>
  47:.\main.c      **** #include <errno.h>
  48:.\main.c      **** 
  49:.\main.c      **** /*******************************************************************************
  50:.\main.c      **** * Function Name: main
  51:.\main.c      **** ********************************************************************************
  52:.\main.c      **** *
  53:.\main.c      **** * Summary:
  54:.\main.c      **** *  Software-controller PWM controls and LED to blink in 1s interval
  55:.\main.c      ****                            as well as control the brightness
  56:.\main.c      **** *
  57:.\main.c      **** * Parameters:
  58:.\main.c      **** *  None.
  59:.\main.c      **** *
  60:.\main.c      **** * Return:
  61:.\main.c      **** *  None.
  62:.\main.c      **** *
  63:.\main.c      **** 
  64:.\main.c      **** Partner Names: John Dempsey, Haitham Alzerma, Kwesi
  65:.\main.c      **** Partner Lab Group name: 3GL (3 Guys in a Lab)
  66:.\main.c      **** *******************************************************************************/
  67:.\main.c      **** 
  68:.\main.c      **** //CONSTANTS
  69:.\main.c      **** //settings
  70:.\main.c      **** #define USING_INTERRUPTS 1      //1 for using interrupts, 0 for polling
  71:.\main.c      **** #define HUMAN_EYE_FPS 60        //at 60hz, most people can't detect difference
  72:.\main.c      **** #define DEBOUNCE_TIME 250      //minimum time to wait for button to finish bouncing
  73:.\main.c      **** #define RAMP_RESOLUTION 50           //RAMP_RESOLUTION for duty cycle
  74:.\main.c      **** #define POT_MAX 4080            //max reading from DAC potentiometer @ 4V
  75:.\main.c      **** #define FREQUENCY_RATIO 4       //divide potentiometer result by this to get a max period.  frequen
  76:.\main.c      **** 
  77:.\main.c      **** //global constants
  78:.\main.c      **** #define on 1
  79:.\main.c      **** #define off 0
  80:.\main.c      **** 
  81:.\main.c      **** //placeholder variables
  82:.\main.c      **** bool debounce_on = false;       //used to delay polling to debounce button
  83:.\main.c      **** bool btn_can_change = false;        //makes sure modes change after button press
  84:.\main.c      **** bool dimming = false;                   //used with the 'ramp' function
  85:.\main.c      **** uint32 toggle_light_time_ms = 500;      //how fast to blink LED in 'blink' mode, can adjust with Po
  86:.\main.c      ****                                         //default to blink the light every half second
  87:.\main.c      **** 
  88:.\main.c      **** //PWM variables
  89:.\main.c      **** uint32 total_time_ms = 500;               //period of PWM, default 500ms
  90:.\main.c      **** uint32 on_time_ms = 250;                  //how many ms the LED is on, must be < total_time_ms
  91:.\main.c      **** uint32 off_time_ms = 250;
  92:.\main.c      **** float duty_cycle = 0.5;                 //what % of PWM is high, default to 50% on
  93:.\main.c      **** 
  94:.\main.c      **** 
  95:.\main.c      **** //possible modes for LED
  96:.\main.c      **** enum pwmMode {blink, ramp};
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccZnvLT0.s 			page 4


  97:.\main.c      **** enum pwmMode currentMode;
  98:.\main.c      **** enum pwmMode previousMode;
  99:.\main.c      **** 
 100:.\main.c      **** 
 101:.\main.c      **** //functions
 102:.\main.c      **** void write_led(int);
 103:.\main.c      **** void PWM_Blink(uint32);     //always a 50% duty cycle
 104:.\main.c      **** void PWM_Ramp(uint32, uint32);  //different on/off times
 105:.\main.c      **** void ToggleMode();
 106:.\main.c      **** uint16_t GetPotentiometerValue();
 107:.\main.c      **** CY_ISR(ToggleModes) {
  76              		.loc 1 107 0
  77              		.cfi_startproc
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 1, uses_anonymous_args = 0
  80 0000 80B5     		push	{r7, lr}
  81              		.cfi_def_cfa_offset 8
  82              		.cfi_offset 7, -8
  83              		.cfi_offset 14, -4
  84 0002 00AF     		add	r7, sp, #0
  85              		.cfi_def_cfa_register 7
 108:.\main.c      ****     if (currentMode == blink) {
  86              		.loc 1 108 0
  87 0004 084B     		ldr	r3, .L4
  88 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  89 0008 002B     		cmp	r3, #0
  90 000a 06D1     		bne	.L2
 109:.\main.c      ****         currentMode = ramp;
  91              		.loc 1 109 0
  92 000c 064B     		ldr	r3, .L4
  93 000e 0122     		movs	r2, #1
  94 0010 1A70     		strb	r2, [r3]
 110:.\main.c      ****         write_led(on);      //user feedback
  95              		.loc 1 110 0
  96 0012 0120     		movs	r0, #1
  97 0014 FFF7FEFF 		bl	write_led
  98 0018 05E0     		b	.L1
  99              	.L2:
 111:.\main.c      ****     } else {
 112:.\main.c      ****         currentMode = blink;
 100              		.loc 1 112 0
 101 001a 034B     		ldr	r3, .L4
 102 001c 0022     		movs	r2, #0
 103 001e 1A70     		strb	r2, [r3]
 113:.\main.c      ****         write_led(off);     //user feedback
 104              		.loc 1 113 0
 105 0020 0020     		movs	r0, #0
 106 0022 FFF7FEFF 		bl	write_led
 107              	.L1:
 114:.\main.c      ****     }
 115:.\main.c      **** }
 108              		.loc 1 115 0
 109 0026 80BD     		pop	{r7, pc}
 110              	.L5:
 111              		.align	2
 112              	.L4:
 113 0028 00000000 		.word	currentMode
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccZnvLT0.s 			page 5


 114              		.cfi_endproc
 115              	.LFE63:
 116              		.size	ToggleModes, .-ToggleModes
 117              		.global	__aeabi_fcmpge
 118              		.global	__aeabi_fcmple
 119              		.global	__aeabi_f2d
 120              		.global	__aeabi_dsub
 121              		.global	__aeabi_d2f
 122              		.global	__aeabi_dadd
 123              		.global	__aeabi_ui2f
 124              		.global	__aeabi_fmul
 125              		.global	__aeabi_f2uiz
 126              		.section	.text.main,"ax",%progbits
 127              		.align	2
 128              		.global	main
 129              		.thumb
 130              		.thumb_func
 131              		.type	main, %function
 132              	main:
 133              	.LFB64:
 116:.\main.c      **** 
 117:.\main.c      **** 
 118:.\main.c      **** 
 119:.\main.c      **** 
 120:.\main.c      **** 
 121:.\main.c      **** 
 122:.\main.c      **** 
 123:.\main.c      **** //TODO:
 124:.\main.c      **** //find out how threading works
 125:.\main.c      **** 
 126:.\main.c      **** int main()
 127:.\main.c      **** {
 134              		.loc 1 127 0
 135              		.cfi_startproc
 136              		@ args = 0, pretend = 0, frame = 0
 137              		@ frame_needed = 1, uses_anonymous_args = 0
 138 0000 80B5     		push	{r7, lr}
 139              		.cfi_def_cfa_offset 8
 140              		.cfi_offset 7, -8
 141              		.cfi_offset 14, -4
 142 0002 00AF     		add	r7, sp, #0
 143              		.cfi_def_cfa_register 7
 128:.\main.c      **** 
 129:.\main.c      ****     #if USING_INTERRUPTS
 130:.\main.c      ****         //toggles the led mode by using an interrupt
 131:.\main.c      ****     isr_1_StartEx(ToggleModes);
 144              		.loc 1 131 0
 145 0004 4C48     		ldr	r0, .L19+8
 146 0006 FFF7FEFF 		bl	isr_1_StartEx
 132:.\main.c      ****     CYGlobalIntEnable;
 147              		.loc 1 132 0
 148              	@ 132 ".\main.c" 1
 149 000a 62B6     		CPSIE   i
 150              	@ 0 "" 2
 133:.\main.c      ****     
 134:.\main.c      ****     #endif
 135:.\main.c      ****     
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccZnvLT0.s 			page 6


 136:.\main.c      ****     //set default currentMode
 137:.\main.c      ****     currentMode = blink;
 151              		.loc 1 137 0
 152              		.thumb
 153 000c 4B4B     		ldr	r3, .L19+12
 154 000e 0022     		movs	r2, #0
 155 0010 1A70     		strb	r2, [r3]
 138:.\main.c      ****     previousMode = ramp;
 156              		.loc 1 138 0
 157 0012 4B4B     		ldr	r3, .L19+16
 158 0014 0122     		movs	r2, #1
 159 0016 1A70     		strb	r2, [r3]
 139:.\main.c      ****     
 140:.\main.c      ****     //start ADC for potentiometer
 141:.\main.c      ****     ADC_SAR_1_Start();
 160              		.loc 1 141 0
 161 0018 FFF7FEFF 		bl	ADC_SAR_1_Start
 162              	.L15:
 142:.\main.c      **** 
 143:.\main.c      ****     //loop polls button for press if interrupts disabled
 144:.\main.c      ****     //polls potentiometer for values for period of PWM
 145:.\main.c      ****     //only runs if the threading implementation is successful
 146:.\main.c      ****     while (true)
 147:.\main.c      ****     {
 148:.\main.c      ****         //have to poll the button every loop if not using interrupts
 149:.\main.c      ****         #if !(USING_INTERRUPTS)
 150:.\main.c      ****             
 151:.\main.c      ****             //if the button is pressed and was LOW last time
 152:.\main.c      ****             if(Status_Reg_1_Read() && btn_can_change) {
 153:.\main.c      ****                 //wait until button is debounced
 154:.\main.c      ****                 CyDelay(DEBOUNCE_TIME);
 155:.\main.c      ****                 
 156:.\main.c      ****                 //if the button is still pressed, toggle modes
 157:.\main.c      ****                 if (Status_Reg_1_Read()) {
 158:.\main.c      ****                     ToggleMode();
 159:.\main.c      ****                     
 160:.\main.c      ****                     btn_can_change = false;
 161:.\main.c      ****                 }
 162:.\main.c      ****             } 
 163:.\main.c      ****             
 164:.\main.c      ****             //if the button is unpressed, we can toggle modes again
 165:.\main.c      ****             if (!Status_Reg_1_Read() && !btn_can_change) {
 166:.\main.c      ****                 CyDelay(DEBOUNCE_TIME);
 167:.\main.c      ****                 
 168:.\main.c      ****                 if (!Status_Reg_1_Read()) {
 169:.\main.c      ****                     btn_can_change = true;   
 170:.\main.c      ****                 }
 171:.\main.c      ****             }
 172:.\main.c      ****         #endif    
 173:.\main.c      ****         
 174:.\main.c      ****         
 175:.\main.c      ****         
 176:.\main.c      ****         //PWM CYCLE       
 177:.\main.c      ****         
 178:.\main.c      ****         //if we're blinking, for this loop do a blink PWM cycle
 179:.\main.c      ****             if (currentMode == blink){
 163              		.loc 1 179 0
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccZnvLT0.s 			page 7


 164 001c 474B     		ldr	r3, .L19+12
 165 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 166 0020 002B     		cmp	r3, #0
 167 0022 0DD1     		bne	.L7
 180:.\main.c      ****                 //sets toggle_light_time_ms to value proportional to pot.
 181:.\main.c      ****                 toggle_light_time_ms = GetPotentiometerValue() / FREQUENCY_RATIO;      //min val=0,
 168              		.loc 1 181 0
 169 0024 FFF7FEFF 		bl	GetPotentiometerValue
 170 0028 0346     		mov	r3, r0
 171 002a 9B08     		lsrs	r3, r3, #2
 172 002c 9BB2     		uxth	r3, r3
 173 002e 1A46     		mov	r2, r3
 174 0030 444B     		ldr	r3, .L19+20
 175 0032 1A60     		str	r2, [r3]
 182:.\main.c      ****                 PWM_Blink(toggle_light_time_ms);
 176              		.loc 1 182 0
 177 0034 434B     		ldr	r3, .L19+20
 178 0036 1B68     		ldr	r3, [r3]
 179 0038 1846     		mov	r0, r3
 180 003a FFF7FEFF 		bl	PWM_Blink
 181 003e 76E0     		b	.L8
 182              	.L7:
 183:.\main.c      ****             }
 184:.\main.c      ****             else if (currentMode == ramp) {
 183              		.loc 1 184 0
 184 0040 3E4B     		ldr	r3, .L19+12
 185 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 186 0044 012B     		cmp	r3, #1
 187 0046 72D1     		bne	.L8
 185:.\main.c      ****                 //calculate current ramp duty_cycle
 186:.\main.c      **** 
 187:.\main.c      ****                 if (duty_cycle >= 1)    //we have reached full brightness, time to dim
 188              		.loc 1 187 0
 189 0048 3F4B     		ldr	r3, .L19+24
 190 004a 1B68     		ldr	r3, [r3]	@ float
 191 004c 1846     		mov	r0, r3
 192 004e 4FF07E51 		mov	r1, #1065353216
 193 0052 FFF7FEFF 		bl	__aeabi_fcmpge
 194 0056 0346     		mov	r3, r0
 195 0058 002B     		cmp	r3, #0
 196 005a 03D0     		beq	.L18
 188:.\main.c      ****                 {
 189:.\main.c      ****                     dimming = true;
 197              		.loc 1 189 0
 198 005c 3B4B     		ldr	r3, .L19+28
 199 005e 0122     		movs	r2, #1
 200 0060 1A70     		strb	r2, [r3]
 201 0062 0CE0     		b	.L11
 202              	.L18:
 190:.\main.c      ****                 } else if (duty_cycle <= 0) {
 203              		.loc 1 190 0
 204 0064 384B     		ldr	r3, .L19+24
 205 0066 1B68     		ldr	r3, [r3]	@ float
 206 0068 1846     		mov	r0, r3
 207 006a 4FF00001 		mov	r1, #0
 208 006e FFF7FEFF 		bl	__aeabi_fcmple
 209 0072 0346     		mov	r3, r0
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccZnvLT0.s 			page 8


 210 0074 002B     		cmp	r3, #0
 211 0076 02D0     		beq	.L11
 191:.\main.c      ****                     dimming = false;
 212              		.loc 1 191 0
 213 0078 344B     		ldr	r3, .L19+28
 214 007a 0022     		movs	r2, #0
 215 007c 1A70     		strb	r2, [r3]
 216              	.L11:
 192:.\main.c      ****                 }
 193:.\main.c      ****                 
 194:.\main.c      ****                 //if we're supposed to dim, lessen the duty cycle
 195:.\main.c      ****                 if (dimming) {
 217              		.loc 1 195 0
 218 007e 334B     		ldr	r3, .L19+28
 219 0080 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 220 0082 002B     		cmp	r3, #0
 221 0084 17D0     		beq	.L13
 196:.\main.c      ****                     duty_cycle -= 1.0 / (float) RAMP_RESOLUTION;   //duty cycle gets decremented by
 222              		.loc 1 196 0
 223 0086 304B     		ldr	r3, .L19+24
 224 0088 1B68     		ldr	r3, [r3]	@ float
 225 008a 1846     		mov	r0, r3
 226 008c FFF7FEFF 		bl	__aeabi_f2d
 227 0090 0246     		mov	r2, r0
 228 0092 0B46     		mov	r3, r1
 229 0094 1046     		mov	r0, r2
 230 0096 1946     		mov	r1, r3
 231 0098 25A3     		adr	r3, .L19
 232 009a D3E90023 		ldrd	r2, [r3]
 233 009e FFF7FEFF 		bl	__aeabi_dsub
 234 00a2 0246     		mov	r2, r0
 235 00a4 0B46     		mov	r3, r1
 236 00a6 1046     		mov	r0, r2
 237 00a8 1946     		mov	r1, r3
 238 00aa FFF7FEFF 		bl	__aeabi_d2f
 239 00ae 0246     		mov	r2, r0
 240 00b0 254B     		ldr	r3, .L19+24
 241 00b2 1A60     		str	r2, [r3]	@ float
 242 00b4 16E0     		b	.L14
 243              	.L13:
 197:.\main.c      ****                 } else {
 198:.\main.c      ****                     duty_cycle +=  1.0 / (float) RAMP_RESOLUTION;   //duty cycle is incremented by 
 244              		.loc 1 198 0
 245 00b6 244B     		ldr	r3, .L19+24
 246 00b8 1B68     		ldr	r3, [r3]	@ float
 247 00ba 1846     		mov	r0, r3
 248 00bc FFF7FEFF 		bl	__aeabi_f2d
 249 00c0 0246     		mov	r2, r0
 250 00c2 0B46     		mov	r3, r1
 251 00c4 1046     		mov	r0, r2
 252 00c6 1946     		mov	r1, r3
 253 00c8 19A3     		adr	r3, .L19
 254 00ca D3E90023 		ldrd	r2, [r3]
 255 00ce FFF7FEFF 		bl	__aeabi_dadd
 256 00d2 0246     		mov	r2, r0
 257 00d4 0B46     		mov	r3, r1
 258 00d6 1046     		mov	r0, r2
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccZnvLT0.s 			page 9


 259 00d8 1946     		mov	r1, r3
 260 00da FFF7FEFF 		bl	__aeabi_d2f
 261 00de 0246     		mov	r2, r0
 262 00e0 194B     		ldr	r3, .L19+24
 263 00e2 1A60     		str	r2, [r3]	@ float
 264              	.L14:
 199:.\main.c      ****                 }
 200:.\main.c      ****                 
 201:.\main.c      ****                 total_time_ms = (1.0 / (float) HUMAN_EYE_FPS) * 1000;       //could be a constant i
 265              		.loc 1 201 0
 266 00e4 1A4B     		ldr	r3, .L19+32
 267 00e6 1022     		movs	r2, #16
 268 00e8 1A60     		str	r2, [r3]
 202:.\main.c      ****                 on_time_ms = duty_cycle * total_time_ms;
 269              		.loc 1 202 0
 270 00ea 194B     		ldr	r3, .L19+32
 271 00ec 1B68     		ldr	r3, [r3]
 272 00ee 1846     		mov	r0, r3
 273 00f0 FFF7FEFF 		bl	__aeabi_ui2f
 274 00f4 0246     		mov	r2, r0
 275 00f6 144B     		ldr	r3, .L19+24
 276 00f8 1B68     		ldr	r3, [r3]	@ float
 277 00fa 1046     		mov	r0, r2
 278 00fc 1946     		mov	r1, r3
 279 00fe FFF7FEFF 		bl	__aeabi_fmul
 280 0102 0346     		mov	r3, r0
 281 0104 1846     		mov	r0, r3
 282 0106 FFF7FEFF 		bl	__aeabi_f2uiz
 283 010a 0246     		mov	r2, r0
 284 010c 114B     		ldr	r3, .L19+36
 285 010e 1A60     		str	r2, [r3]
 203:.\main.c      ****                 off_time_ms = total_time_ms - on_time_ms;
 286              		.loc 1 203 0
 287 0110 0F4B     		ldr	r3, .L19+32
 288 0112 1A68     		ldr	r2, [r3]
 289 0114 0F4B     		ldr	r3, .L19+36
 290 0116 1B68     		ldr	r3, [r3]
 291 0118 D31A     		subs	r3, r2, r3
 292 011a 0F4A     		ldr	r2, .L19+40
 293 011c 1360     		str	r3, [r2]
 204:.\main.c      ****                 
 205:.\main.c      ****                 PWM_Ramp(on_time_ms, off_time_ms);
 294              		.loc 1 205 0
 295 011e 0D4B     		ldr	r3, .L19+36
 296 0120 1A68     		ldr	r2, [r3]
 297 0122 0D4B     		ldr	r3, .L19+40
 298 0124 1B68     		ldr	r3, [r3]
 299 0126 1046     		mov	r0, r2
 300 0128 1946     		mov	r1, r3
 301 012a FFF7FEFF 		bl	PWM_Ramp
 302              	.L8:
 206:.\main.c      ****             } 
 207:.\main.c      ****             
 208:.\main.c      ****             
 209:.\main.c      ****     }
 303              		.loc 1 209 0
 304 012e 75E7     		b	.L15
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccZnvLT0.s 			page 10


 305              	.L20:
 306              		.align	3
 307              	.L19:
 308 0130 7B14AE47 		.word	1202590843
 309 0134 E17A943F 		.word	1066695393
 310 0138 00000000 		.word	ToggleModes
 311 013c 00000000 		.word	currentMode
 312 0140 00000000 		.word	previousMode
 313 0144 00000000 		.word	toggle_light_time_ms
 314 0148 00000000 		.word	duty_cycle
 315 014c 00000000 		.word	dimming
 316 0150 00000000 		.word	total_time_ms
 317 0154 00000000 		.word	on_time_ms
 318 0158 00000000 		.word	off_time_ms
 319              		.cfi_endproc
 320              	.LFE64:
 321              		.size	main, .-main
 322 015c AFF30080 		.section	.text.ToggleMode,"ax",%progbits
 323              		.align	2
 324              		.global	ToggleMode
 325              		.thumb
 326              		.thumb_func
 327              		.type	ToggleMode, %function
 328              	ToggleMode:
 329              	.LFB65:
 210:.\main.c      ****     
 211:.\main.c      ****     return 0;
 212:.\main.c      **** }
 213:.\main.c      **** 
 214:.\main.c      **** 
 215:.\main.c      **** void ToggleMode() {
 330              		.loc 1 215 0
 331              		.cfi_startproc
 332              		@ args = 0, pretend = 0, frame = 0
 333              		@ frame_needed = 1, uses_anonymous_args = 0
 334              		@ link register save eliminated.
 335 0000 80B4     		push	{r7}
 336              		.cfi_def_cfa_offset 4
 337              		.cfi_offset 7, -4
 338 0002 00AF     		add	r7, sp, #0
 339              		.cfi_def_cfa_register 7
 216:.\main.c      ****     if (currentMode == blink) {
 340              		.loc 1 216 0
 341 0004 094B     		ldr	r3, .L24
 342 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 343 0008 002B     		cmp	r3, #0
 344 000a 03D1     		bne	.L22
 217:.\main.c      ****         currentMode = ramp;
 345              		.loc 1 217 0
 346 000c 074B     		ldr	r3, .L24
 347 000e 0122     		movs	r2, #1
 348 0010 1A70     		strb	r2, [r3]
 349 0012 06E0     		b	.L21
 350              	.L22:
 218:.\main.c      ****     } else if (currentMode == ramp){
 351              		.loc 1 218 0
 352 0014 054B     		ldr	r3, .L24
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccZnvLT0.s 			page 11


 353 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 354 0018 012B     		cmp	r3, #1
 355 001a 02D1     		bne	.L21
 219:.\main.c      ****         currentMode = blink;
 356              		.loc 1 219 0
 357 001c 034B     		ldr	r3, .L24
 358 001e 0022     		movs	r2, #0
 359 0020 1A70     		strb	r2, [r3]
 360              	.L21:
 220:.\main.c      ****     }
 221:.\main.c      **** 
 222:.\main.c      **** }
 361              		.loc 1 222 0
 362 0022 BD46     		mov	sp, r7
 363              		.cfi_def_cfa_register 13
 364              		@ sp needed
 365 0024 5DF8047B 		ldr	r7, [sp], #4
 366              		.cfi_restore 7
 367              		.cfi_def_cfa_offset 0
 368 0028 7047     		bx	lr
 369              	.L25:
 370 002a 00BF     		.align	2
 371              	.L24:
 372 002c 00000000 		.word	currentMode
 373              		.cfi_endproc
 374              	.LFE65:
 375              		.size	ToggleMode, .-ToggleMode
 376              		.section	.text.GetPotentiometerValue,"ax",%progbits
 377              		.align	2
 378              		.global	GetPotentiometerValue
 379              		.thumb
 380              		.thumb_func
 381              		.type	GetPotentiometerValue, %function
 382              	GetPotentiometerValue:
 383              	.LFB66:
 223:.\main.c      **** 
 224:.\main.c      **** 
 225:.\main.c      **** //returns the value from potentiometer
 226:.\main.c      **** uint16_t GetPotentiometerValue() {
 384              		.loc 1 226 0
 385              		.cfi_startproc
 386              		@ args = 0, pretend = 0, frame = 8
 387              		@ frame_needed = 1, uses_anonymous_args = 0
 388 0000 80B5     		push	{r7, lr}
 389              		.cfi_def_cfa_offset 8
 390              		.cfi_offset 7, -8
 391              		.cfi_offset 14, -4
 392 0002 82B0     		sub	sp, sp, #8
 393              		.cfi_def_cfa_offset 16
 394 0004 00AF     		add	r7, sp, #0
 395              		.cfi_def_cfa_register 7
 227:.\main.c      ****     //poll potentiometer
 228:.\main.c      ****         ADC_SAR_1_StartConvert(); 
 396              		.loc 1 228 0
 397 0006 FFF7FEFF 		bl	ADC_SAR_1_StartConvert
 229:.\main.c      ****         ADC_SAR_1_IsEndConversion(ADC_SAR_1_WAIT_FOR_RESULT);   //blocks until conversion complete
 398              		.loc 1 229 0
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccZnvLT0.s 			page 12


 399 000a 0020     		movs	r0, #0
 400 000c FFF7FEFF 		bl	ADC_SAR_1_IsEndConversion
 230:.\main.c      ****         
 231:.\main.c      ****         uint16_t result = ADC_SAR_1_GetResult16();
 401              		.loc 1 231 0
 402 0010 FFF7FEFF 		bl	ADC_SAR_1_GetResult16
 403 0014 0346     		mov	r3, r0
 404 0016 FB80     		strh	r3, [r7, #6]	@ movhi
 232:.\main.c      ****         
 233:.\main.c      ****         return result;
 405              		.loc 1 233 0
 406 0018 FB88     		ldrh	r3, [r7, #6]
 234:.\main.c      **** }
 407              		.loc 1 234 0
 408 001a 1846     		mov	r0, r3
 409 001c 0837     		adds	r7, r7, #8
 410              		.cfi_def_cfa_offset 8
 411 001e BD46     		mov	sp, r7
 412              		.cfi_def_cfa_register 13
 413              		@ sp needed
 414 0020 80BD     		pop	{r7, pc}
 415              		.cfi_endproc
 416              	.LFE66:
 417              		.size	GetPotentiometerValue, .-GetPotentiometerValue
 418 0022 00BF     		.section	.text.write_led,"ax",%progbits
 419              		.align	2
 420              		.global	write_led
 421              		.thumb
 422              		.thumb_func
 423              		.type	write_led, %function
 424              	write_led:
 425              	.LFB67:
 235:.\main.c      **** 
 236:.\main.c      **** //shorthand for writing to control register
 237:.\main.c      **** void write_led(int value) {
 426              		.loc 1 237 0
 427              		.cfi_startproc
 428              		@ args = 0, pretend = 0, frame = 8
 429              		@ frame_needed = 1, uses_anonymous_args = 0
 430 0000 80B5     		push	{r7, lr}
 431              		.cfi_def_cfa_offset 8
 432              		.cfi_offset 7, -8
 433              		.cfi_offset 14, -4
 434 0002 82B0     		sub	sp, sp, #8
 435              		.cfi_def_cfa_offset 16
 436 0004 00AF     		add	r7, sp, #0
 437              		.cfi_def_cfa_register 7
 438 0006 7860     		str	r0, [r7, #4]
 238:.\main.c      ****     Control_Reg_1_Write(value);   
 439              		.loc 1 238 0
 440 0008 7B68     		ldr	r3, [r7, #4]
 441 000a DBB2     		uxtb	r3, r3
 442 000c 1846     		mov	r0, r3
 443 000e FFF7FEFF 		bl	Control_Reg_1_Write
 239:.\main.c      **** }
 444              		.loc 1 239 0
 445 0012 0837     		adds	r7, r7, #8
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccZnvLT0.s 			page 13


 446              		.cfi_def_cfa_offset 8
 447 0014 BD46     		mov	sp, r7
 448              		.cfi_def_cfa_register 13
 449              		@ sp needed
 450 0016 80BD     		pop	{r7, pc}
 451              		.cfi_endproc
 452              	.LFE67:
 453              		.size	write_led, .-write_led
 454              		.section	.text.PWM_Blink,"ax",%progbits
 455              		.align	2
 456              		.global	PWM_Blink
 457              		.thumb
 458              		.thumb_func
 459              		.type	PWM_Blink, %function
 460              	PWM_Blink:
 461              	.LFB68:
 240:.\main.c      **** 
 241:.\main.c      **** //software PWM function runs in a separate thread.  
 242:.\main.c      **** //runs calculations for PWM parameters, then calls PWM_Blink for timing
 243:.\main.c      **** 
 244:.\main.c      **** //shorthand to wait for timing
 245:.\main.c      **** //evenly blinks LED with equal on/off times
 246:.\main.c      **** void PWM_Blink(uint32 halfPeriod) {
 462              		.loc 1 246 0
 463              		.cfi_startproc
 464              		@ args = 0, pretend = 0, frame = 8
 465              		@ frame_needed = 1, uses_anonymous_args = 0
 466 0000 80B5     		push	{r7, lr}
 467              		.cfi_def_cfa_offset 8
 468              		.cfi_offset 7, -8
 469              		.cfi_offset 14, -4
 470 0002 82B0     		sub	sp, sp, #8
 471              		.cfi_def_cfa_offset 16
 472 0004 00AF     		add	r7, sp, #0
 473              		.cfi_def_cfa_register 7
 474 0006 7860     		str	r0, [r7, #4]
 247:.\main.c      ****     write_led(on);
 475              		.loc 1 247 0
 476 0008 0120     		movs	r0, #1
 477 000a FFF7FEFF 		bl	write_led
 248:.\main.c      ****     CyDelay(halfPeriod);
 478              		.loc 1 248 0
 479 000e 7868     		ldr	r0, [r7, #4]
 480 0010 FFF7FEFF 		bl	CyDelay
 249:.\main.c      ****     write_led(off);
 481              		.loc 1 249 0
 482 0014 0020     		movs	r0, #0
 483 0016 FFF7FEFF 		bl	write_led
 250:.\main.c      ****     CyDelay(halfPeriod); 
 484              		.loc 1 250 0
 485 001a 7868     		ldr	r0, [r7, #4]
 486 001c FFF7FEFF 		bl	CyDelay
 251:.\main.c      **** }
 487              		.loc 1 251 0
 488 0020 0837     		adds	r7, r7, #8
 489              		.cfi_def_cfa_offset 8
 490 0022 BD46     		mov	sp, r7
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccZnvLT0.s 			page 14


 491              		.cfi_def_cfa_register 13
 492              		@ sp needed
 493 0024 80BD     		pop	{r7, pc}
 494              		.cfi_endproc
 495              	.LFE68:
 496              		.size	PWM_Blink, .-PWM_Blink
 497 0026 00BF     		.section	.text.PWM_Ramp,"ax",%progbits
 498              		.align	2
 499              		.global	PWM_Ramp
 500              		.thumb
 501              		.thumb_func
 502              		.type	PWM_Ramp, %function
 503              	PWM_Ramp:
 504              	.LFB69:
 252:.\main.c      **** 
 253:.\main.c      **** //used for different duty cycle
 254:.\main.c      **** void PWM_Ramp(uint32 on_time, uint32 off_time) {
 505              		.loc 1 254 0
 506              		.cfi_startproc
 507              		@ args = 0, pretend = 0, frame = 8
 508              		@ frame_needed = 1, uses_anonymous_args = 0
 509 0000 80B5     		push	{r7, lr}
 510              		.cfi_def_cfa_offset 8
 511              		.cfi_offset 7, -8
 512              		.cfi_offset 14, -4
 513 0002 82B0     		sub	sp, sp, #8
 514              		.cfi_def_cfa_offset 16
 515 0004 00AF     		add	r7, sp, #0
 516              		.cfi_def_cfa_register 7
 517 0006 7860     		str	r0, [r7, #4]
 518 0008 3960     		str	r1, [r7]
 255:.\main.c      ****     write_led(on);
 519              		.loc 1 255 0
 520 000a 0120     		movs	r0, #1
 521 000c FFF7FEFF 		bl	write_led
 256:.\main.c      ****     CyDelay(on_time);
 522              		.loc 1 256 0
 523 0010 7868     		ldr	r0, [r7, #4]
 524 0012 FFF7FEFF 		bl	CyDelay
 257:.\main.c      ****     write_led(off);
 525              		.loc 1 257 0
 526 0016 0020     		movs	r0, #0
 527 0018 FFF7FEFF 		bl	write_led
 258:.\main.c      ****     CyDelay(off_time); 
 528              		.loc 1 258 0
 529 001c 3868     		ldr	r0, [r7]
 530 001e FFF7FEFF 		bl	CyDelay
 259:.\main.c      **** }
 531              		.loc 1 259 0
 532 0022 0837     		adds	r7, r7, #8
 533              		.cfi_def_cfa_offset 8
 534 0024 BD46     		mov	sp, r7
 535              		.cfi_def_cfa_register 13
 536              		@ sp needed
 537 0026 80BD     		pop	{r7, pc}
 538              		.cfi_endproc
 539              	.LFE69:
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccZnvLT0.s 			page 15


 540              		.size	PWM_Ramp, .-PWM_Ramp
 541              		.text
 542              	.Letext0:
 543              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 544              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 545              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 546              		.file 5 "Generated_Source\\PSoC5/core_cm3.h"
 547              		.section	.debug_info,"",%progbits
 548              	.Ldebug_info0:
 549 0000 70020000 		.4byte	0x270
 550 0004 0400     		.2byte	0x4
 551 0006 00000000 		.4byte	.Ldebug_abbrev0
 552 000a 04       		.byte	0x4
 553 000b 01       		.uleb128 0x1
 554 000c 47000000 		.4byte	.LASF42
 555 0010 01       		.byte	0x1
 556 0011 32010000 		.4byte	.LASF43
 557 0015 DD000000 		.4byte	.LASF44
 558 0019 00000000 		.4byte	.Ldebug_ranges0+0
 559 001d 00000000 		.4byte	0
 560 0021 00000000 		.4byte	.Ldebug_line0
 561 0025 02       		.uleb128 0x2
 562 0026 01       		.byte	0x1
 563 0027 06       		.byte	0x6
 564 0028 8B020000 		.4byte	.LASF0
 565 002c 02       		.uleb128 0x2
 566 002d 01       		.byte	0x1
 567 002e 08       		.byte	0x8
 568 002f 6C010000 		.4byte	.LASF1
 569 0033 02       		.uleb128 0x2
 570 0034 02       		.byte	0x2
 571 0035 05       		.byte	0x5
 572 0036 53020000 		.4byte	.LASF2
 573 003a 03       		.uleb128 0x3
 574 003b 7A010000 		.4byte	.LASF4
 575 003f 02       		.byte	0x2
 576 0040 2B       		.byte	0x2b
 577 0041 45000000 		.4byte	0x45
 578 0045 02       		.uleb128 0x2
 579 0046 02       		.byte	0x2
 580 0047 07       		.byte	0x7
 581 0048 97020000 		.4byte	.LASF3
 582 004c 03       		.uleb128 0x3
 583 004d 34000000 		.4byte	.LASF5
 584 0051 02       		.byte	0x2
 585 0052 3F       		.byte	0x3f
 586 0053 57000000 		.4byte	0x57
 587 0057 02       		.uleb128 0x2
 588 0058 04       		.byte	0x4
 589 0059 05       		.byte	0x5
 590 005a 3E000000 		.4byte	.LASF6
 591 005e 02       		.uleb128 0x2
 592 005f 04       		.byte	0x4
 593 0060 07       		.byte	0x7
 594 0061 3B010000 		.4byte	.LASF7
 595 0065 02       		.uleb128 0x2
 596 0066 08       		.byte	0x8
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccZnvLT0.s 			page 16


 597 0067 05       		.byte	0x5
 598 0068 00000000 		.4byte	.LASF8
 599 006c 02       		.uleb128 0x2
 600 006d 08       		.byte	0x8
 601 006e 07       		.byte	0x7
 602 006f F2010000 		.4byte	.LASF9
 603 0073 04       		.uleb128 0x4
 604 0074 04       		.byte	0x4
 605 0075 05       		.byte	0x5
 606 0076 696E7400 		.ascii	"int\000"
 607 007a 02       		.uleb128 0x2
 608 007b 04       		.byte	0x4
 609 007c 07       		.byte	0x7
 610 007d D6010000 		.4byte	.LASF10
 611 0081 03       		.uleb128 0x3
 612 0082 68020000 		.4byte	.LASF11
 613 0086 03       		.byte	0x3
 614 0087 21       		.byte	0x21
 615 0088 3A000000 		.4byte	0x3a
 616 008c 03       		.uleb128 0x3
 617 008d 27020000 		.4byte	.LASF12
 618 0091 03       		.byte	0x3
 619 0092 2C       		.byte	0x2c
 620 0093 4C000000 		.4byte	0x4c
 621 0097 05       		.uleb128 0x5
 622 0098 BC010000 		.4byte	.LASF13
 623 009c 04       		.byte	0x4
 624 009d 9401     		.2byte	0x194
 625 009f 5E000000 		.4byte	0x5e
 626 00a3 02       		.uleb128 0x2
 627 00a4 04       		.byte	0x4
 628 00a5 04       		.byte	0x4
 629 00a6 17010000 		.4byte	.LASF14
 630 00aa 02       		.uleb128 0x2
 631 00ab 08       		.byte	0x8
 632 00ac 04       		.byte	0x4
 633 00ad 85010000 		.4byte	.LASF15
 634 00b1 02       		.uleb128 0x2
 635 00b2 01       		.byte	0x1
 636 00b3 08       		.byte	0x8
 637 00b4 4E020000 		.4byte	.LASF16
 638 00b8 02       		.uleb128 0x2
 639 00b9 04       		.byte	0x4
 640 00ba 07       		.byte	0x7
 641 00bb 2F020000 		.4byte	.LASF17
 642 00bf 06       		.uleb128 0x6
 643 00c0 10020000 		.4byte	.LASF45
 644 00c4 01       		.byte	0x1
 645 00c5 01       		.byte	0x1
 646 00c6 60       		.byte	0x60
 647 00c7 D8000000 		.4byte	0xd8
 648 00cb 07       		.uleb128 0x7
 649 00cc 59010000 		.4byte	.LASF18
 650 00d0 00       		.sleb128 0
 651 00d1 07       		.uleb128 0x7
 652 00d2 18020000 		.4byte	.LASF19
 653 00d6 01       		.sleb128 1
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccZnvLT0.s 			page 17


 654 00d7 00       		.byte	0
 655 00d8 08       		.uleb128 0x8
 656 00d9 7F020000 		.4byte	.LASF20
 657 00dd 01       		.byte	0x1
 658 00de 6B       		.byte	0x6b
 659 00df 00000000 		.4byte	.LFB63
 660 00e3 2C000000 		.4byte	.LFE63-.LFB63
 661 00e7 01       		.uleb128 0x1
 662 00e8 9C       		.byte	0x9c
 663 00e9 09       		.uleb128 0x9
 664 00ea 97010000 		.4byte	.LASF21
 665 00ee 01       		.byte	0x1
 666 00ef 7E       		.byte	0x7e
 667 00f0 73000000 		.4byte	0x73
 668 00f4 00000000 		.4byte	.LFB64
 669 00f8 5C010000 		.4byte	.LFE64-.LFB64
 670 00fc 01       		.uleb128 0x1
 671 00fd 9C       		.byte	0x9c
 672 00fe 0A       		.uleb128 0xa
 673 00ff 8C010000 		.4byte	.LASF46
 674 0103 01       		.byte	0x1
 675 0104 D7       		.byte	0xd7
 676 0105 00000000 		.4byte	.LFB65
 677 0109 30000000 		.4byte	.LFE65-.LFB65
 678 010d 01       		.uleb128 0x1
 679 010e 9C       		.byte	0x9c
 680 010f 0B       		.uleb128 0xb
 681 0110 9C010000 		.4byte	.LASF22
 682 0114 01       		.byte	0x1
 683 0115 E2       		.byte	0xe2
 684 0116 81000000 		.4byte	0x81
 685 011a 00000000 		.4byte	.LFB66
 686 011e 22000000 		.4byte	.LFE66-.LFB66
 687 0122 01       		.uleb128 0x1
 688 0123 9C       		.byte	0x9c
 689 0124 37010000 		.4byte	0x137
 690 0128 0C       		.uleb128 0xc
 691 0129 09020000 		.4byte	.LASF47
 692 012d 01       		.byte	0x1
 693 012e E7       		.byte	0xe7
 694 012f 81000000 		.4byte	0x81
 695 0133 02       		.uleb128 0x2
 696 0134 91       		.byte	0x91
 697 0135 76       		.sleb128 -10
 698 0136 00       		.byte	0
 699 0137 0D       		.uleb128 0xd
 700 0138 B2010000 		.4byte	.LASF23
 701 013c 01       		.byte	0x1
 702 013d ED       		.byte	0xed
 703 013e 00000000 		.4byte	.LFB67
 704 0142 18000000 		.4byte	.LFE67-.LFB67
 705 0146 01       		.uleb128 0x1
 706 0147 9C       		.byte	0x9c
 707 0148 5B010000 		.4byte	0x15b
 708 014c 0E       		.uleb128 0xe
 709 014d 2E000000 		.4byte	.LASF25
 710 0151 01       		.byte	0x1
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccZnvLT0.s 			page 18


 711 0152 ED       		.byte	0xed
 712 0153 73000000 		.4byte	0x73
 713 0157 02       		.uleb128 0x2
 714 0158 91       		.byte	0x91
 715 0159 74       		.sleb128 -12
 716 015a 00       		.byte	0
 717 015b 0D       		.uleb128 0xd
 718 015c 1D020000 		.4byte	.LASF24
 719 0160 01       		.byte	0x1
 720 0161 F6       		.byte	0xf6
 721 0162 00000000 		.4byte	.LFB68
 722 0166 26000000 		.4byte	.LFE68-.LFB68
 723 016a 01       		.uleb128 0x1
 724 016b 9C       		.byte	0x9c
 725 016c 7F010000 		.4byte	0x17f
 726 0170 0E       		.uleb128 0xe
 727 0171 0E000000 		.4byte	.LASF26
 728 0175 01       		.byte	0x1
 729 0176 F6       		.byte	0xf6
 730 0177 97000000 		.4byte	0x97
 731 017b 02       		.uleb128 0x2
 732 017c 91       		.byte	0x91
 733 017d 74       		.sleb128 -12
 734 017e 00       		.byte	0
 735 017f 0D       		.uleb128 0xd
 736 0180 45020000 		.4byte	.LASF27
 737 0184 01       		.byte	0x1
 738 0185 FE       		.byte	0xfe
 739 0186 00000000 		.4byte	.LFB69
 740 018a 28000000 		.4byte	.LFE69-.LFB69
 741 018e 01       		.uleb128 0x1
 742 018f 9C       		.byte	0x9c
 743 0190 B1010000 		.4byte	0x1b1
 744 0194 0E       		.uleb128 0xe
 745 0195 C3010000 		.4byte	.LASF28
 746 0199 01       		.byte	0x1
 747 019a FE       		.byte	0xfe
 748 019b 97000000 		.4byte	0x97
 749 019f 02       		.uleb128 0x2
 750 01a0 91       		.byte	0x91
 751 01a1 74       		.sleb128 -12
 752 01a2 0E       		.uleb128 0xe
 753 01a3 29010000 		.4byte	.LASF29
 754 01a7 01       		.byte	0x1
 755 01a8 FE       		.byte	0xfe
 756 01a9 97000000 		.4byte	0x97
 757 01ad 02       		.uleb128 0x2
 758 01ae 91       		.byte	0x91
 759 01af 70       		.sleb128 -16
 760 01b0 00       		.byte	0
 761 01b1 0F       		.uleb128 0xf
 762 01b2 5F010000 		.4byte	.LASF30
 763 01b6 05       		.byte	0x5
 764 01b7 9606     		.2byte	0x696
 765 01b9 BD010000 		.4byte	0x1bd
 766 01bd 10       		.uleb128 0x10
 767 01be 8C000000 		.4byte	0x8c
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccZnvLT0.s 			page 19


 768 01c2 11       		.uleb128 0x11
 769 01c3 4D010000 		.4byte	.LASF31
 770 01c7 01       		.byte	0x1
 771 01c8 52       		.byte	0x52
 772 01c9 D3010000 		.4byte	0x1d3
 773 01cd 05       		.uleb128 0x5
 774 01ce 03       		.byte	0x3
 775 01cf 00000000 		.4byte	debounce_on
 776 01d3 02       		.uleb128 0x2
 777 01d4 01       		.byte	0x1
 778 01d5 02       		.byte	0x2
 779 01d6 AA020000 		.4byte	.LASF32
 780 01da 11       		.uleb128 0x11
 781 01db E3010000 		.4byte	.LASF33
 782 01df 01       		.byte	0x1
 783 01e0 53       		.byte	0x53
 784 01e1 D3010000 		.4byte	0x1d3
 785 01e5 05       		.uleb128 0x5
 786 01e6 03       		.byte	0x3
 787 01e7 00000000 		.4byte	btn_can_change
 788 01eb 11       		.uleb128 0x11
 789 01ec D5000000 		.4byte	.LASF34
 790 01f0 01       		.byte	0x1
 791 01f1 54       		.byte	0x54
 792 01f2 D3010000 		.4byte	0x1d3
 793 01f6 05       		.uleb128 0x5
 794 01f7 03       		.byte	0x3
 795 01f8 00000000 		.4byte	dimming
 796 01fc 11       		.uleb128 0x11
 797 01fd 19000000 		.4byte	.LASF35
 798 0201 01       		.byte	0x1
 799 0202 55       		.byte	0x55
 800 0203 97000000 		.4byte	0x97
 801 0207 05       		.uleb128 0x5
 802 0208 03       		.byte	0x3
 803 0209 00000000 		.4byte	toggle_light_time_ms
 804 020d 11       		.uleb128 0x11
 805 020e 71020000 		.4byte	.LASF36
 806 0212 01       		.byte	0x1
 807 0213 59       		.byte	0x59
 808 0214 97000000 		.4byte	0x97
 809 0218 05       		.uleb128 0x5
 810 0219 03       		.byte	0x3
 811 021a 00000000 		.4byte	total_time_ms
 812 021e 11       		.uleb128 0x11
 813 021f 5D020000 		.4byte	.LASF37
 814 0223 01       		.byte	0x1
 815 0224 5A       		.byte	0x5a
 816 0225 97000000 		.4byte	0x97
 817 0229 05       		.uleb128 0x5
 818 022a 03       		.byte	0x3
 819 022b 00000000 		.4byte	on_time_ms
 820 022f 11       		.uleb128 0x11
 821 0230 1D010000 		.4byte	.LASF38
 822 0234 01       		.byte	0x1
 823 0235 5B       		.byte	0x5b
 824 0236 97000000 		.4byte	0x97
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccZnvLT0.s 			page 20


 825 023a 05       		.uleb128 0x5
 826 023b 03       		.byte	0x3
 827 023c 00000000 		.4byte	off_time_ms
 828 0240 11       		.uleb128 0x11
 829 0241 CB010000 		.4byte	.LASF39
 830 0245 01       		.byte	0x1
 831 0246 5C       		.byte	0x5c
 832 0247 A3000000 		.4byte	0xa3
 833 024b 05       		.uleb128 0x5
 834 024c 03       		.byte	0x3
 835 024d 00000000 		.4byte	duty_cycle
 836 0251 11       		.uleb128 0x11
 837 0252 B0020000 		.4byte	.LASF40
 838 0256 01       		.byte	0x1
 839 0257 61       		.byte	0x61
 840 0258 BF000000 		.4byte	0xbf
 841 025c 05       		.uleb128 0x5
 842 025d 03       		.byte	0x3
 843 025e 00000000 		.4byte	currentMode
 844 0262 11       		.uleb128 0x11
 845 0263 38020000 		.4byte	.LASF41
 846 0267 01       		.byte	0x1
 847 0268 62       		.byte	0x62
 848 0269 BF000000 		.4byte	0xbf
 849 026d 05       		.uleb128 0x5
 850 026e 03       		.byte	0x3
 851 026f 00000000 		.4byte	previousMode
 852 0273 00       		.byte	0
 853              		.section	.debug_abbrev,"",%progbits
 854              	.Ldebug_abbrev0:
 855 0000 01       		.uleb128 0x1
 856 0001 11       		.uleb128 0x11
 857 0002 01       		.byte	0x1
 858 0003 25       		.uleb128 0x25
 859 0004 0E       		.uleb128 0xe
 860 0005 13       		.uleb128 0x13
 861 0006 0B       		.uleb128 0xb
 862 0007 03       		.uleb128 0x3
 863 0008 0E       		.uleb128 0xe
 864 0009 1B       		.uleb128 0x1b
 865 000a 0E       		.uleb128 0xe
 866 000b 55       		.uleb128 0x55
 867 000c 17       		.uleb128 0x17
 868 000d 11       		.uleb128 0x11
 869 000e 01       		.uleb128 0x1
 870 000f 10       		.uleb128 0x10
 871 0010 17       		.uleb128 0x17
 872 0011 00       		.byte	0
 873 0012 00       		.byte	0
 874 0013 02       		.uleb128 0x2
 875 0014 24       		.uleb128 0x24
 876 0015 00       		.byte	0
 877 0016 0B       		.uleb128 0xb
 878 0017 0B       		.uleb128 0xb
 879 0018 3E       		.uleb128 0x3e
 880 0019 0B       		.uleb128 0xb
 881 001a 03       		.uleb128 0x3
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccZnvLT0.s 			page 21


 882 001b 0E       		.uleb128 0xe
 883 001c 00       		.byte	0
 884 001d 00       		.byte	0
 885 001e 03       		.uleb128 0x3
 886 001f 16       		.uleb128 0x16
 887 0020 00       		.byte	0
 888 0021 03       		.uleb128 0x3
 889 0022 0E       		.uleb128 0xe
 890 0023 3A       		.uleb128 0x3a
 891 0024 0B       		.uleb128 0xb
 892 0025 3B       		.uleb128 0x3b
 893 0026 0B       		.uleb128 0xb
 894 0027 49       		.uleb128 0x49
 895 0028 13       		.uleb128 0x13
 896 0029 00       		.byte	0
 897 002a 00       		.byte	0
 898 002b 04       		.uleb128 0x4
 899 002c 24       		.uleb128 0x24
 900 002d 00       		.byte	0
 901 002e 0B       		.uleb128 0xb
 902 002f 0B       		.uleb128 0xb
 903 0030 3E       		.uleb128 0x3e
 904 0031 0B       		.uleb128 0xb
 905 0032 03       		.uleb128 0x3
 906 0033 08       		.uleb128 0x8
 907 0034 00       		.byte	0
 908 0035 00       		.byte	0
 909 0036 05       		.uleb128 0x5
 910 0037 16       		.uleb128 0x16
 911 0038 00       		.byte	0
 912 0039 03       		.uleb128 0x3
 913 003a 0E       		.uleb128 0xe
 914 003b 3A       		.uleb128 0x3a
 915 003c 0B       		.uleb128 0xb
 916 003d 3B       		.uleb128 0x3b
 917 003e 05       		.uleb128 0x5
 918 003f 49       		.uleb128 0x49
 919 0040 13       		.uleb128 0x13
 920 0041 00       		.byte	0
 921 0042 00       		.byte	0
 922 0043 06       		.uleb128 0x6
 923 0044 04       		.uleb128 0x4
 924 0045 01       		.byte	0x1
 925 0046 03       		.uleb128 0x3
 926 0047 0E       		.uleb128 0xe
 927 0048 0B       		.uleb128 0xb
 928 0049 0B       		.uleb128 0xb
 929 004a 3A       		.uleb128 0x3a
 930 004b 0B       		.uleb128 0xb
 931 004c 3B       		.uleb128 0x3b
 932 004d 0B       		.uleb128 0xb
 933 004e 01       		.uleb128 0x1
 934 004f 13       		.uleb128 0x13
 935 0050 00       		.byte	0
 936 0051 00       		.byte	0
 937 0052 07       		.uleb128 0x7
 938 0053 28       		.uleb128 0x28
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccZnvLT0.s 			page 22


 939 0054 00       		.byte	0
 940 0055 03       		.uleb128 0x3
 941 0056 0E       		.uleb128 0xe
 942 0057 1C       		.uleb128 0x1c
 943 0058 0D       		.uleb128 0xd
 944 0059 00       		.byte	0
 945 005a 00       		.byte	0
 946 005b 08       		.uleb128 0x8
 947 005c 2E       		.uleb128 0x2e
 948 005d 00       		.byte	0
 949 005e 3F       		.uleb128 0x3f
 950 005f 19       		.uleb128 0x19
 951 0060 03       		.uleb128 0x3
 952 0061 0E       		.uleb128 0xe
 953 0062 3A       		.uleb128 0x3a
 954 0063 0B       		.uleb128 0xb
 955 0064 3B       		.uleb128 0x3b
 956 0065 0B       		.uleb128 0xb
 957 0066 27       		.uleb128 0x27
 958 0067 19       		.uleb128 0x19
 959 0068 11       		.uleb128 0x11
 960 0069 01       		.uleb128 0x1
 961 006a 12       		.uleb128 0x12
 962 006b 06       		.uleb128 0x6
 963 006c 40       		.uleb128 0x40
 964 006d 18       		.uleb128 0x18
 965 006e 9642     		.uleb128 0x2116
 966 0070 19       		.uleb128 0x19
 967 0071 00       		.byte	0
 968 0072 00       		.byte	0
 969 0073 09       		.uleb128 0x9
 970 0074 2E       		.uleb128 0x2e
 971 0075 00       		.byte	0
 972 0076 3F       		.uleb128 0x3f
 973 0077 19       		.uleb128 0x19
 974 0078 03       		.uleb128 0x3
 975 0079 0E       		.uleb128 0xe
 976 007a 3A       		.uleb128 0x3a
 977 007b 0B       		.uleb128 0xb
 978 007c 3B       		.uleb128 0x3b
 979 007d 0B       		.uleb128 0xb
 980 007e 49       		.uleb128 0x49
 981 007f 13       		.uleb128 0x13
 982 0080 11       		.uleb128 0x11
 983 0081 01       		.uleb128 0x1
 984 0082 12       		.uleb128 0x12
 985 0083 06       		.uleb128 0x6
 986 0084 40       		.uleb128 0x40
 987 0085 18       		.uleb128 0x18
 988 0086 9642     		.uleb128 0x2116
 989 0088 19       		.uleb128 0x19
 990 0089 00       		.byte	0
 991 008a 00       		.byte	0
 992 008b 0A       		.uleb128 0xa
 993 008c 2E       		.uleb128 0x2e
 994 008d 00       		.byte	0
 995 008e 3F       		.uleb128 0x3f
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccZnvLT0.s 			page 23


 996 008f 19       		.uleb128 0x19
 997 0090 03       		.uleb128 0x3
 998 0091 0E       		.uleb128 0xe
 999 0092 3A       		.uleb128 0x3a
 1000 0093 0B       		.uleb128 0xb
 1001 0094 3B       		.uleb128 0x3b
 1002 0095 0B       		.uleb128 0xb
 1003 0096 11       		.uleb128 0x11
 1004 0097 01       		.uleb128 0x1
 1005 0098 12       		.uleb128 0x12
 1006 0099 06       		.uleb128 0x6
 1007 009a 40       		.uleb128 0x40
 1008 009b 18       		.uleb128 0x18
 1009 009c 9742     		.uleb128 0x2117
 1010 009e 19       		.uleb128 0x19
 1011 009f 00       		.byte	0
 1012 00a0 00       		.byte	0
 1013 00a1 0B       		.uleb128 0xb
 1014 00a2 2E       		.uleb128 0x2e
 1015 00a3 01       		.byte	0x1
 1016 00a4 3F       		.uleb128 0x3f
 1017 00a5 19       		.uleb128 0x19
 1018 00a6 03       		.uleb128 0x3
 1019 00a7 0E       		.uleb128 0xe
 1020 00a8 3A       		.uleb128 0x3a
 1021 00a9 0B       		.uleb128 0xb
 1022 00aa 3B       		.uleb128 0x3b
 1023 00ab 0B       		.uleb128 0xb
 1024 00ac 49       		.uleb128 0x49
 1025 00ad 13       		.uleb128 0x13
 1026 00ae 11       		.uleb128 0x11
 1027 00af 01       		.uleb128 0x1
 1028 00b0 12       		.uleb128 0x12
 1029 00b1 06       		.uleb128 0x6
 1030 00b2 40       		.uleb128 0x40
 1031 00b3 18       		.uleb128 0x18
 1032 00b4 9642     		.uleb128 0x2116
 1033 00b6 19       		.uleb128 0x19
 1034 00b7 01       		.uleb128 0x1
 1035 00b8 13       		.uleb128 0x13
 1036 00b9 00       		.byte	0
 1037 00ba 00       		.byte	0
 1038 00bb 0C       		.uleb128 0xc
 1039 00bc 34       		.uleb128 0x34
 1040 00bd 00       		.byte	0
 1041 00be 03       		.uleb128 0x3
 1042 00bf 0E       		.uleb128 0xe
 1043 00c0 3A       		.uleb128 0x3a
 1044 00c1 0B       		.uleb128 0xb
 1045 00c2 3B       		.uleb128 0x3b
 1046 00c3 0B       		.uleb128 0xb
 1047 00c4 49       		.uleb128 0x49
 1048 00c5 13       		.uleb128 0x13
 1049 00c6 02       		.uleb128 0x2
 1050 00c7 18       		.uleb128 0x18
 1051 00c8 00       		.byte	0
 1052 00c9 00       		.byte	0
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccZnvLT0.s 			page 24


 1053 00ca 0D       		.uleb128 0xd
 1054 00cb 2E       		.uleb128 0x2e
 1055 00cc 01       		.byte	0x1
 1056 00cd 3F       		.uleb128 0x3f
 1057 00ce 19       		.uleb128 0x19
 1058 00cf 03       		.uleb128 0x3
 1059 00d0 0E       		.uleb128 0xe
 1060 00d1 3A       		.uleb128 0x3a
 1061 00d2 0B       		.uleb128 0xb
 1062 00d3 3B       		.uleb128 0x3b
 1063 00d4 0B       		.uleb128 0xb
 1064 00d5 27       		.uleb128 0x27
 1065 00d6 19       		.uleb128 0x19
 1066 00d7 11       		.uleb128 0x11
 1067 00d8 01       		.uleb128 0x1
 1068 00d9 12       		.uleb128 0x12
 1069 00da 06       		.uleb128 0x6
 1070 00db 40       		.uleb128 0x40
 1071 00dc 18       		.uleb128 0x18
 1072 00dd 9642     		.uleb128 0x2116
 1073 00df 19       		.uleb128 0x19
 1074 00e0 01       		.uleb128 0x1
 1075 00e1 13       		.uleb128 0x13
 1076 00e2 00       		.byte	0
 1077 00e3 00       		.byte	0
 1078 00e4 0E       		.uleb128 0xe
 1079 00e5 05       		.uleb128 0x5
 1080 00e6 00       		.byte	0
 1081 00e7 03       		.uleb128 0x3
 1082 00e8 0E       		.uleb128 0xe
 1083 00e9 3A       		.uleb128 0x3a
 1084 00ea 0B       		.uleb128 0xb
 1085 00eb 3B       		.uleb128 0x3b
 1086 00ec 0B       		.uleb128 0xb
 1087 00ed 49       		.uleb128 0x49
 1088 00ee 13       		.uleb128 0x13
 1089 00ef 02       		.uleb128 0x2
 1090 00f0 18       		.uleb128 0x18
 1091 00f1 00       		.byte	0
 1092 00f2 00       		.byte	0
 1093 00f3 0F       		.uleb128 0xf
 1094 00f4 34       		.uleb128 0x34
 1095 00f5 00       		.byte	0
 1096 00f6 03       		.uleb128 0x3
 1097 00f7 0E       		.uleb128 0xe
 1098 00f8 3A       		.uleb128 0x3a
 1099 00f9 0B       		.uleb128 0xb
 1100 00fa 3B       		.uleb128 0x3b
 1101 00fb 05       		.uleb128 0x5
 1102 00fc 49       		.uleb128 0x49
 1103 00fd 13       		.uleb128 0x13
 1104 00fe 3F       		.uleb128 0x3f
 1105 00ff 19       		.uleb128 0x19
 1106 0100 3C       		.uleb128 0x3c
 1107 0101 19       		.uleb128 0x19
 1108 0102 00       		.byte	0
 1109 0103 00       		.byte	0
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccZnvLT0.s 			page 25


 1110 0104 10       		.uleb128 0x10
 1111 0105 35       		.uleb128 0x35
 1112 0106 00       		.byte	0
 1113 0107 49       		.uleb128 0x49
 1114 0108 13       		.uleb128 0x13
 1115 0109 00       		.byte	0
 1116 010a 00       		.byte	0
 1117 010b 11       		.uleb128 0x11
 1118 010c 34       		.uleb128 0x34
 1119 010d 00       		.byte	0
 1120 010e 03       		.uleb128 0x3
 1121 010f 0E       		.uleb128 0xe
 1122 0110 3A       		.uleb128 0x3a
 1123 0111 0B       		.uleb128 0xb
 1124 0112 3B       		.uleb128 0x3b
 1125 0113 0B       		.uleb128 0xb
 1126 0114 49       		.uleb128 0x49
 1127 0115 13       		.uleb128 0x13
 1128 0116 3F       		.uleb128 0x3f
 1129 0117 19       		.uleb128 0x19
 1130 0118 02       		.uleb128 0x2
 1131 0119 18       		.uleb128 0x18
 1132 011a 00       		.byte	0
 1133 011b 00       		.byte	0
 1134 011c 00       		.byte	0
 1135              		.section	.debug_aranges,"",%progbits
 1136 0000 4C000000 		.4byte	0x4c
 1137 0004 0200     		.2byte	0x2
 1138 0006 00000000 		.4byte	.Ldebug_info0
 1139 000a 04       		.byte	0x4
 1140 000b 00       		.byte	0
 1141 000c 0000     		.2byte	0
 1142 000e 0000     		.2byte	0
 1143 0010 00000000 		.4byte	.LFB63
 1144 0014 2C000000 		.4byte	.LFE63-.LFB63
 1145 0018 00000000 		.4byte	.LFB64
 1146 001c 5C010000 		.4byte	.LFE64-.LFB64
 1147 0020 00000000 		.4byte	.LFB65
 1148 0024 30000000 		.4byte	.LFE65-.LFB65
 1149 0028 00000000 		.4byte	.LFB66
 1150 002c 22000000 		.4byte	.LFE66-.LFB66
 1151 0030 00000000 		.4byte	.LFB67
 1152 0034 18000000 		.4byte	.LFE67-.LFB67
 1153 0038 00000000 		.4byte	.LFB68
 1154 003c 26000000 		.4byte	.LFE68-.LFB68
 1155 0040 00000000 		.4byte	.LFB69
 1156 0044 28000000 		.4byte	.LFE69-.LFB69
 1157 0048 00000000 		.4byte	0
 1158 004c 00000000 		.4byte	0
 1159              		.section	.debug_ranges,"",%progbits
 1160              	.Ldebug_ranges0:
 1161 0000 00000000 		.4byte	.LFB63
 1162 0004 2C000000 		.4byte	.LFE63
 1163 0008 00000000 		.4byte	.LFB64
 1164 000c 5C010000 		.4byte	.LFE64
 1165 0010 00000000 		.4byte	.LFB65
 1166 0014 30000000 		.4byte	.LFE65
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccZnvLT0.s 			page 26


 1167 0018 00000000 		.4byte	.LFB66
 1168 001c 22000000 		.4byte	.LFE66
 1169 0020 00000000 		.4byte	.LFB67
 1170 0024 18000000 		.4byte	.LFE67
 1171 0028 00000000 		.4byte	.LFB68
 1172 002c 26000000 		.4byte	.LFE68
 1173 0030 00000000 		.4byte	.LFB69
 1174 0034 28000000 		.4byte	.LFE69
 1175 0038 00000000 		.4byte	0
 1176 003c 00000000 		.4byte	0
 1177              		.section	.debug_line,"",%progbits
 1178              	.Ldebug_line0:
 1179 0000 F5010000 		.section	.debug_str,"MS",%progbits,1
 1179      02004901 
 1179      00000201 
 1179      FB0E0D00 
 1179      01010101 
 1180              	.LASF8:
 1181 0000 6C6F6E67 		.ascii	"long long int\000"
 1181      206C6F6E 
 1181      6720696E 
 1181      7400
 1182              	.LASF26:
 1183 000e 68616C66 		.ascii	"halfPeriod\000"
 1183      50657269 
 1183      6F6400
 1184              	.LASF35:
 1185 0019 746F6767 		.ascii	"toggle_light_time_ms\000"
 1185      6C655F6C 
 1185      69676874 
 1185      5F74696D 
 1185      655F6D73 
 1186              	.LASF25:
 1187 002e 76616C75 		.ascii	"value\000"
 1187      6500
 1188              	.LASF5:
 1189 0034 5F5F696E 		.ascii	"__int32_t\000"
 1189      7433325F 
 1189      7400
 1190              	.LASF6:
 1191 003e 6C6F6E67 		.ascii	"long int\000"
 1191      20696E74 
 1191      00
 1192              	.LASF42:
 1193 0047 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1193      4320342E 
 1193      392E3320 
 1193      32303135 
 1193      30333033 
 1194 007a 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 1194      20726576 
 1194      6973696F 
 1194      6E203232 
 1194      31323230 
 1195 00ad 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 1195      66756E63 
 1195      74696F6E 
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccZnvLT0.s 			page 27


 1195      2D736563 
 1195      74696F6E 
 1196              	.LASF34:
 1197 00d5 64696D6D 		.ascii	"dimming\000"
 1197      696E6700 
 1198              	.LASF44:
 1199 00dd 453A5C44 		.ascii	"E:\\Documents\\PSoC Creator\\engr478labs\\Lab2_Soft"
 1199      6F63756D 
 1199      656E7473 
 1199      5C50536F 
 1199      43204372 
 1200 010c 77617265 		.ascii	"ware.cydsn\000"
 1200      2E637964 
 1200      736E00
 1201              	.LASF14:
 1202 0117 666C6F61 		.ascii	"float\000"
 1202      7400
 1203              	.LASF38:
 1204 011d 6F66665F 		.ascii	"off_time_ms\000"
 1204      74696D65 
 1204      5F6D7300 
 1205              	.LASF29:
 1206 0129 6F66665F 		.ascii	"off_time\000"
 1206      74696D65 
 1206      00
 1207              	.LASF43:
 1208 0132 2E5C6D61 		.ascii	".\\main.c\000"
 1208      696E2E63 
 1208      00
 1209              	.LASF7:
 1210 013b 6C6F6E67 		.ascii	"long unsigned int\000"
 1210      20756E73 
 1210      69676E65 
 1210      6420696E 
 1210      7400
 1211              	.LASF31:
 1212 014d 6465626F 		.ascii	"debounce_on\000"
 1212      756E6365 
 1212      5F6F6E00 
 1213              	.LASF18:
 1214 0159 626C696E 		.ascii	"blink\000"
 1214      6B00
 1215              	.LASF30:
 1216 015f 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1216      52784275 
 1216      66666572 
 1216      00
 1217              	.LASF1:
 1218 016c 756E7369 		.ascii	"unsigned char\000"
 1218      676E6564 
 1218      20636861 
 1218      7200
 1219              	.LASF4:
 1220 017a 5F5F7569 		.ascii	"__uint16_t\000"
 1220      6E743136 
 1220      5F7400
 1221              	.LASF15:
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccZnvLT0.s 			page 28


 1222 0185 646F7562 		.ascii	"double\000"
 1222      6C6500
 1223              	.LASF46:
 1224 018c 546F6767 		.ascii	"ToggleMode\000"
 1224      6C654D6F 
 1224      646500
 1225              	.LASF21:
 1226 0197 6D61696E 		.ascii	"main\000"
 1226      00
 1227              	.LASF22:
 1228 019c 47657450 		.ascii	"GetPotentiometerValue\000"
 1228      6F74656E 
 1228      74696F6D 
 1228      65746572 
 1228      56616C75 
 1229              	.LASF23:
 1230 01b2 77726974 		.ascii	"write_led\000"
 1230      655F6C65 
 1230      6400
 1231              	.LASF13:
 1232 01bc 75696E74 		.ascii	"uint32\000"
 1232      333200
 1233              	.LASF28:
 1234 01c3 6F6E5F74 		.ascii	"on_time\000"
 1234      696D6500 
 1235              	.LASF39:
 1236 01cb 64757479 		.ascii	"duty_cycle\000"
 1236      5F637963 
 1236      6C6500
 1237              	.LASF10:
 1238 01d6 756E7369 		.ascii	"unsigned int\000"
 1238      676E6564 
 1238      20696E74 
 1238      00
 1239              	.LASF33:
 1240 01e3 62746E5F 		.ascii	"btn_can_change\000"
 1240      63616E5F 
 1240      6368616E 
 1240      676500
 1241              	.LASF9:
 1242 01f2 6C6F6E67 		.ascii	"long long unsigned int\000"
 1242      206C6F6E 
 1242      6720756E 
 1242      7369676E 
 1242      65642069 
 1243              	.LASF47:
 1244 0209 72657375 		.ascii	"result\000"
 1244      6C7400
 1245              	.LASF45:
 1246 0210 70776D4D 		.ascii	"pwmMode\000"
 1246      6F646500 
 1247              	.LASF19:
 1248 0218 72616D70 		.ascii	"ramp\000"
 1248      00
 1249              	.LASF24:
 1250 021d 50574D5F 		.ascii	"PWM_Blink\000"
 1250      426C696E 
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccZnvLT0.s 			page 29


 1250      6B00
 1251              	.LASF12:
 1252 0227 696E7433 		.ascii	"int32_t\000"
 1252      325F7400 
 1253              	.LASF17:
 1254 022f 73697A65 		.ascii	"sizetype\000"
 1254      74797065 
 1254      00
 1255              	.LASF41:
 1256 0238 70726576 		.ascii	"previousMode\000"
 1256      696F7573 
 1256      4D6F6465 
 1256      00
 1257              	.LASF27:
 1258 0245 50574D5F 		.ascii	"PWM_Ramp\000"
 1258      52616D70 
 1258      00
 1259              	.LASF16:
 1260 024e 63686172 		.ascii	"char\000"
 1260      00
 1261              	.LASF2:
 1262 0253 73686F72 		.ascii	"short int\000"
 1262      7420696E 
 1262      7400
 1263              	.LASF37:
 1264 025d 6F6E5F74 		.ascii	"on_time_ms\000"
 1264      696D655F 
 1264      6D7300
 1265              	.LASF11:
 1266 0268 75696E74 		.ascii	"uint16_t\000"
 1266      31365F74 
 1266      00
 1267              	.LASF36:
 1268 0271 746F7461 		.ascii	"total_time_ms\000"
 1268      6C5F7469 
 1268      6D655F6D 
 1268      7300
 1269              	.LASF20:
 1270 027f 546F6767 		.ascii	"ToggleModes\000"
 1270      6C654D6F 
 1270      64657300 
 1271              	.LASF0:
 1272 028b 7369676E 		.ascii	"signed char\000"
 1272      65642063 
 1272      68617200 
 1273              	.LASF3:
 1274 0297 73686F72 		.ascii	"short unsigned int\000"
 1274      7420756E 
 1274      7369676E 
 1274      65642069 
 1274      6E7400
 1275              	.LASF32:
 1276 02aa 5F426F6F 		.ascii	"_Bool\000"
 1276      6C00
 1277              	.LASF40:
 1278 02b0 63757272 		.ascii	"currentMode\000"
 1278      656E744D 
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccZnvLT0.s 			page 30


 1278      6F646500 
 1279              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
