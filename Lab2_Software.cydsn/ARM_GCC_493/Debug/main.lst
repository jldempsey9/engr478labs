ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	debounce_on
  19              		.bss
  20              		.type	debounce_on, %object
  21              		.size	debounce_on, 1
  22              	debounce_on:
  23 0000 00       		.space	1
  24              		.global	dimming
  25              		.type	dimming, %object
  26              		.size	dimming, 1
  27              	dimming:
  28 0001 00       		.space	1
  29              		.global	toggle_light_time_ms
  30              		.data
  31              		.align	2
  32              		.type	toggle_light_time_ms, %object
  33              		.size	toggle_light_time_ms, 4
  34              	toggle_light_time_ms:
  35 0000 F4010000 		.word	500
  36              		.global	total_time_ms
  37              		.align	2
  38              		.type	total_time_ms, %object
  39              		.size	total_time_ms, 4
  40              	total_time_ms:
  41 0004 F4010000 		.word	500
  42              		.global	on_time_ms
  43              		.align	2
  44              		.type	on_time_ms, %object
  45              		.size	on_time_ms, 4
  46              	on_time_ms:
  47 0008 FA000000 		.word	250
  48              		.global	off_time_ms
  49              		.align	2
  50              		.type	off_time_ms, %object
  51              		.size	off_time_ms, 4
  52              	off_time_ms:
  53 000c FA000000 		.word	250
  54              		.global	duty_cycle
  55              		.align	2
  56              		.type	duty_cycle, %object
  57              		.size	duty_cycle, 4
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 2


  58              	duty_cycle:
  59 0010 0000003F 		.word	1056964608
  60              		.comm	currentMode,1,1
  61              		.comm	previousMode,1,1
  62              		.section	.text.ToggleModes,"ax",%progbits
  63              		.align	2
  64              		.global	ToggleModes
  65              		.thumb
  66              		.thumb_func
  67              		.type	ToggleModes, %function
  68              	ToggleModes:
  69              	.LFB63:
  70              		.file 1 ".\\main.c"
   1:.\main.c      **** /******************************************************************************
   2:.\main.c      **** * Project Name		: CE95352 Blinking LED
   3:.\main.c      **** * File Name			: main.c
   4:.\main.c      **** * Version 			: **
   5:.\main.c      **** * Device Used		: CY8C5888LTI-LP097
   6:.\main.c      **** * Software Used		: PSoC Creator 3.1 SP2
   7:.\main.c      **** * Compiler    		: ARM GCC 4.8.4, ARM RVDS Generic, ARM MDK Generic
   8:.\main.c      **** * Related Hardware	: CY8CKIT059 PSoC 5 LP Prototyping Kit 
   9:.\main.c      **** * Owner				: KLMZ
  10:.\main.c      **** *
  11:.\main.c      **** ********************************************************************************
  12:.\main.c      **** * Copyright (2015), Cypress Semiconductor Corporation. All Rights Reserved.
  13:.\main.c      **** ********************************************************************************
  14:.\main.c      **** * This software is owned by Cypress Semiconductor Corporation (Cypress)
  15:.\main.c      **** * and is protected by and subject to worldwide patent protection (United
  16:.\main.c      **** * States and foreign), United States copyright laws and international treaty
  17:.\main.c      **** * provisions. Cypress hereby grants to licensee a personal, non-exclusive,
  18:.\main.c      **** * non-transferable license to copy, use, modify, create derivative works of,
  19:.\main.c      **** * and compile the Cypress Source Code and derivative works for the sole
  20:.\main.c      **** * purpose of creating custom software in support of licensee product to be
  21:.\main.c      **** * used only in conjunction with a Cypress integrated circuit as specified in
  22:.\main.c      **** * the applicable agreement. Any reproduction, modification, translation,
  23:.\main.c      **** * compilation, or representation of this software except as specified above 
  24:.\main.c      **** * is prohibited without the express written permission of Cypress.
  25:.\main.c      **** *
  26:.\main.c      **** * Disclaimer: CYPRESS MAKES NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, WITH 
  27:.\main.c      **** * REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  28:.\main.c      **** * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  29:.\main.c      **** * Cypress reserves the right to make changes without further notice to the 
  30:.\main.c      **** * materials described herein. Cypress does not assume any liability arising out 
  31:.\main.c      **** * of the application or use of any product or circuit described herein. Cypress 
  32:.\main.c      **** * does not authorize its products for use as critical components in life-support 
  33:.\main.c      **** * systems where a malfunction or failure may reasonably be expected to result in 
  34:.\main.c      **** * significant injury to the user. The inclusion of Cypress' product in a life-
  35:.\main.c      **** * support systems application implies that the manufacturer assumes all risk of 
  36:.\main.c      **** * such use and in doing so indemnifies Cypress against all charges. 
  37:.\main.c      **** *
  38:.\main.c      **** * Use of this Software may be limited by and subject to the applicable Cypress
  39:.\main.c      **** * software license agreement. 
  40:.\main.c      **** *******************************************************************************/
  41:.\main.c      **** 
  42:.\main.c      **** #include <device.h>
  43:.\main.c      **** #include <stdio.h>
  44:.\main.c      **** #include <string.h>
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 3


  45:.\main.c      **** #include <unistd.h>
  46:.\main.c      **** #include <stdbool.h>
  47:.\main.c      **** #include <errno.h>
  48:.\main.c      **** 
  49:.\main.c      **** /*******************************************************************************
  50:.\main.c      **** * Function Name: main
  51:.\main.c      **** ********************************************************************************
  52:.\main.c      **** *
  53:.\main.c      **** * Summary:
  54:.\main.c      **** *  Software-controller PWM controls and LED to blink in 1s interval
  55:.\main.c      ****                            as well as control the brightness
  56:.\main.c      **** *
  57:.\main.c      **** * Parameters:
  58:.\main.c      **** *  None.
  59:.\main.c      **** *
  60:.\main.c      **** * Return:
  61:.\main.c      **** *  None.
  62:.\main.c      **** *
  63:.\main.c      **** 
  64:.\main.c      **** Partner Names: John Dempsey, Haitham Alzerma, Kwesi
  65:.\main.c      **** Partner Lab Group name: 3GL (3 Guys in a Lab)
  66:.\main.c      **** *******************************************************************************/
  67:.\main.c      **** 
  68:.\main.c      **** //CONSTANTS
  69:.\main.c      **** //settings
  70:.\main.c      **** #define USING_INTERRUPTS 0      //1 for using interrupts, 0 for polling
  71:.\main.c      **** #define HUMAN_EYE_FPS 60        //at 60hz, most people can't detect difference
  72:.\main.c      **** #define DEBOUNCE_TIME 50      //minimum time to wait for button to finish bouncing
  73:.\main.c      **** #define RAMP_RESOLUTION 50           //RAMP_RESOLUTION for duty cycle
  74:.\main.c      **** #define POT_MAX 4080            //max reading from DAC potentiometer @ 4V
  75:.\main.c      **** #define FREQUENCY_RATIO 4       //divide potentiometer result by this to get a max period.  frequen
  76:.\main.c      **** 
  77:.\main.c      **** //global constants
  78:.\main.c      **** #define on 1
  79:.\main.c      **** #define off 0
  80:.\main.c      **** 
  81:.\main.c      **** //placeholder variables
  82:.\main.c      **** bool debounce_on = false;       //used to delay polling to debounce button
  83:.\main.c      **** //float currentBrightness = 0;
  84:.\main.c      **** bool dimming = false;                   //used with the 'ramp' function
  85:.\main.c      **** uint32 toggle_light_time_ms = 500;      //how fast to blink LED in 'blink' mode, can adjust with Po
  86:.\main.c      ****                                         //default to blink the light every half second
  87:.\main.c      **** 
  88:.\main.c      **** //PWM variables
  89:.\main.c      **** uint32 total_time_ms = 500;               //period of PWM, default 500ms
  90:.\main.c      **** uint32 on_time_ms = 250;                  //how many ms the LED is on, must be < total_time_ms
  91:.\main.c      **** uint32 off_time_ms = 250;
  92:.\main.c      **** float duty_cycle = 0.5;                 //what % of PWM is high, default to 50% on
  93:.\main.c      **** 
  94:.\main.c      **** 
  95:.\main.c      **** //possible modes for LED
  96:.\main.c      **** enum pwmMode {blink, ramp};
  97:.\main.c      **** enum pwmMode currentMode;
  98:.\main.c      **** enum pwmMode previousMode;
  99:.\main.c      **** 
 100:.\main.c      **** 
 101:.\main.c      **** //functions
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 4


 102:.\main.c      **** void write_led(int);
 103:.\main.c      **** void Software_PWM_Start();  //attemps to start a new thread (not used)
 104:.\main.c      **** void PWM_Blink(uint32);     //always a 50% duty cycle
 105:.\main.c      **** void PWM_Ramp(uint32, uint32);  //different on/off times
 106:.\main.c      **** uint16_t GetPotentiometerValue();
 107:.\main.c      **** CY_ISR(ToggleModes) {
  71              		.loc 1 107 0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 0
  74              		@ frame_needed = 1, uses_anonymous_args = 0
  75 0000 80B5     		push	{r7, lr}
  76              		.cfi_def_cfa_offset 8
  77              		.cfi_offset 7, -8
  78              		.cfi_offset 14, -4
  79 0002 00AF     		add	r7, sp, #0
  80              		.cfi_def_cfa_register 7
 108:.\main.c      ****     if (currentMode == blink) {
  81              		.loc 1 108 0
  82 0004 084B     		ldr	r3, .L4
  83 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  84 0008 002B     		cmp	r3, #0
  85 000a 06D1     		bne	.L2
 109:.\main.c      ****         currentMode = ramp;
  86              		.loc 1 109 0
  87 000c 064B     		ldr	r3, .L4
  88 000e 0122     		movs	r2, #1
  89 0010 1A70     		strb	r2, [r3]
 110:.\main.c      ****         write_led(on);      //for debugging
  90              		.loc 1 110 0
  91 0012 0120     		movs	r0, #1
  92 0014 FFF7FEFF 		bl	write_led
  93 0018 05E0     		b	.L1
  94              	.L2:
 111:.\main.c      ****     } else {
 112:.\main.c      ****         currentMode = blink;
  95              		.loc 1 112 0
  96 001a 034B     		ldr	r3, .L4
  97 001c 0022     		movs	r2, #0
  98 001e 1A70     		strb	r2, [r3]
 113:.\main.c      ****         write_led(off);     //for debugging
  99              		.loc 1 113 0
 100 0020 0020     		movs	r0, #0
 101 0022 FFF7FEFF 		bl	write_led
 102              	.L1:
 114:.\main.c      ****     }
 115:.\main.c      **** }
 103              		.loc 1 115 0
 104 0026 80BD     		pop	{r7, pc}
 105              	.L5:
 106              		.align	2
 107              	.L4:
 108 0028 00000000 		.word	currentMode
 109              		.cfi_endproc
 110              	.LFE63:
 111              		.size	ToggleModes, .-ToggleModes
 112              		.section	.rodata
 113              		.align	2
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 5


 114              	.LC0:
 115 0000 63757272 		.ascii	"current mode is blink\000"
 115      656E7420 
 115      6D6F6465 
 115      20697320 
 115      626C696E 
 116 0016 0000     		.align	2
 117              	.LC1:
 118 0018 63757272 		.ascii	"current mode is ramp\000"
 118      656E7420 
 118      6D6F6465 
 118      20697320 
 118      72616D70 
 119              		.global	__aeabi_fcmpge
 120              		.global	__aeabi_fcmple
 121              		.global	__aeabi_f2d
 122              		.global	__aeabi_dsub
 123              		.global	__aeabi_d2f
 124              		.global	__aeabi_dadd
 125              		.global	__aeabi_ui2f
 126              		.global	__aeabi_fmul
 127              		.global	__aeabi_f2uiz
 128 002d 000000   		.section	.text.main,"ax",%progbits
 129              		.align	2
 130              		.global	main
 131              		.thumb
 132              		.thumb_func
 133              		.type	main, %function
 134              	main:
 135              	.LFB64:
 116:.\main.c      **** 
 117:.\main.c      **** 
 118:.\main.c      **** 
 119:.\main.c      **** 
 120:.\main.c      **** 
 121:.\main.c      **** 
 122:.\main.c      **** 
 123:.\main.c      **** //TODO:
 124:.\main.c      **** //find out how threading works
 125:.\main.c      **** 
 126:.\main.c      **** int main()
 127:.\main.c      **** {
 136              		.loc 1 127 0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 0
 139              		@ frame_needed = 1, uses_anonymous_args = 0
 140 0000 80B5     		push	{r7, lr}
 141              		.cfi_def_cfa_offset 8
 142              		.cfi_offset 7, -8
 143              		.cfi_offset 14, -4
 144 0002 00AF     		add	r7, sp, #0
 145              		.cfi_def_cfa_register 7
 128:.\main.c      **** 
 129:.\main.c      ****     #if USING_INTERRUPTS
 130:.\main.c      ****         //toggles the led mode by using an interrupt
 131:.\main.c      ****     isr_1_StartEx(ToggleModes);
 132:.\main.c      ****     CYGlobalIntEnable;
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 6


 133:.\main.c      ****     
 134:.\main.c      ****     #endif
 135:.\main.c      ****     
 136:.\main.c      ****     //set default currentMode
 137:.\main.c      ****     currentMode = blink;
 146              		.loc 1 137 0
 147 0004 704B     		ldr	r3, .L24+8
 148 0006 0022     		movs	r2, #0
 149 0008 1A70     		strb	r2, [r3]
 138:.\main.c      ****     previousMode = ramp;
 150              		.loc 1 138 0
 151 000a 704B     		ldr	r3, .L24+12
 152 000c 0122     		movs	r2, #1
 153 000e 1A70     		strb	r2, [r3]
 139:.\main.c      ****     
 140:.\main.c      ****     //start ADC for potentiometer
 141:.\main.c      ****     ADC_SAR_1_Start();
 154              		.loc 1 141 0
 155 0010 FFF7FEFF 		bl	ADC_SAR_1_Start
 156              	.L20:
 142:.\main.c      ****     
 143:.\main.c      ****     //start running our PWM thread
 144:.\main.c      ****     //Software_PWM_Start();           //runs in a separate thread than polling
 145:.\main.c      ****     
 146:.\main.c      ****     
 147:.\main.c      ****     //loop polls button for press if interrupts disabled
 148:.\main.c      ****     //polls potentiometer for values for period of PWM
 149:.\main.c      ****     //only runs if the threading implementation is successful
 150:.\main.c      ****     while (true)
 151:.\main.c      ****     {
 152:.\main.c      ****         //have to poll the button every loop if not using interrupts
 153:.\main.c      ****         #if !(USING_INTERRUPTS)
 154:.\main.c      ****             if(Status_Reg_1_Read() && !debounce_on) { //if the button is pressed
 157              		.loc 1 154 0
 158 0014 FFF7FEFF 		bl	Status_Reg_1_Read
 159 0018 0346     		mov	r3, r0
 160 001a 002B     		cmp	r3, #0
 161 001c 3AD0     		beq	.L7
 162              		.loc 1 154 0 is_stmt 0 discriminator 1
 163 001e 6C4B     		ldr	r3, .L24+16
 164 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 165 0022 83F00103 		eor	r3, r3, #1
 166 0026 DBB2     		uxtb	r3, r3
 167 0028 002B     		cmp	r3, #0
 168 002a 33D0     		beq	.L7
 155:.\main.c      ****                 debounce_on = true;
 169              		.loc 1 155 0 is_stmt 1
 170 002c 684B     		ldr	r3, .L24+16
 171 002e 0122     		movs	r2, #1
 172 0030 1A70     		strb	r2, [r3]
 156:.\main.c      ****                 
 157:.\main.c      ****                 //wait until button is debounced
 158:.\main.c      ****                 CyDelay(DEBOUNCE_TIME);
 173              		.loc 1 158 0
 174 0032 3220     		movs	r0, #50
 175 0034 FFF7FEFF 		bl	CyDelay
 159:.\main.c      ****                 
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 7


 160:.\main.c      ****                 if (Status_Reg_1_Read()) {
 176              		.loc 1 160 0
 177 0038 FFF7FEFF 		bl	Status_Reg_1_Read
 178 003c 0346     		mov	r3, r0
 179 003e 002B     		cmp	r3, #0
 180 0040 24D0     		beq	.L8
 161:.\main.c      ****                     if(currentMode != previousMode) {   //if we are indeed toggling a different val
 181              		.loc 1 161 0
 182 0042 614B     		ldr	r3, .L24+8
 183 0044 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 184 0046 614B     		ldr	r3, .L24+12
 185 0048 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 186 004a 9A42     		cmp	r2, r3
 187 004c 1ED0     		beq	.L8
 162:.\main.c      ****                         if (currentMode == blink) {
 188              		.loc 1 162 0
 189 004e 5E4B     		ldr	r3, .L24+8
 190 0050 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 191 0052 002B     		cmp	r3, #0
 192 0054 09D1     		bne	.L9
 163:.\main.c      ****                             currentMode = ramp;
 193              		.loc 1 163 0
 194 0056 5C4B     		ldr	r3, .L24+8
 195 0058 0122     		movs	r2, #1
 196 005a 1A70     		strb	r2, [r3]
 164:.\main.c      ****                             write_led(on);              //debugging to make sure polling was correc
 197              		.loc 1 164 0
 198 005c 0120     		movs	r0, #1
 199 005e FFF7FEFF 		bl	write_led
 165:.\main.c      ****                             printf("current mode is blink");
 200              		.loc 1 165 0
 201 0062 5C48     		ldr	r0, .L24+20
 202 0064 FFF7FEFF 		bl	printf
 203 0068 0CE0     		b	.L10
 204              	.L9:
 166:.\main.c      ****                         } else if (currentMode == ramp){
 205              		.loc 1 166 0
 206 006a 574B     		ldr	r3, .L24+8
 207 006c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 208 006e 012B     		cmp	r3, #1
 209 0070 08D1     		bne	.L10
 167:.\main.c      ****                             currentMode = blink;
 210              		.loc 1 167 0
 211 0072 554B     		ldr	r3, .L24+8
 212 0074 0022     		movs	r2, #0
 213 0076 1A70     		strb	r2, [r3]
 168:.\main.c      ****                             write_led(off);             //for debugging
 214              		.loc 1 168 0
 215 0078 0020     		movs	r0, #0
 216 007a FFF7FEFF 		bl	write_led
 169:.\main.c      ****                             printf("current mode is ramp");
 217              		.loc 1 169 0
 218 007e 5648     		ldr	r0, .L24+24
 219 0080 FFF7FEFF 		bl	printf
 220              	.L10:
 170:.\main.c      ****                         }
 171:.\main.c      ****                         previousMode = currentMode;
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 8


 221              		.loc 1 171 0
 222 0084 504B     		ldr	r3, .L24+8
 223 0086 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 224 0088 504B     		ldr	r3, .L24+12
 225 008a 1A70     		strb	r2, [r3]
 226              	.L8:
 172:.\main.c      ****                     }
 173:.\main.c      ****                     
 174:.\main.c      ****                     //debounce_on = false;
 175:.\main.c      ****                 }
 176:.\main.c      ****                 
 177:.\main.c      ****                 debounce_on = false;
 227              		.loc 1 177 0
 228 008c 504B     		ldr	r3, .L24+16
 229 008e 0022     		movs	r2, #0
 230 0090 1A70     		strb	r2, [r3]
 231 0092 09E0     		b	.L11
 232              	.L7:
 178:.\main.c      ****             } else {
 179:.\main.c      ****                 previousMode = !currentMode;   //if we're not pushing the button, we changed modes
 233              		.loc 1 179 0
 234 0094 4C4B     		ldr	r3, .L24+8
 235 0096 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 236 0098 002B     		cmp	r3, #0
 237 009a 0CBF     		ite	eq
 238 009c 0123     		moveq	r3, #1
 239 009e 0023     		movne	r3, #0
 240 00a0 DBB2     		uxtb	r3, r3
 241 00a2 1A46     		mov	r2, r3
 242 00a4 494B     		ldr	r3, .L24+12
 243 00a6 1A70     		strb	r2, [r3]
 244              	.L11:
 180:.\main.c      ****             }
 181:.\main.c      ****         #endif    
 182:.\main.c      ****         
 183:.\main.c      ****         
 184:.\main.c      ****         
 185:.\main.c      ****         
 186:.\main.c      ****         
 187:.\main.c      ****         
 188:.\main.c      ****         //if we're blinking, for this loop do a blink PWM cycle
 189:.\main.c      ****             if (currentMode == blink){
 245              		.loc 1 189 0
 246 00a8 474B     		ldr	r3, .L24+8
 247 00aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 248 00ac 002B     		cmp	r3, #0
 249 00ae 0DD1     		bne	.L12
 190:.\main.c      ****                 //sets toggle_light_time_ms to value proportional to pot.
 191:.\main.c      ****                 toggle_light_time_ms = GetPotentiometerValue() / FREQUENCY_RATIO;      //min val=0,
 250              		.loc 1 191 0
 251 00b0 FFF7FEFF 		bl	GetPotentiometerValue
 252 00b4 0346     		mov	r3, r0
 253 00b6 9B08     		lsrs	r3, r3, #2
 254 00b8 9BB2     		uxth	r3, r3
 255 00ba 1A46     		mov	r2, r3
 256 00bc 474B     		ldr	r3, .L24+28
 257 00be 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 9


 192:.\main.c      ****                 PWM_Blink(toggle_light_time_ms);
 258              		.loc 1 192 0
 259 00c0 464B     		ldr	r3, .L24+28
 260 00c2 1B68     		ldr	r3, [r3]
 261 00c4 1846     		mov	r0, r3
 262 00c6 FFF7FEFF 		bl	PWM_Blink
 263 00ca 76E0     		b	.L13
 264              	.L12:
 193:.\main.c      ****             }
 194:.\main.c      ****             else if (currentMode == ramp) {
 265              		.loc 1 194 0
 266 00cc 3E4B     		ldr	r3, .L24+8
 267 00ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 268 00d0 012B     		cmp	r3, #1
 269 00d2 72D1     		bne	.L13
 195:.\main.c      ****                 //calculate current ramp duty_cycle
 196:.\main.c      ****                 //PWM_Blink((float)toggle_light_time_ms / (float) 5);
 197:.\main.c      ****                 
 198:.\main.c      ****                 if (duty_cycle >= 1)    //we have reached full brightness, time to dim
 270              		.loc 1 198 0
 271 00d4 424B     		ldr	r3, .L24+32
 272 00d6 1B68     		ldr	r3, [r3]	@ float
 273 00d8 1846     		mov	r0, r3
 274 00da 4FF07E51 		mov	r1, #1065353216
 275 00de FFF7FEFF 		bl	__aeabi_fcmpge
 276 00e2 0346     		mov	r3, r0
 277 00e4 002B     		cmp	r3, #0
 278 00e6 03D0     		beq	.L23
 199:.\main.c      ****                 {
 200:.\main.c      ****                     dimming = true;
 279              		.loc 1 200 0
 280 00e8 3E4B     		ldr	r3, .L24+36
 281 00ea 0122     		movs	r2, #1
 282 00ec 1A70     		strb	r2, [r3]
 283 00ee 0CE0     		b	.L16
 284              	.L23:
 201:.\main.c      ****                 } else if (duty_cycle <= 0) {
 285              		.loc 1 201 0
 286 00f0 3B4B     		ldr	r3, .L24+32
 287 00f2 1B68     		ldr	r3, [r3]	@ float
 288 00f4 1846     		mov	r0, r3
 289 00f6 4FF00001 		mov	r1, #0
 290 00fa FFF7FEFF 		bl	__aeabi_fcmple
 291 00fe 0346     		mov	r3, r0
 292 0100 002B     		cmp	r3, #0
 293 0102 02D0     		beq	.L16
 202:.\main.c      ****                     dimming = false;
 294              		.loc 1 202 0
 295 0104 374B     		ldr	r3, .L24+36
 296 0106 0022     		movs	r2, #0
 297 0108 1A70     		strb	r2, [r3]
 298              	.L16:
 203:.\main.c      ****                 }
 204:.\main.c      ****                 
 205:.\main.c      ****                 //if we're supposed to dim, lessen the duty cycle
 206:.\main.c      ****                 if (dimming) {
 299              		.loc 1 206 0
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 10


 300 010a 364B     		ldr	r3, .L24+36
 301 010c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 302 010e 002B     		cmp	r3, #0
 303 0110 17D0     		beq	.L18
 207:.\main.c      ****                     duty_cycle -= 1.0 / (float) RAMP_RESOLUTION;   //duty cycle gets decremented by
 304              		.loc 1 207 0
 305 0112 334B     		ldr	r3, .L24+32
 306 0114 1B68     		ldr	r3, [r3]	@ float
 307 0116 1846     		mov	r0, r3
 308 0118 FFF7FEFF 		bl	__aeabi_f2d
 309 011c 0246     		mov	r2, r0
 310 011e 0B46     		mov	r3, r1
 311 0120 1046     		mov	r0, r2
 312 0122 1946     		mov	r1, r3
 313 0124 26A3     		adr	r3, .L24
 314 0126 D3E90023 		ldrd	r2, [r3]
 315 012a FFF7FEFF 		bl	__aeabi_dsub
 316 012e 0246     		mov	r2, r0
 317 0130 0B46     		mov	r3, r1
 318 0132 1046     		mov	r0, r2
 319 0134 1946     		mov	r1, r3
 320 0136 FFF7FEFF 		bl	__aeabi_d2f
 321 013a 0246     		mov	r2, r0
 322 013c 284B     		ldr	r3, .L24+32
 323 013e 1A60     		str	r2, [r3]	@ float
 324 0140 16E0     		b	.L19
 325              	.L18:
 208:.\main.c      ****                 } else {
 209:.\main.c      ****                     duty_cycle +=  1.0 / (float) RAMP_RESOLUTION;   //duty cycle is incremented by 
 326              		.loc 1 209 0
 327 0142 274B     		ldr	r3, .L24+32
 328 0144 1B68     		ldr	r3, [r3]	@ float
 329 0146 1846     		mov	r0, r3
 330 0148 FFF7FEFF 		bl	__aeabi_f2d
 331 014c 0246     		mov	r2, r0
 332 014e 0B46     		mov	r3, r1
 333 0150 1046     		mov	r0, r2
 334 0152 1946     		mov	r1, r3
 335 0154 1AA3     		adr	r3, .L24
 336 0156 D3E90023 		ldrd	r2, [r3]
 337 015a FFF7FEFF 		bl	__aeabi_dadd
 338 015e 0246     		mov	r2, r0
 339 0160 0B46     		mov	r3, r1
 340 0162 1046     		mov	r0, r2
 341 0164 1946     		mov	r1, r3
 342 0166 FFF7FEFF 		bl	__aeabi_d2f
 343 016a 0246     		mov	r2, r0
 344 016c 1C4B     		ldr	r3, .L24+32
 345 016e 1A60     		str	r2, [r3]	@ float
 346              	.L19:
 210:.\main.c      ****                 }
 211:.\main.c      ****                 
 212:.\main.c      ****                 total_time_ms = (1.0 / (float) HUMAN_EYE_FPS) * 1000;       //could be a constant i
 347              		.loc 1 212 0
 348 0170 1D4B     		ldr	r3, .L24+40
 349 0172 1022     		movs	r2, #16
 350 0174 1A60     		str	r2, [r3]
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 11


 213:.\main.c      ****                 on_time_ms = duty_cycle * total_time_ms;
 351              		.loc 1 213 0
 352 0176 1C4B     		ldr	r3, .L24+40
 353 0178 1B68     		ldr	r3, [r3]
 354 017a 1846     		mov	r0, r3
 355 017c FFF7FEFF 		bl	__aeabi_ui2f
 356 0180 0246     		mov	r2, r0
 357 0182 174B     		ldr	r3, .L24+32
 358 0184 1B68     		ldr	r3, [r3]	@ float
 359 0186 1046     		mov	r0, r2
 360 0188 1946     		mov	r1, r3
 361 018a FFF7FEFF 		bl	__aeabi_fmul
 362 018e 0346     		mov	r3, r0
 363 0190 1846     		mov	r0, r3
 364 0192 FFF7FEFF 		bl	__aeabi_f2uiz
 365 0196 0246     		mov	r2, r0
 366 0198 144B     		ldr	r3, .L24+44
 367 019a 1A60     		str	r2, [r3]
 214:.\main.c      ****                 off_time_ms = total_time_ms - on_time_ms;
 368              		.loc 1 214 0
 369 019c 124B     		ldr	r3, .L24+40
 370 019e 1A68     		ldr	r2, [r3]
 371 01a0 124B     		ldr	r3, .L24+44
 372 01a2 1B68     		ldr	r3, [r3]
 373 01a4 D31A     		subs	r3, r2, r3
 374 01a6 124A     		ldr	r2, .L24+48
 375 01a8 1360     		str	r3, [r2]
 215:.\main.c      ****                 
 216:.\main.c      ****                 PWM_Ramp(on_time_ms, off_time_ms);
 376              		.loc 1 216 0
 377 01aa 104B     		ldr	r3, .L24+44
 378 01ac 1A68     		ldr	r2, [r3]
 379 01ae 104B     		ldr	r3, .L24+48
 380 01b0 1B68     		ldr	r3, [r3]
 381 01b2 1046     		mov	r0, r2
 382 01b4 1946     		mov	r1, r3
 383 01b6 FFF7FEFF 		bl	PWM_Ramp
 384              	.L13:
 217:.\main.c      ****             }
 218:.\main.c      ****             
 219:.\main.c      ****             
 220:.\main.c      ****             
 221:.\main.c      ****     }
 385              		.loc 1 221 0
 386 01ba 2BE7     		b	.L20
 387              	.L25:
 388 01bc AFF30080 		.align	3
 389              	.L24:
 390 01c0 7B14AE47 		.word	1202590843
 391 01c4 E17A943F 		.word	1066695393
 392 01c8 00000000 		.word	currentMode
 393 01cc 00000000 		.word	previousMode
 394 01d0 00000000 		.word	debounce_on
 395 01d4 00000000 		.word	.LC0
 396 01d8 18000000 		.word	.LC1
 397 01dc 00000000 		.word	toggle_light_time_ms
 398 01e0 00000000 		.word	duty_cycle
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 12


 399 01e4 00000000 		.word	dimming
 400 01e8 00000000 		.word	total_time_ms
 401 01ec 00000000 		.word	on_time_ms
 402 01f0 00000000 		.word	off_time_ms
 403              		.cfi_endproc
 404              	.LFE64:
 405              		.size	main, .-main
 406              		.section	.text.GetPotentiometerValue,"ax",%progbits
 407              		.align	2
 408              		.global	GetPotentiometerValue
 409              		.thumb
 410              		.thumb_func
 411              		.type	GetPotentiometerValue, %function
 412              	GetPotentiometerValue:
 413              	.LFB65:
 222:.\main.c      ****     
 223:.\main.c      ****     return 0;
 224:.\main.c      **** }
 225:.\main.c      **** 
 226:.\main.c      **** //returns the value from potentiometer
 227:.\main.c      **** uint16_t GetPotentiometerValue() {
 414              		.loc 1 227 0
 415              		.cfi_startproc
 416              		@ args = 0, pretend = 0, frame = 8
 417              		@ frame_needed = 1, uses_anonymous_args = 0
 418 0000 80B5     		push	{r7, lr}
 419              		.cfi_def_cfa_offset 8
 420              		.cfi_offset 7, -8
 421              		.cfi_offset 14, -4
 422 0002 82B0     		sub	sp, sp, #8
 423              		.cfi_def_cfa_offset 16
 424 0004 00AF     		add	r7, sp, #0
 425              		.cfi_def_cfa_register 7
 228:.\main.c      ****     //poll potentiometer
 229:.\main.c      ****         ADC_SAR_1_StartConvert(); 
 426              		.loc 1 229 0
 427 0006 FFF7FEFF 		bl	ADC_SAR_1_StartConvert
 230:.\main.c      ****         ADC_SAR_1_IsEndConversion(ADC_SAR_1_WAIT_FOR_RESULT);   //blocks until conversion complete
 428              		.loc 1 230 0
 429 000a 0020     		movs	r0, #0
 430 000c FFF7FEFF 		bl	ADC_SAR_1_IsEndConversion
 231:.\main.c      ****         
 232:.\main.c      ****         uint16_t result = ADC_SAR_1_GetResult16();
 431              		.loc 1 232 0
 432 0010 FFF7FEFF 		bl	ADC_SAR_1_GetResult16
 433 0014 0346     		mov	r3, r0
 434 0016 FB80     		strh	r3, [r7, #6]	@ movhi
 233:.\main.c      ****         
 234:.\main.c      ****         return result;
 435              		.loc 1 234 0
 436 0018 FB88     		ldrh	r3, [r7, #6]
 235:.\main.c      **** }
 437              		.loc 1 235 0
 438 001a 1846     		mov	r0, r3
 439 001c 0837     		adds	r7, r7, #8
 440              		.cfi_def_cfa_offset 8
 441 001e BD46     		mov	sp, r7
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 13


 442              		.cfi_def_cfa_register 13
 443              		@ sp needed
 444 0020 80BD     		pop	{r7, pc}
 445              		.cfi_endproc
 446              	.LFE65:
 447              		.size	GetPotentiometerValue, .-GetPotentiometerValue
 448 0022 00BF     		.section	.text.write_led,"ax",%progbits
 449              		.align	2
 450              		.global	write_led
 451              		.thumb
 452              		.thumb_func
 453              		.type	write_led, %function
 454              	write_led:
 455              	.LFB66:
 236:.\main.c      **** 
 237:.\main.c      **** //shorthand for writing to control register
 238:.\main.c      **** void write_led(int value) {
 456              		.loc 1 238 0
 457              		.cfi_startproc
 458              		@ args = 0, pretend = 0, frame = 8
 459              		@ frame_needed = 1, uses_anonymous_args = 0
 460 0000 80B5     		push	{r7, lr}
 461              		.cfi_def_cfa_offset 8
 462              		.cfi_offset 7, -8
 463              		.cfi_offset 14, -4
 464 0002 82B0     		sub	sp, sp, #8
 465              		.cfi_def_cfa_offset 16
 466 0004 00AF     		add	r7, sp, #0
 467              		.cfi_def_cfa_register 7
 468 0006 7860     		str	r0, [r7, #4]
 239:.\main.c      ****     Control_Reg_1_Write(value);   
 469              		.loc 1 239 0
 470 0008 7B68     		ldr	r3, [r7, #4]
 471 000a DBB2     		uxtb	r3, r3
 472 000c 1846     		mov	r0, r3
 473 000e FFF7FEFF 		bl	Control_Reg_1_Write
 240:.\main.c      **** }
 474              		.loc 1 240 0
 475 0012 0837     		adds	r7, r7, #8
 476              		.cfi_def_cfa_offset 8
 477 0014 BD46     		mov	sp, r7
 478              		.cfi_def_cfa_register 13
 479              		@ sp needed
 480 0016 80BD     		pop	{r7, pc}
 481              		.cfi_endproc
 482              	.LFE66:
 483              		.size	write_led, .-write_led
 484              		.section	.text.Software_PWM_Start,"ax",%progbits
 485              		.align	2
 486              		.global	Software_PWM_Start
 487              		.thumb
 488              		.thumb_func
 489              		.type	Software_PWM_Start, %function
 490              	Software_PWM_Start:
 491              	.LFB67:
 241:.\main.c      **** 
 242:.\main.c      **** //software PWM function runs in a separate thread.  
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 14


 243:.\main.c      **** //runs calculations for PWM parameters, then calls PWM_Blink for timing
 244:.\main.c      **** void Software_PWM_Start() {
 492              		.loc 1 244 0
 493              		.cfi_startproc
 494              		@ args = 0, pretend = 0, frame = 8
 495              		@ frame_needed = 1, uses_anonymous_args = 0
 496 0000 80B5     		push	{r7, lr}
 497              		.cfi_def_cfa_offset 8
 498              		.cfi_offset 7, -8
 499              		.cfi_offset 14, -4
 500 0002 82B0     		sub	sp, sp, #8
 501              		.cfi_def_cfa_offset 16
 502 0004 00AF     		add	r7, sp, #0
 503              		.cfi_def_cfa_register 7
 245:.\main.c      ****     pid_t pid = fork();
 504              		.loc 1 245 0
 505 0006 FFF7FEFF 		bl	fork
 506 000a 0346     		mov	r3, r0
 507 000c 7B60     		str	r3, [r7, #4]
 246:.\main.c      ****     int errsv = errno;      //save the error code, errno is volatile
 508              		.loc 1 246 0
 509 000e FFF7FEFF 		bl	__errno
 510 0012 0346     		mov	r3, r0
 511 0014 1B68     		ldr	r3, [r3]
 512 0016 3B60     		str	r3, [r7]
 247:.\main.c      ****     
 248:.\main.c      ****     /*
 249:.\main.c      ****     if (pid < 0) {      //fork errored out, try to debug later with proper threading techniques
 250:.\main.c      ****         return;
 251:.\main.c      ****     } 
 252:.\main.c      ****     */
 253:.\main.c      ****     
 254:.\main.c      ****     if (pid > 0) {  //parent process returns to main loop
 513              		.loc 1 254 0
 514 0018 7B68     		ldr	r3, [r7, #4]
 515 001a 002B     		cmp	r3, #0
 516 001c 00DD     		ble	.L30
 255:.\main.c      ****         return;   
 517              		.loc 1 255 0
 518 001e 89E0     		b	.L42
 519              	.L30:
 256:.\main.c      ****     } else {
 257:.\main.c      ****         while(true) {  //child process continues forever blinking leds
 258:.\main.c      ****             
 259:.\main.c      ****             //if we're blinking, for this loop do a blink PWM cycle
 260:.\main.c      ****             if (currentMode == blink){
 520              		.loc 1 260 0
 521 0020 494B     		ldr	r3, .L44+8
 522 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 523 0024 002B     		cmp	r3, #0
 524 0026 0DD1     		bne	.L32
 261:.\main.c      ****                 //sets toggle_light_time_ms to value proportional to pot.
 262:.\main.c      ****                 toggle_light_time_ms = GetPotentiometerValue() / 4;      //min val=0, max val= 1sec
 525              		.loc 1 262 0
 526 0028 FFF7FEFF 		bl	GetPotentiometerValue
 527 002c 0346     		mov	r3, r0
 528 002e 9B08     		lsrs	r3, r3, #2
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 15


 529 0030 9BB2     		uxth	r3, r3
 530 0032 1A46     		mov	r2, r3
 531 0034 454B     		ldr	r3, .L44+12
 532 0036 1A60     		str	r2, [r3]
 263:.\main.c      ****                 PWM_Blink(toggle_light_time_ms);
 533              		.loc 1 263 0
 534 0038 444B     		ldr	r3, .L44+12
 535 003a 1B68     		ldr	r3, [r3]
 536 003c 1846     		mov	r0, r3
 537 003e FFF7FEFF 		bl	PWM_Blink
 538 0042 76E0     		b	.L33
 539              	.L32:
 264:.\main.c      ****             }
 265:.\main.c      ****             else if (currentMode == ramp) {
 540              		.loc 1 265 0
 541 0044 404B     		ldr	r3, .L44+8
 542 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 543 0048 012B     		cmp	r3, #1
 544 004a 72D1     		bne	.L33
 266:.\main.c      ****                 //calculate current ramp duty_cycle
 267:.\main.c      ****                 //PWM_Blink((float)toggle_light_time_ms / (float) 5);
 268:.\main.c      ****                 
 269:.\main.c      ****                 if (duty_cycle >= 1)    //we have reached full brightness, time to dim
 545              		.loc 1 269 0
 546 004c 404B     		ldr	r3, .L44+16
 547 004e 1B68     		ldr	r3, [r3]	@ float
 548 0050 1846     		mov	r0, r3
 549 0052 4FF07E51 		mov	r1, #1065353216
 550 0056 FFF7FEFF 		bl	__aeabi_fcmpge
 551 005a 0346     		mov	r3, r0
 552 005c 002B     		cmp	r3, #0
 553 005e 03D0     		beq	.L43
 270:.\main.c      ****                 {
 271:.\main.c      ****                     dimming = true;
 554              		.loc 1 271 0
 555 0060 3C4B     		ldr	r3, .L44+20
 556 0062 0122     		movs	r2, #1
 557 0064 1A70     		strb	r2, [r3]
 558 0066 0CE0     		b	.L36
 559              	.L43:
 272:.\main.c      ****                 } else if (duty_cycle <= 0) {
 560              		.loc 1 272 0
 561 0068 394B     		ldr	r3, .L44+16
 562 006a 1B68     		ldr	r3, [r3]	@ float
 563 006c 1846     		mov	r0, r3
 564 006e 4FF00001 		mov	r1, #0
 565 0072 FFF7FEFF 		bl	__aeabi_fcmple
 566 0076 0346     		mov	r3, r0
 567 0078 002B     		cmp	r3, #0
 568 007a 02D0     		beq	.L36
 273:.\main.c      ****                     dimming = false;
 569              		.loc 1 273 0
 570 007c 354B     		ldr	r3, .L44+20
 571 007e 0022     		movs	r2, #0
 572 0080 1A70     		strb	r2, [r3]
 573              	.L36:
 274:.\main.c      ****                 }
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 16


 275:.\main.c      ****                 
 276:.\main.c      ****                 //if we're supposed to dim, lessen the duty cycle
 277:.\main.c      ****                 if (dimming) {
 574              		.loc 1 277 0
 575 0082 344B     		ldr	r3, .L44+20
 576 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 577 0086 002B     		cmp	r3, #0
 578 0088 17D0     		beq	.L38
 278:.\main.c      ****                     duty_cycle -= 1.0 / (float) RAMP_RESOLUTION;   //duty cycle gets decremented by
 579              		.loc 1 278 0
 580 008a 314B     		ldr	r3, .L44+16
 581 008c 1B68     		ldr	r3, [r3]	@ float
 582 008e 1846     		mov	r0, r3
 583 0090 FFF7FEFF 		bl	__aeabi_f2d
 584 0094 0246     		mov	r2, r0
 585 0096 0B46     		mov	r3, r1
 586 0098 1046     		mov	r0, r2
 587 009a 1946     		mov	r1, r3
 588 009c 28A3     		adr	r3, .L44
 589 009e D3E90023 		ldrd	r2, [r3]
 590 00a2 FFF7FEFF 		bl	__aeabi_dsub
 591 00a6 0246     		mov	r2, r0
 592 00a8 0B46     		mov	r3, r1
 593 00aa 1046     		mov	r0, r2
 594 00ac 1946     		mov	r1, r3
 595 00ae FFF7FEFF 		bl	__aeabi_d2f
 596 00b2 0246     		mov	r2, r0
 597 00b4 264B     		ldr	r3, .L44+16
 598 00b6 1A60     		str	r2, [r3]	@ float
 599 00b8 16E0     		b	.L39
 600              	.L38:
 279:.\main.c      ****                 } else {
 280:.\main.c      ****                     duty_cycle +=  1.0 / (float) RAMP_RESOLUTION;   //duty cycle is incremented by 
 601              		.loc 1 280 0
 602 00ba 254B     		ldr	r3, .L44+16
 603 00bc 1B68     		ldr	r3, [r3]	@ float
 604 00be 1846     		mov	r0, r3
 605 00c0 FFF7FEFF 		bl	__aeabi_f2d
 606 00c4 0246     		mov	r2, r0
 607 00c6 0B46     		mov	r3, r1
 608 00c8 1046     		mov	r0, r2
 609 00ca 1946     		mov	r1, r3
 610 00cc 1CA3     		adr	r3, .L44
 611 00ce D3E90023 		ldrd	r2, [r3]
 612 00d2 FFF7FEFF 		bl	__aeabi_dadd
 613 00d6 0246     		mov	r2, r0
 614 00d8 0B46     		mov	r3, r1
 615 00da 1046     		mov	r0, r2
 616 00dc 1946     		mov	r1, r3
 617 00de FFF7FEFF 		bl	__aeabi_d2f
 618 00e2 0246     		mov	r2, r0
 619 00e4 1A4B     		ldr	r3, .L44+16
 620 00e6 1A60     		str	r2, [r3]	@ float
 621              	.L39:
 281:.\main.c      ****                 }
 282:.\main.c      ****                 
 283:.\main.c      ****                 total_time_ms = (1.0 / (float) HUMAN_EYE_FPS) * 1000;       //could be a constant i
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 17


 622              		.loc 1 283 0
 623 00e8 1B4B     		ldr	r3, .L44+24
 624 00ea 1022     		movs	r2, #16
 625 00ec 1A60     		str	r2, [r3]
 284:.\main.c      ****                 on_time_ms = duty_cycle * total_time_ms;
 626              		.loc 1 284 0
 627 00ee 1A4B     		ldr	r3, .L44+24
 628 00f0 1B68     		ldr	r3, [r3]
 629 00f2 1846     		mov	r0, r3
 630 00f4 FFF7FEFF 		bl	__aeabi_ui2f
 631 00f8 0246     		mov	r2, r0
 632 00fa 154B     		ldr	r3, .L44+16
 633 00fc 1B68     		ldr	r3, [r3]	@ float
 634 00fe 1046     		mov	r0, r2
 635 0100 1946     		mov	r1, r3
 636 0102 FFF7FEFF 		bl	__aeabi_fmul
 637 0106 0346     		mov	r3, r0
 638 0108 1846     		mov	r0, r3
 639 010a FFF7FEFF 		bl	__aeabi_f2uiz
 640 010e 0246     		mov	r2, r0
 641 0110 124B     		ldr	r3, .L44+28
 642 0112 1A60     		str	r2, [r3]
 285:.\main.c      ****                 off_time_ms = total_time_ms - on_time_ms;
 643              		.loc 1 285 0
 644 0114 104B     		ldr	r3, .L44+24
 645 0116 1A68     		ldr	r2, [r3]
 646 0118 104B     		ldr	r3, .L44+28
 647 011a 1B68     		ldr	r3, [r3]
 648 011c D31A     		subs	r3, r2, r3
 649 011e 104A     		ldr	r2, .L44+32
 650 0120 1360     		str	r3, [r2]
 286:.\main.c      ****                 
 287:.\main.c      ****                 PWM_Ramp(on_time_ms, off_time_ms);
 651              		.loc 1 287 0
 652 0122 0E4B     		ldr	r3, .L44+28
 653 0124 1A68     		ldr	r2, [r3]
 654 0126 0E4B     		ldr	r3, .L44+32
 655 0128 1B68     		ldr	r3, [r3]
 656 012a 1046     		mov	r0, r2
 657 012c 1946     		mov	r1, r3
 658 012e FFF7FEFF 		bl	PWM_Ramp
 659              	.L33:
 288:.\main.c      ****                 
 289:.\main.c      ****             }
 290:.\main.c      ****         }
 660              		.loc 1 290 0
 661 0132 75E7     		b	.L30
 662              	.L42:
 291:.\main.c      ****     }
 292:.\main.c      **** }
 663              		.loc 1 292 0
 664 0134 0837     		adds	r7, r7, #8
 665              		.cfi_def_cfa_offset 8
 666 0136 BD46     		mov	sp, r7
 667              		.cfi_def_cfa_register 13
 668              		@ sp needed
 669 0138 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 18


 670              	.L45:
 671 013a 00BFAFF3 		.align	3
 671      0080
 672              	.L44:
 673 0140 7B14AE47 		.word	1202590843
 674 0144 E17A943F 		.word	1066695393
 675 0148 00000000 		.word	currentMode
 676 014c 00000000 		.word	toggle_light_time_ms
 677 0150 00000000 		.word	duty_cycle
 678 0154 00000000 		.word	dimming
 679 0158 00000000 		.word	total_time_ms
 680 015c 00000000 		.word	on_time_ms
 681 0160 00000000 		.word	off_time_ms
 682              		.cfi_endproc
 683              	.LFE67:
 684              		.size	Software_PWM_Start, .-Software_PWM_Start
 685              		.section	.text.PWM_Blink,"ax",%progbits
 686              		.align	2
 687              		.global	PWM_Blink
 688              		.thumb
 689              		.thumb_func
 690              		.type	PWM_Blink, %function
 691              	PWM_Blink:
 692              	.LFB68:
 293:.\main.c      **** 
 294:.\main.c      **** //shorthand to wait for timing
 295:.\main.c      **** //evenly blinks LED with equal on/off times
 296:.\main.c      **** void PWM_Blink(uint32 halfPeriod) {
 693              		.loc 1 296 0
 694              		.cfi_startproc
 695              		@ args = 0, pretend = 0, frame = 8
 696              		@ frame_needed = 1, uses_anonymous_args = 0
 697 0000 80B5     		push	{r7, lr}
 698              		.cfi_def_cfa_offset 8
 699              		.cfi_offset 7, -8
 700              		.cfi_offset 14, -4
 701 0002 82B0     		sub	sp, sp, #8
 702              		.cfi_def_cfa_offset 16
 703 0004 00AF     		add	r7, sp, #0
 704              		.cfi_def_cfa_register 7
 705 0006 7860     		str	r0, [r7, #4]
 297:.\main.c      ****     write_led(on);
 706              		.loc 1 297 0
 707 0008 0120     		movs	r0, #1
 708 000a FFF7FEFF 		bl	write_led
 298:.\main.c      ****     CyDelay(halfPeriod);
 709              		.loc 1 298 0
 710 000e 7868     		ldr	r0, [r7, #4]
 711 0010 FFF7FEFF 		bl	CyDelay
 299:.\main.c      ****     write_led(off);
 712              		.loc 1 299 0
 713 0014 0020     		movs	r0, #0
 714 0016 FFF7FEFF 		bl	write_led
 300:.\main.c      ****     CyDelay(halfPeriod); 
 715              		.loc 1 300 0
 716 001a 7868     		ldr	r0, [r7, #4]
 717 001c FFF7FEFF 		bl	CyDelay
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 19


 301:.\main.c      **** }
 718              		.loc 1 301 0
 719 0020 0837     		adds	r7, r7, #8
 720              		.cfi_def_cfa_offset 8
 721 0022 BD46     		mov	sp, r7
 722              		.cfi_def_cfa_register 13
 723              		@ sp needed
 724 0024 80BD     		pop	{r7, pc}
 725              		.cfi_endproc
 726              	.LFE68:
 727              		.size	PWM_Blink, .-PWM_Blink
 728 0026 00BF     		.section	.text.PWM_Ramp,"ax",%progbits
 729              		.align	2
 730              		.global	PWM_Ramp
 731              		.thumb
 732              		.thumb_func
 733              		.type	PWM_Ramp, %function
 734              	PWM_Ramp:
 735              	.LFB69:
 302:.\main.c      **** 
 303:.\main.c      **** //used for different duty cycle
 304:.\main.c      **** void PWM_Ramp(uint32 on_time, uint32 off_time) {
 736              		.loc 1 304 0
 737              		.cfi_startproc
 738              		@ args = 0, pretend = 0, frame = 8
 739              		@ frame_needed = 1, uses_anonymous_args = 0
 740 0000 80B5     		push	{r7, lr}
 741              		.cfi_def_cfa_offset 8
 742              		.cfi_offset 7, -8
 743              		.cfi_offset 14, -4
 744 0002 82B0     		sub	sp, sp, #8
 745              		.cfi_def_cfa_offset 16
 746 0004 00AF     		add	r7, sp, #0
 747              		.cfi_def_cfa_register 7
 748 0006 7860     		str	r0, [r7, #4]
 749 0008 3960     		str	r1, [r7]
 305:.\main.c      ****     write_led(on);
 750              		.loc 1 305 0
 751 000a 0120     		movs	r0, #1
 752 000c FFF7FEFF 		bl	write_led
 306:.\main.c      ****     CyDelay(on_time);
 753              		.loc 1 306 0
 754 0010 7868     		ldr	r0, [r7, #4]
 755 0012 FFF7FEFF 		bl	CyDelay
 307:.\main.c      ****     write_led(off);
 756              		.loc 1 307 0
 757 0016 0020     		movs	r0, #0
 758 0018 FFF7FEFF 		bl	write_led
 308:.\main.c      ****     CyDelay(off_time); 
 759              		.loc 1 308 0
 760 001c 3868     		ldr	r0, [r7]
 761 001e FFF7FEFF 		bl	CyDelay
 309:.\main.c      **** }
 762              		.loc 1 309 0
 763 0022 0837     		adds	r7, r7, #8
 764              		.cfi_def_cfa_offset 8
 765 0024 BD46     		mov	sp, r7
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 20


 766              		.cfi_def_cfa_register 13
 767              		@ sp needed
 768 0026 80BD     		pop	{r7, pc}
 769              		.cfi_endproc
 770              	.LFE69:
 771              		.size	PWM_Ramp, .-PWM_Ramp
 772              		.text
 773              	.Letext0:
 774              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 775              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 776              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 777              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 778              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 779              		.section	.debug_info,"",%progbits
 780              	.Ldebug_info0:
 781 0000 90020000 		.4byte	0x290
 782 0004 0400     		.2byte	0x4
 783 0006 00000000 		.4byte	.Ldebug_abbrev0
 784 000a 04       		.byte	0x4
 785 000b 01       		.uleb128 0x1
 786 000c 47000000 		.4byte	.LASF44
 787 0010 01       		.byte	0x1
 788 0011 3F010000 		.4byte	.LASF45
 789 0015 EA000000 		.4byte	.LASF46
 790 0019 00000000 		.4byte	.Ldebug_ranges0+0
 791 001d 00000000 		.4byte	0
 792 0021 00000000 		.4byte	.Ldebug_line0
 793 0025 02       		.uleb128 0x2
 794 0026 01       		.byte	0x1
 795 0027 06       		.byte	0x6
 796 0028 9C020000 		.4byte	.LASF0
 797 002c 02       		.uleb128 0x2
 798 002d 01       		.byte	0x1
 799 002e 08       		.byte	0x8
 800 002f 8C010000 		.4byte	.LASF1
 801 0033 02       		.uleb128 0x2
 802 0034 02       		.byte	0x2
 803 0035 05       		.byte	0x5
 804 0036 5E020000 		.4byte	.LASF2
 805 003a 03       		.uleb128 0x3
 806 003b 9A010000 		.4byte	.LASF4
 807 003f 02       		.byte	0x2
 808 0040 2B       		.byte	0x2b
 809 0041 45000000 		.4byte	0x45
 810 0045 02       		.uleb128 0x2
 811 0046 02       		.byte	0x2
 812 0047 07       		.byte	0x7
 813 0048 A8020000 		.4byte	.LASF3
 814 004c 03       		.uleb128 0x3
 815 004d 34000000 		.4byte	.LASF5
 816 0051 02       		.byte	0x2
 817 0052 3F       		.byte	0x3f
 818 0053 57000000 		.4byte	0x57
 819 0057 02       		.uleb128 0x2
 820 0058 04       		.byte	0x4
 821 0059 05       		.byte	0x5
 822 005a 3E000000 		.4byte	.LASF6
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 21


 823 005e 02       		.uleb128 0x2
 824 005f 04       		.byte	0x4
 825 0060 07       		.byte	0x7
 826 0061 48010000 		.4byte	.LASF7
 827 0065 02       		.uleb128 0x2
 828 0066 08       		.byte	0x8
 829 0067 05       		.byte	0x5
 830 0068 00000000 		.4byte	.LASF8
 831 006c 02       		.uleb128 0x2
 832 006d 08       		.byte	0x8
 833 006e 07       		.byte	0x7
 834 006f FD010000 		.4byte	.LASF9
 835 0073 04       		.uleb128 0x4
 836 0074 04       		.byte	0x4
 837 0075 05       		.byte	0x5
 838 0076 696E7400 		.ascii	"int\000"
 839 007a 02       		.uleb128 0x2
 840 007b 04       		.byte	0x4
 841 007c 07       		.byte	0x7
 842 007d F0010000 		.4byte	.LASF10
 843 0081 03       		.uleb128 0x3
 844 0082 73020000 		.4byte	.LASF11
 845 0086 03       		.byte	0x3
 846 0087 21       		.byte	0x21
 847 0088 3A000000 		.4byte	0x3a
 848 008c 03       		.uleb128 0x3
 849 008d 32020000 		.4byte	.LASF12
 850 0091 03       		.byte	0x3
 851 0092 2C       		.byte	0x2c
 852 0093 4C000000 		.4byte	0x4c
 853 0097 05       		.uleb128 0x5
 854 0098 D6010000 		.4byte	.LASF13
 855 009c 04       		.byte	0x4
 856 009d 9401     		.2byte	0x194
 857 009f 5E000000 		.4byte	0x5e
 858 00a3 02       		.uleb128 0x2
 859 00a4 04       		.byte	0x4
 860 00a5 04       		.byte	0x4
 861 00a6 24010000 		.4byte	.LASF14
 862 00aa 02       		.uleb128 0x2
 863 00ab 08       		.byte	0x8
 864 00ac 04       		.byte	0x4
 865 00ad DD000000 		.4byte	.LASF15
 866 00b1 02       		.uleb128 0x2
 867 00b2 01       		.byte	0x1
 868 00b3 08       		.byte	0x8
 869 00b4 59020000 		.4byte	.LASF16
 870 00b8 02       		.uleb128 0x2
 871 00b9 04       		.byte	0x4
 872 00ba 07       		.byte	0x7
 873 00bb 3A020000 		.4byte	.LASF17
 874 00bf 03       		.uleb128 0x3
 875 00c0 E4000000 		.4byte	.LASF18
 876 00c4 05       		.byte	0x5
 877 00c5 C1       		.byte	0xc1
 878 00c6 73000000 		.4byte	0x73
 879 00ca 06       		.uleb128 0x6
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 22


 880 00cb 1B020000 		.4byte	.LASF47
 881 00cf 01       		.byte	0x1
 882 00d0 01       		.byte	0x1
 883 00d1 60       		.byte	0x60
 884 00d2 E3000000 		.4byte	0xe3
 885 00d6 07       		.uleb128 0x7
 886 00d7 66010000 		.4byte	.LASF19
 887 00db 00       		.sleb128 0
 888 00dc 07       		.uleb128 0x7
 889 00dd 23020000 		.4byte	.LASF20
 890 00e1 01       		.sleb128 1
 891 00e2 00       		.byte	0
 892 00e3 08       		.uleb128 0x8
 893 00e4 90020000 		.4byte	.LASF21
 894 00e8 01       		.byte	0x1
 895 00e9 6B       		.byte	0x6b
 896 00ea 00000000 		.4byte	.LFB63
 897 00ee 2C000000 		.4byte	.LFE63-.LFB63
 898 00f2 01       		.uleb128 0x1
 899 00f3 9C       		.byte	0x9c
 900 00f4 09       		.uleb128 0x9
 901 00f5 B1010000 		.4byte	.LASF22
 902 00f9 01       		.byte	0x1
 903 00fa 7E       		.byte	0x7e
 904 00fb 73000000 		.4byte	0x73
 905 00ff 00000000 		.4byte	.LFB64
 906 0103 F4010000 		.4byte	.LFE64-.LFB64
 907 0107 01       		.uleb128 0x1
 908 0108 9C       		.byte	0x9c
 909 0109 0A       		.uleb128 0xa
 910 010a B6010000 		.4byte	.LASF23
 911 010e 01       		.byte	0x1
 912 010f E3       		.byte	0xe3
 913 0110 81000000 		.4byte	0x81
 914 0114 00000000 		.4byte	.LFB65
 915 0118 22000000 		.4byte	.LFE65-.LFB65
 916 011c 01       		.uleb128 0x1
 917 011d 9C       		.byte	0x9c
 918 011e 31010000 		.4byte	0x131
 919 0122 0B       		.uleb128 0xb
 920 0123 14020000 		.4byte	.LASF25
 921 0127 01       		.byte	0x1
 922 0128 E8       		.byte	0xe8
 923 0129 81000000 		.4byte	0x81
 924 012d 02       		.uleb128 0x2
 925 012e 91       		.byte	0x91
 926 012f 76       		.sleb128 -10
 927 0130 00       		.byte	0
 928 0131 0C       		.uleb128 0xc
 929 0132 CC010000 		.4byte	.LASF24
 930 0136 01       		.byte	0x1
 931 0137 EE       		.byte	0xee
 932 0138 00000000 		.4byte	.LFB66
 933 013c 18000000 		.4byte	.LFE66-.LFB66
 934 0140 01       		.uleb128 0x1
 935 0141 9C       		.byte	0x9c
 936 0142 55010000 		.4byte	0x155
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 23


 937 0146 0D       		.uleb128 0xd
 938 0147 2E000000 		.4byte	.LASF28
 939 014b 01       		.byte	0x1
 940 014c EE       		.byte	0xee
 941 014d 73000000 		.4byte	0x73
 942 0151 02       		.uleb128 0x2
 943 0152 91       		.byte	0x91
 944 0153 74       		.sleb128 -12
 945 0154 00       		.byte	0
 946 0155 0E       		.uleb128 0xe
 947 0156 79010000 		.4byte	.LASF48
 948 015a 01       		.byte	0x1
 949 015b F4       		.byte	0xf4
 950 015c 00000000 		.4byte	.LFB67
 951 0160 64010000 		.4byte	.LFE67-.LFB67
 952 0164 01       		.uleb128 0x1
 953 0165 9C       		.byte	0x9c
 954 0166 87010000 		.4byte	0x187
 955 016a 0F       		.uleb128 0xf
 956 016b 70696400 		.ascii	"pid\000"
 957 016f 01       		.byte	0x1
 958 0170 F5       		.byte	0xf5
 959 0171 BF000000 		.4byte	0xbf
 960 0175 02       		.uleb128 0x2
 961 0176 91       		.byte	0x91
 962 0177 74       		.sleb128 -12
 963 0178 0B       		.uleb128 0xb
 964 0179 8A020000 		.4byte	.LASF26
 965 017d 01       		.byte	0x1
 966 017e F6       		.byte	0xf6
 967 017f 73000000 		.4byte	0x73
 968 0183 02       		.uleb128 0x2
 969 0184 91       		.byte	0x91
 970 0185 70       		.sleb128 -16
 971 0186 00       		.byte	0
 972 0187 10       		.uleb128 0x10
 973 0188 28020000 		.4byte	.LASF27
 974 018c 01       		.byte	0x1
 975 018d 2801     		.2byte	0x128
 976 018f 00000000 		.4byte	.LFB68
 977 0193 26000000 		.4byte	.LFE68-.LFB68
 978 0197 01       		.uleb128 0x1
 979 0198 9C       		.byte	0x9c
 980 0199 AD010000 		.4byte	0x1ad
 981 019d 11       		.uleb128 0x11
 982 019e 0E000000 		.4byte	.LASF29
 983 01a2 01       		.byte	0x1
 984 01a3 2801     		.2byte	0x128
 985 01a5 97000000 		.4byte	0x97
 986 01a9 02       		.uleb128 0x2
 987 01aa 91       		.byte	0x91
 988 01ab 74       		.sleb128 -12
 989 01ac 00       		.byte	0
 990 01ad 10       		.uleb128 0x10
 991 01ae 50020000 		.4byte	.LASF30
 992 01b2 01       		.byte	0x1
 993 01b3 3001     		.2byte	0x130
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 24


 994 01b5 00000000 		.4byte	.LFB69
 995 01b9 28000000 		.4byte	.LFE69-.LFB69
 996 01bd 01       		.uleb128 0x1
 997 01be 9C       		.byte	0x9c
 998 01bf E2010000 		.4byte	0x1e2
 999 01c3 11       		.uleb128 0x11
 1000 01c4 DD010000 		.4byte	.LASF31
 1001 01c8 01       		.byte	0x1
 1002 01c9 3001     		.2byte	0x130
 1003 01cb 97000000 		.4byte	0x97
 1004 01cf 02       		.uleb128 0x2
 1005 01d0 91       		.byte	0x91
 1006 01d1 74       		.sleb128 -12
 1007 01d2 11       		.uleb128 0x11
 1008 01d3 36010000 		.4byte	.LASF32
 1009 01d7 01       		.byte	0x1
 1010 01d8 3001     		.2byte	0x130
 1011 01da 97000000 		.4byte	0x97
 1012 01de 02       		.uleb128 0x2
 1013 01df 91       		.byte	0x91
 1014 01e0 70       		.sleb128 -16
 1015 01e1 00       		.byte	0
 1016 01e2 12       		.uleb128 0x12
 1017 01e3 6C010000 		.4byte	.LASF33
 1018 01e7 06       		.byte	0x6
 1019 01e8 9606     		.2byte	0x696
 1020 01ea EE010000 		.4byte	0x1ee
 1021 01ee 13       		.uleb128 0x13
 1022 01ef 8C000000 		.4byte	0x8c
 1023 01f3 14       		.uleb128 0x14
 1024 01f4 5A010000 		.4byte	.LASF34
 1025 01f8 01       		.byte	0x1
 1026 01f9 52       		.byte	0x52
 1027 01fa 04020000 		.4byte	0x204
 1028 01fe 05       		.uleb128 0x5
 1029 01ff 03       		.byte	0x3
 1030 0200 00000000 		.4byte	debounce_on
 1031 0204 02       		.uleb128 0x2
 1032 0205 01       		.byte	0x1
 1033 0206 02       		.byte	0x2
 1034 0207 BB020000 		.4byte	.LASF35
 1035 020b 14       		.uleb128 0x14
 1036 020c D5000000 		.4byte	.LASF36
 1037 0210 01       		.byte	0x1
 1038 0211 54       		.byte	0x54
 1039 0212 04020000 		.4byte	0x204
 1040 0216 05       		.uleb128 0x5
 1041 0217 03       		.byte	0x3
 1042 0218 00000000 		.4byte	dimming
 1043 021c 14       		.uleb128 0x14
 1044 021d 19000000 		.4byte	.LASF37
 1045 0221 01       		.byte	0x1
 1046 0222 55       		.byte	0x55
 1047 0223 97000000 		.4byte	0x97
 1048 0227 05       		.uleb128 0x5
 1049 0228 03       		.byte	0x3
 1050 0229 00000000 		.4byte	toggle_light_time_ms
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 25


 1051 022d 14       		.uleb128 0x14
 1052 022e 7C020000 		.4byte	.LASF38
 1053 0232 01       		.byte	0x1
 1054 0233 59       		.byte	0x59
 1055 0234 97000000 		.4byte	0x97
 1056 0238 05       		.uleb128 0x5
 1057 0239 03       		.byte	0x3
 1058 023a 00000000 		.4byte	total_time_ms
 1059 023e 14       		.uleb128 0x14
 1060 023f 68020000 		.4byte	.LASF39
 1061 0243 01       		.byte	0x1
 1062 0244 5A       		.byte	0x5a
 1063 0245 97000000 		.4byte	0x97
 1064 0249 05       		.uleb128 0x5
 1065 024a 03       		.byte	0x3
 1066 024b 00000000 		.4byte	on_time_ms
 1067 024f 14       		.uleb128 0x14
 1068 0250 2A010000 		.4byte	.LASF40
 1069 0254 01       		.byte	0x1
 1070 0255 5B       		.byte	0x5b
 1071 0256 97000000 		.4byte	0x97
 1072 025a 05       		.uleb128 0x5
 1073 025b 03       		.byte	0x3
 1074 025c 00000000 		.4byte	off_time_ms
 1075 0260 14       		.uleb128 0x14
 1076 0261 E5010000 		.4byte	.LASF41
 1077 0265 01       		.byte	0x1
 1078 0266 5C       		.byte	0x5c
 1079 0267 A3000000 		.4byte	0xa3
 1080 026b 05       		.uleb128 0x5
 1081 026c 03       		.byte	0x3
 1082 026d 00000000 		.4byte	duty_cycle
 1083 0271 14       		.uleb128 0x14
 1084 0272 A5010000 		.4byte	.LASF42
 1085 0276 01       		.byte	0x1
 1086 0277 61       		.byte	0x61
 1087 0278 CA000000 		.4byte	0xca
 1088 027c 05       		.uleb128 0x5
 1089 027d 03       		.byte	0x3
 1090 027e 00000000 		.4byte	currentMode
 1091 0282 14       		.uleb128 0x14
 1092 0283 43020000 		.4byte	.LASF43
 1093 0287 01       		.byte	0x1
 1094 0288 62       		.byte	0x62
 1095 0289 CA000000 		.4byte	0xca
 1096 028d 05       		.uleb128 0x5
 1097 028e 03       		.byte	0x3
 1098 028f 00000000 		.4byte	previousMode
 1099 0293 00       		.byte	0
 1100              		.section	.debug_abbrev,"",%progbits
 1101              	.Ldebug_abbrev0:
 1102 0000 01       		.uleb128 0x1
 1103 0001 11       		.uleb128 0x11
 1104 0002 01       		.byte	0x1
 1105 0003 25       		.uleb128 0x25
 1106 0004 0E       		.uleb128 0xe
 1107 0005 13       		.uleb128 0x13
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 26


 1108 0006 0B       		.uleb128 0xb
 1109 0007 03       		.uleb128 0x3
 1110 0008 0E       		.uleb128 0xe
 1111 0009 1B       		.uleb128 0x1b
 1112 000a 0E       		.uleb128 0xe
 1113 000b 55       		.uleb128 0x55
 1114 000c 17       		.uleb128 0x17
 1115 000d 11       		.uleb128 0x11
 1116 000e 01       		.uleb128 0x1
 1117 000f 10       		.uleb128 0x10
 1118 0010 17       		.uleb128 0x17
 1119 0011 00       		.byte	0
 1120 0012 00       		.byte	0
 1121 0013 02       		.uleb128 0x2
 1122 0014 24       		.uleb128 0x24
 1123 0015 00       		.byte	0
 1124 0016 0B       		.uleb128 0xb
 1125 0017 0B       		.uleb128 0xb
 1126 0018 3E       		.uleb128 0x3e
 1127 0019 0B       		.uleb128 0xb
 1128 001a 03       		.uleb128 0x3
 1129 001b 0E       		.uleb128 0xe
 1130 001c 00       		.byte	0
 1131 001d 00       		.byte	0
 1132 001e 03       		.uleb128 0x3
 1133 001f 16       		.uleb128 0x16
 1134 0020 00       		.byte	0
 1135 0021 03       		.uleb128 0x3
 1136 0022 0E       		.uleb128 0xe
 1137 0023 3A       		.uleb128 0x3a
 1138 0024 0B       		.uleb128 0xb
 1139 0025 3B       		.uleb128 0x3b
 1140 0026 0B       		.uleb128 0xb
 1141 0027 49       		.uleb128 0x49
 1142 0028 13       		.uleb128 0x13
 1143 0029 00       		.byte	0
 1144 002a 00       		.byte	0
 1145 002b 04       		.uleb128 0x4
 1146 002c 24       		.uleb128 0x24
 1147 002d 00       		.byte	0
 1148 002e 0B       		.uleb128 0xb
 1149 002f 0B       		.uleb128 0xb
 1150 0030 3E       		.uleb128 0x3e
 1151 0031 0B       		.uleb128 0xb
 1152 0032 03       		.uleb128 0x3
 1153 0033 08       		.uleb128 0x8
 1154 0034 00       		.byte	0
 1155 0035 00       		.byte	0
 1156 0036 05       		.uleb128 0x5
 1157 0037 16       		.uleb128 0x16
 1158 0038 00       		.byte	0
 1159 0039 03       		.uleb128 0x3
 1160 003a 0E       		.uleb128 0xe
 1161 003b 3A       		.uleb128 0x3a
 1162 003c 0B       		.uleb128 0xb
 1163 003d 3B       		.uleb128 0x3b
 1164 003e 05       		.uleb128 0x5
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 27


 1165 003f 49       		.uleb128 0x49
 1166 0040 13       		.uleb128 0x13
 1167 0041 00       		.byte	0
 1168 0042 00       		.byte	0
 1169 0043 06       		.uleb128 0x6
 1170 0044 04       		.uleb128 0x4
 1171 0045 01       		.byte	0x1
 1172 0046 03       		.uleb128 0x3
 1173 0047 0E       		.uleb128 0xe
 1174 0048 0B       		.uleb128 0xb
 1175 0049 0B       		.uleb128 0xb
 1176 004a 3A       		.uleb128 0x3a
 1177 004b 0B       		.uleb128 0xb
 1178 004c 3B       		.uleb128 0x3b
 1179 004d 0B       		.uleb128 0xb
 1180 004e 01       		.uleb128 0x1
 1181 004f 13       		.uleb128 0x13
 1182 0050 00       		.byte	0
 1183 0051 00       		.byte	0
 1184 0052 07       		.uleb128 0x7
 1185 0053 28       		.uleb128 0x28
 1186 0054 00       		.byte	0
 1187 0055 03       		.uleb128 0x3
 1188 0056 0E       		.uleb128 0xe
 1189 0057 1C       		.uleb128 0x1c
 1190 0058 0D       		.uleb128 0xd
 1191 0059 00       		.byte	0
 1192 005a 00       		.byte	0
 1193 005b 08       		.uleb128 0x8
 1194 005c 2E       		.uleb128 0x2e
 1195 005d 00       		.byte	0
 1196 005e 3F       		.uleb128 0x3f
 1197 005f 19       		.uleb128 0x19
 1198 0060 03       		.uleb128 0x3
 1199 0061 0E       		.uleb128 0xe
 1200 0062 3A       		.uleb128 0x3a
 1201 0063 0B       		.uleb128 0xb
 1202 0064 3B       		.uleb128 0x3b
 1203 0065 0B       		.uleb128 0xb
 1204 0066 27       		.uleb128 0x27
 1205 0067 19       		.uleb128 0x19
 1206 0068 11       		.uleb128 0x11
 1207 0069 01       		.uleb128 0x1
 1208 006a 12       		.uleb128 0x12
 1209 006b 06       		.uleb128 0x6
 1210 006c 40       		.uleb128 0x40
 1211 006d 18       		.uleb128 0x18
 1212 006e 9642     		.uleb128 0x2116
 1213 0070 19       		.uleb128 0x19
 1214 0071 00       		.byte	0
 1215 0072 00       		.byte	0
 1216 0073 09       		.uleb128 0x9
 1217 0074 2E       		.uleb128 0x2e
 1218 0075 00       		.byte	0
 1219 0076 3F       		.uleb128 0x3f
 1220 0077 19       		.uleb128 0x19
 1221 0078 03       		.uleb128 0x3
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 28


 1222 0079 0E       		.uleb128 0xe
 1223 007a 3A       		.uleb128 0x3a
 1224 007b 0B       		.uleb128 0xb
 1225 007c 3B       		.uleb128 0x3b
 1226 007d 0B       		.uleb128 0xb
 1227 007e 49       		.uleb128 0x49
 1228 007f 13       		.uleb128 0x13
 1229 0080 11       		.uleb128 0x11
 1230 0081 01       		.uleb128 0x1
 1231 0082 12       		.uleb128 0x12
 1232 0083 06       		.uleb128 0x6
 1233 0084 40       		.uleb128 0x40
 1234 0085 18       		.uleb128 0x18
 1235 0086 9642     		.uleb128 0x2116
 1236 0088 19       		.uleb128 0x19
 1237 0089 00       		.byte	0
 1238 008a 00       		.byte	0
 1239 008b 0A       		.uleb128 0xa
 1240 008c 2E       		.uleb128 0x2e
 1241 008d 01       		.byte	0x1
 1242 008e 3F       		.uleb128 0x3f
 1243 008f 19       		.uleb128 0x19
 1244 0090 03       		.uleb128 0x3
 1245 0091 0E       		.uleb128 0xe
 1246 0092 3A       		.uleb128 0x3a
 1247 0093 0B       		.uleb128 0xb
 1248 0094 3B       		.uleb128 0x3b
 1249 0095 0B       		.uleb128 0xb
 1250 0096 49       		.uleb128 0x49
 1251 0097 13       		.uleb128 0x13
 1252 0098 11       		.uleb128 0x11
 1253 0099 01       		.uleb128 0x1
 1254 009a 12       		.uleb128 0x12
 1255 009b 06       		.uleb128 0x6
 1256 009c 40       		.uleb128 0x40
 1257 009d 18       		.uleb128 0x18
 1258 009e 9642     		.uleb128 0x2116
 1259 00a0 19       		.uleb128 0x19
 1260 00a1 01       		.uleb128 0x1
 1261 00a2 13       		.uleb128 0x13
 1262 00a3 00       		.byte	0
 1263 00a4 00       		.byte	0
 1264 00a5 0B       		.uleb128 0xb
 1265 00a6 34       		.uleb128 0x34
 1266 00a7 00       		.byte	0
 1267 00a8 03       		.uleb128 0x3
 1268 00a9 0E       		.uleb128 0xe
 1269 00aa 3A       		.uleb128 0x3a
 1270 00ab 0B       		.uleb128 0xb
 1271 00ac 3B       		.uleb128 0x3b
 1272 00ad 0B       		.uleb128 0xb
 1273 00ae 49       		.uleb128 0x49
 1274 00af 13       		.uleb128 0x13
 1275 00b0 02       		.uleb128 0x2
 1276 00b1 18       		.uleb128 0x18
 1277 00b2 00       		.byte	0
 1278 00b3 00       		.byte	0
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 29


 1279 00b4 0C       		.uleb128 0xc
 1280 00b5 2E       		.uleb128 0x2e
 1281 00b6 01       		.byte	0x1
 1282 00b7 3F       		.uleb128 0x3f
 1283 00b8 19       		.uleb128 0x19
 1284 00b9 03       		.uleb128 0x3
 1285 00ba 0E       		.uleb128 0xe
 1286 00bb 3A       		.uleb128 0x3a
 1287 00bc 0B       		.uleb128 0xb
 1288 00bd 3B       		.uleb128 0x3b
 1289 00be 0B       		.uleb128 0xb
 1290 00bf 27       		.uleb128 0x27
 1291 00c0 19       		.uleb128 0x19
 1292 00c1 11       		.uleb128 0x11
 1293 00c2 01       		.uleb128 0x1
 1294 00c3 12       		.uleb128 0x12
 1295 00c4 06       		.uleb128 0x6
 1296 00c5 40       		.uleb128 0x40
 1297 00c6 18       		.uleb128 0x18
 1298 00c7 9642     		.uleb128 0x2116
 1299 00c9 19       		.uleb128 0x19
 1300 00ca 01       		.uleb128 0x1
 1301 00cb 13       		.uleb128 0x13
 1302 00cc 00       		.byte	0
 1303 00cd 00       		.byte	0
 1304 00ce 0D       		.uleb128 0xd
 1305 00cf 05       		.uleb128 0x5
 1306 00d0 00       		.byte	0
 1307 00d1 03       		.uleb128 0x3
 1308 00d2 0E       		.uleb128 0xe
 1309 00d3 3A       		.uleb128 0x3a
 1310 00d4 0B       		.uleb128 0xb
 1311 00d5 3B       		.uleb128 0x3b
 1312 00d6 0B       		.uleb128 0xb
 1313 00d7 49       		.uleb128 0x49
 1314 00d8 13       		.uleb128 0x13
 1315 00d9 02       		.uleb128 0x2
 1316 00da 18       		.uleb128 0x18
 1317 00db 00       		.byte	0
 1318 00dc 00       		.byte	0
 1319 00dd 0E       		.uleb128 0xe
 1320 00de 2E       		.uleb128 0x2e
 1321 00df 01       		.byte	0x1
 1322 00e0 3F       		.uleb128 0x3f
 1323 00e1 19       		.uleb128 0x19
 1324 00e2 03       		.uleb128 0x3
 1325 00e3 0E       		.uleb128 0xe
 1326 00e4 3A       		.uleb128 0x3a
 1327 00e5 0B       		.uleb128 0xb
 1328 00e6 3B       		.uleb128 0x3b
 1329 00e7 0B       		.uleb128 0xb
 1330 00e8 11       		.uleb128 0x11
 1331 00e9 01       		.uleb128 0x1
 1332 00ea 12       		.uleb128 0x12
 1333 00eb 06       		.uleb128 0x6
 1334 00ec 40       		.uleb128 0x40
 1335 00ed 18       		.uleb128 0x18
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 30


 1336 00ee 9642     		.uleb128 0x2116
 1337 00f0 19       		.uleb128 0x19
 1338 00f1 01       		.uleb128 0x1
 1339 00f2 13       		.uleb128 0x13
 1340 00f3 00       		.byte	0
 1341 00f4 00       		.byte	0
 1342 00f5 0F       		.uleb128 0xf
 1343 00f6 34       		.uleb128 0x34
 1344 00f7 00       		.byte	0
 1345 00f8 03       		.uleb128 0x3
 1346 00f9 08       		.uleb128 0x8
 1347 00fa 3A       		.uleb128 0x3a
 1348 00fb 0B       		.uleb128 0xb
 1349 00fc 3B       		.uleb128 0x3b
 1350 00fd 0B       		.uleb128 0xb
 1351 00fe 49       		.uleb128 0x49
 1352 00ff 13       		.uleb128 0x13
 1353 0100 02       		.uleb128 0x2
 1354 0101 18       		.uleb128 0x18
 1355 0102 00       		.byte	0
 1356 0103 00       		.byte	0
 1357 0104 10       		.uleb128 0x10
 1358 0105 2E       		.uleb128 0x2e
 1359 0106 01       		.byte	0x1
 1360 0107 3F       		.uleb128 0x3f
 1361 0108 19       		.uleb128 0x19
 1362 0109 03       		.uleb128 0x3
 1363 010a 0E       		.uleb128 0xe
 1364 010b 3A       		.uleb128 0x3a
 1365 010c 0B       		.uleb128 0xb
 1366 010d 3B       		.uleb128 0x3b
 1367 010e 05       		.uleb128 0x5
 1368 010f 27       		.uleb128 0x27
 1369 0110 19       		.uleb128 0x19
 1370 0111 11       		.uleb128 0x11
 1371 0112 01       		.uleb128 0x1
 1372 0113 12       		.uleb128 0x12
 1373 0114 06       		.uleb128 0x6
 1374 0115 40       		.uleb128 0x40
 1375 0116 18       		.uleb128 0x18
 1376 0117 9642     		.uleb128 0x2116
 1377 0119 19       		.uleb128 0x19
 1378 011a 01       		.uleb128 0x1
 1379 011b 13       		.uleb128 0x13
 1380 011c 00       		.byte	0
 1381 011d 00       		.byte	0
 1382 011e 11       		.uleb128 0x11
 1383 011f 05       		.uleb128 0x5
 1384 0120 00       		.byte	0
 1385 0121 03       		.uleb128 0x3
 1386 0122 0E       		.uleb128 0xe
 1387 0123 3A       		.uleb128 0x3a
 1388 0124 0B       		.uleb128 0xb
 1389 0125 3B       		.uleb128 0x3b
 1390 0126 05       		.uleb128 0x5
 1391 0127 49       		.uleb128 0x49
 1392 0128 13       		.uleb128 0x13
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 31


 1393 0129 02       		.uleb128 0x2
 1394 012a 18       		.uleb128 0x18
 1395 012b 00       		.byte	0
 1396 012c 00       		.byte	0
 1397 012d 12       		.uleb128 0x12
 1398 012e 34       		.uleb128 0x34
 1399 012f 00       		.byte	0
 1400 0130 03       		.uleb128 0x3
 1401 0131 0E       		.uleb128 0xe
 1402 0132 3A       		.uleb128 0x3a
 1403 0133 0B       		.uleb128 0xb
 1404 0134 3B       		.uleb128 0x3b
 1405 0135 05       		.uleb128 0x5
 1406 0136 49       		.uleb128 0x49
 1407 0137 13       		.uleb128 0x13
 1408 0138 3F       		.uleb128 0x3f
 1409 0139 19       		.uleb128 0x19
 1410 013a 3C       		.uleb128 0x3c
 1411 013b 19       		.uleb128 0x19
 1412 013c 00       		.byte	0
 1413 013d 00       		.byte	0
 1414 013e 13       		.uleb128 0x13
 1415 013f 35       		.uleb128 0x35
 1416 0140 00       		.byte	0
 1417 0141 49       		.uleb128 0x49
 1418 0142 13       		.uleb128 0x13
 1419 0143 00       		.byte	0
 1420 0144 00       		.byte	0
 1421 0145 14       		.uleb128 0x14
 1422 0146 34       		.uleb128 0x34
 1423 0147 00       		.byte	0
 1424 0148 03       		.uleb128 0x3
 1425 0149 0E       		.uleb128 0xe
 1426 014a 3A       		.uleb128 0x3a
 1427 014b 0B       		.uleb128 0xb
 1428 014c 3B       		.uleb128 0x3b
 1429 014d 0B       		.uleb128 0xb
 1430 014e 49       		.uleb128 0x49
 1431 014f 13       		.uleb128 0x13
 1432 0150 3F       		.uleb128 0x3f
 1433 0151 19       		.uleb128 0x19
 1434 0152 02       		.uleb128 0x2
 1435 0153 18       		.uleb128 0x18
 1436 0154 00       		.byte	0
 1437 0155 00       		.byte	0
 1438 0156 00       		.byte	0
 1439              		.section	.debug_aranges,"",%progbits
 1440 0000 4C000000 		.4byte	0x4c
 1441 0004 0200     		.2byte	0x2
 1442 0006 00000000 		.4byte	.Ldebug_info0
 1443 000a 04       		.byte	0x4
 1444 000b 00       		.byte	0
 1445 000c 0000     		.2byte	0
 1446 000e 0000     		.2byte	0
 1447 0010 00000000 		.4byte	.LFB63
 1448 0014 2C000000 		.4byte	.LFE63-.LFB63
 1449 0018 00000000 		.4byte	.LFB64
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 32


 1450 001c F4010000 		.4byte	.LFE64-.LFB64
 1451 0020 00000000 		.4byte	.LFB65
 1452 0024 22000000 		.4byte	.LFE65-.LFB65
 1453 0028 00000000 		.4byte	.LFB66
 1454 002c 18000000 		.4byte	.LFE66-.LFB66
 1455 0030 00000000 		.4byte	.LFB67
 1456 0034 64010000 		.4byte	.LFE67-.LFB67
 1457 0038 00000000 		.4byte	.LFB68
 1458 003c 26000000 		.4byte	.LFE68-.LFB68
 1459 0040 00000000 		.4byte	.LFB69
 1460 0044 28000000 		.4byte	.LFE69-.LFB69
 1461 0048 00000000 		.4byte	0
 1462 004c 00000000 		.4byte	0
 1463              		.section	.debug_ranges,"",%progbits
 1464              	.Ldebug_ranges0:
 1465 0000 00000000 		.4byte	.LFB63
 1466 0004 2C000000 		.4byte	.LFE63
 1467 0008 00000000 		.4byte	.LFB64
 1468 000c F4010000 		.4byte	.LFE64
 1469 0010 00000000 		.4byte	.LFB65
 1470 0014 22000000 		.4byte	.LFE65
 1471 0018 00000000 		.4byte	.LFB66
 1472 001c 18000000 		.4byte	.LFE66
 1473 0020 00000000 		.4byte	.LFB67
 1474 0024 64010000 		.4byte	.LFE67
 1475 0028 00000000 		.4byte	.LFB68
 1476 002c 26000000 		.4byte	.LFE68
 1477 0030 00000000 		.4byte	.LFB69
 1478 0034 28000000 		.4byte	.LFE69
 1479 0038 00000000 		.4byte	0
 1480 003c 00000000 		.4byte	0
 1481              		.section	.debug_line,"",%progbits
 1482              	.Ldebug_line0:
 1483 0000 98020000 		.section	.debug_str,"MS",%progbits,1
 1483      0200C001 
 1483      00000201 
 1483      FB0E0D00 
 1483      01010101 
 1484              	.LASF8:
 1485 0000 6C6F6E67 		.ascii	"long long int\000"
 1485      206C6F6E 
 1485      6720696E 
 1485      7400
 1486              	.LASF29:
 1487 000e 68616C66 		.ascii	"halfPeriod\000"
 1487      50657269 
 1487      6F6400
 1488              	.LASF37:
 1489 0019 746F6767 		.ascii	"toggle_light_time_ms\000"
 1489      6C655F6C 
 1489      69676874 
 1489      5F74696D 
 1489      655F6D73 
 1490              	.LASF28:
 1491 002e 76616C75 		.ascii	"value\000"
 1491      6500
 1492              	.LASF5:
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 33


 1493 0034 5F5F696E 		.ascii	"__int32_t\000"
 1493      7433325F 
 1493      7400
 1494              	.LASF6:
 1495 003e 6C6F6E67 		.ascii	"long int\000"
 1495      20696E74 
 1495      00
 1496              	.LASF44:
 1497 0047 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1497      4320342E 
 1497      392E3320 
 1497      32303135 
 1497      30333033 
 1498 007a 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 1498      20726576 
 1498      6973696F 
 1498      6E203232 
 1498      31323230 
 1499 00ad 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 1499      66756E63 
 1499      74696F6E 
 1499      2D736563 
 1499      74696F6E 
 1500              	.LASF36:
 1501 00d5 64696D6D 		.ascii	"dimming\000"
 1501      696E6700 
 1502              	.LASF15:
 1503 00dd 646F7562 		.ascii	"double\000"
 1503      6C6500
 1504              	.LASF18:
 1505 00e4 7069645F 		.ascii	"pid_t\000"
 1505      7400
 1506              	.LASF46:
 1507 00ea 453A5C44 		.ascii	"E:\\Documents\\PSoC Creator\\engr478labs\\Lab2_Soft"
 1507      6F63756D 
 1507      656E7473 
 1507      5C50536F 
 1507      43204372 
 1508 0119 77617265 		.ascii	"ware.cydsn\000"
 1508      2E637964 
 1508      736E00
 1509              	.LASF14:
 1510 0124 666C6F61 		.ascii	"float\000"
 1510      7400
 1511              	.LASF40:
 1512 012a 6F66665F 		.ascii	"off_time_ms\000"
 1512      74696D65 
 1512      5F6D7300 
 1513              	.LASF32:
 1514 0136 6F66665F 		.ascii	"off_time\000"
 1514      74696D65 
 1514      00
 1515              	.LASF45:
 1516 013f 2E5C6D61 		.ascii	".\\main.c\000"
 1516      696E2E63 
 1516      00
 1517              	.LASF7:
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 34


 1518 0148 6C6F6E67 		.ascii	"long unsigned int\000"
 1518      20756E73 
 1518      69676E65 
 1518      6420696E 
 1518      7400
 1519              	.LASF34:
 1520 015a 6465626F 		.ascii	"debounce_on\000"
 1520      756E6365 
 1520      5F6F6E00 
 1521              	.LASF19:
 1522 0166 626C696E 		.ascii	"blink\000"
 1522      6B00
 1523              	.LASF33:
 1524 016c 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1524      52784275 
 1524      66666572 
 1524      00
 1525              	.LASF48:
 1526 0179 536F6674 		.ascii	"Software_PWM_Start\000"
 1526      77617265 
 1526      5F50574D 
 1526      5F537461 
 1526      727400
 1527              	.LASF1:
 1528 018c 756E7369 		.ascii	"unsigned char\000"
 1528      676E6564 
 1528      20636861 
 1528      7200
 1529              	.LASF4:
 1530 019a 5F5F7569 		.ascii	"__uint16_t\000"
 1530      6E743136 
 1530      5F7400
 1531              	.LASF42:
 1532 01a5 63757272 		.ascii	"currentMode\000"
 1532      656E744D 
 1532      6F646500 
 1533              	.LASF22:
 1534 01b1 6D61696E 		.ascii	"main\000"
 1534      00
 1535              	.LASF23:
 1536 01b6 47657450 		.ascii	"GetPotentiometerValue\000"
 1536      6F74656E 
 1536      74696F6D 
 1536      65746572 
 1536      56616C75 
 1537              	.LASF24:
 1538 01cc 77726974 		.ascii	"write_led\000"
 1538      655F6C65 
 1538      6400
 1539              	.LASF13:
 1540 01d6 75696E74 		.ascii	"uint32\000"
 1540      333200
 1541              	.LASF31:
 1542 01dd 6F6E5F74 		.ascii	"on_time\000"
 1542      696D6500 
 1543              	.LASF41:
 1544 01e5 64757479 		.ascii	"duty_cycle\000"
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 35


 1544      5F637963 
 1544      6C6500
 1545              	.LASF10:
 1546 01f0 756E7369 		.ascii	"unsigned int\000"
 1546      676E6564 
 1546      20696E74 
 1546      00
 1547              	.LASF9:
 1548 01fd 6C6F6E67 		.ascii	"long long unsigned int\000"
 1548      206C6F6E 
 1548      6720756E 
 1548      7369676E 
 1548      65642069 
 1549              	.LASF25:
 1550 0214 72657375 		.ascii	"result\000"
 1550      6C7400
 1551              	.LASF47:
 1552 021b 70776D4D 		.ascii	"pwmMode\000"
 1552      6F646500 
 1553              	.LASF20:
 1554 0223 72616D70 		.ascii	"ramp\000"
 1554      00
 1555              	.LASF27:
 1556 0228 50574D5F 		.ascii	"PWM_Blink\000"
 1556      426C696E 
 1556      6B00
 1557              	.LASF12:
 1558 0232 696E7433 		.ascii	"int32_t\000"
 1558      325F7400 
 1559              	.LASF17:
 1560 023a 73697A65 		.ascii	"sizetype\000"
 1560      74797065 
 1560      00
 1561              	.LASF43:
 1562 0243 70726576 		.ascii	"previousMode\000"
 1562      696F7573 
 1562      4D6F6465 
 1562      00
 1563              	.LASF30:
 1564 0250 50574D5F 		.ascii	"PWM_Ramp\000"
 1564      52616D70 
 1564      00
 1565              	.LASF16:
 1566 0259 63686172 		.ascii	"char\000"
 1566      00
 1567              	.LASF2:
 1568 025e 73686F72 		.ascii	"short int\000"
 1568      7420696E 
 1568      7400
 1569              	.LASF39:
 1570 0268 6F6E5F74 		.ascii	"on_time_ms\000"
 1570      696D655F 
 1570      6D7300
 1571              	.LASF11:
 1572 0273 75696E74 		.ascii	"uint16_t\000"
 1572      31365F74 
 1572      00
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccsWc8KH.s 			page 36


 1573              	.LASF38:
 1574 027c 746F7461 		.ascii	"total_time_ms\000"
 1574      6C5F7469 
 1574      6D655F6D 
 1574      7300
 1575              	.LASF26:
 1576 028a 65727273 		.ascii	"errsv\000"
 1576      7600
 1577              	.LASF21:
 1578 0290 546F6767 		.ascii	"ToggleModes\000"
 1578      6C654D6F 
 1578      64657300 
 1579              	.LASF0:
 1580 029c 7369676E 		.ascii	"signed char\000"
 1580      65642063 
 1580      68617200 
 1581              	.LASF3:
 1582 02a8 73686F72 		.ascii	"short unsigned int\000"
 1582      7420756E 
 1582      7369676E 
 1582      65642069 
 1582      6E7400
 1583              	.LASF35:
 1584 02bb 5F426F6F 		.ascii	"_Bool\000"
 1584      6C00
 1585              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
