ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccgwgd2K.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	debounce_on
  19              		.bss
  20              		.type	debounce_on, %object
  21              		.size	debounce_on, 1
  22              	debounce_on:
  23 0000 00       		.space	1
  24              		.global	dimming
  25              		.type	dimming, %object
  26              		.size	dimming, 1
  27              	dimming:
  28 0001 00       		.space	1
  29              		.global	toggle_light_time_ms
  30              		.data
  31              		.align	2
  32              		.type	toggle_light_time_ms, %object
  33              		.size	toggle_light_time_ms, 4
  34              	toggle_light_time_ms:
  35 0000 F4010000 		.word	500
  36              		.global	total_time_ms
  37              		.align	2
  38              		.type	total_time_ms, %object
  39              		.size	total_time_ms, 4
  40              	total_time_ms:
  41 0004 F4010000 		.word	500
  42              		.global	on_time_ms
  43              		.align	2
  44              		.type	on_time_ms, %object
  45              		.size	on_time_ms, 4
  46              	on_time_ms:
  47 0008 FA000000 		.word	250
  48              		.global	off_time_ms
  49              		.align	2
  50              		.type	off_time_ms, %object
  51              		.size	off_time_ms, 4
  52              	off_time_ms:
  53 000c FA000000 		.word	250
  54              		.global	duty_cycle
  55              		.align	2
  56              		.type	duty_cycle, %object
  57              		.size	duty_cycle, 4
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccgwgd2K.s 			page 2


  58              	duty_cycle:
  59 0010 0000003F 		.word	1056964608
  60              		.comm	currentMode,1,1
  61              		.comm	previousMode,1,1
  62              		.section	.text.ToggleModes,"ax",%progbits
  63              		.align	2
  64              		.global	ToggleModes
  65              		.thumb
  66              		.thumb_func
  67              		.type	ToggleModes, %function
  68              	ToggleModes:
  69              	.LFB63:
  70              		.file 1 ".\\main.c"
   1:.\main.c      **** /******************************************************************************
   2:.\main.c      **** * Project Name		: CE95352 Blinking LED
   3:.\main.c      **** * File Name			: main.c
   4:.\main.c      **** * Version 			: **
   5:.\main.c      **** * Device Used		: CY8C5888LTI-LP097
   6:.\main.c      **** * Software Used		: PSoC Creator 3.1 SP2
   7:.\main.c      **** * Compiler    		: ARM GCC 4.8.4, ARM RVDS Generic, ARM MDK Generic
   8:.\main.c      **** * Related Hardware	: CY8CKIT059 PSoC 5 LP Prototyping Kit 
   9:.\main.c      **** * Owner				: KLMZ
  10:.\main.c      **** *
  11:.\main.c      **** ********************************************************************************
  12:.\main.c      **** * Copyright (2015), Cypress Semiconductor Corporation. All Rights Reserved.
  13:.\main.c      **** ********************************************************************************
  14:.\main.c      **** * This software is owned by Cypress Semiconductor Corporation (Cypress)
  15:.\main.c      **** * and is protected by and subject to worldwide patent protection (United
  16:.\main.c      **** * States and foreign), United States copyright laws and international treaty
  17:.\main.c      **** * provisions. Cypress hereby grants to licensee a personal, non-exclusive,
  18:.\main.c      **** * non-transferable license to copy, use, modify, create derivative works of,
  19:.\main.c      **** * and compile the Cypress Source Code and derivative works for the sole
  20:.\main.c      **** * purpose of creating custom software in support of licensee product to be
  21:.\main.c      **** * used only in conjunction with a Cypress integrated circuit as specified in
  22:.\main.c      **** * the applicable agreement. Any reproduction, modification, translation,
  23:.\main.c      **** * compilation, or representation of this software except as specified above 
  24:.\main.c      **** * is prohibited without the express written permission of Cypress.
  25:.\main.c      **** *
  26:.\main.c      **** * Disclaimer: CYPRESS MAKES NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, WITH 
  27:.\main.c      **** * REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  28:.\main.c      **** * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  29:.\main.c      **** * Cypress reserves the right to make changes without further notice to the 
  30:.\main.c      **** * materials described herein. Cypress does not assume any liability arising out 
  31:.\main.c      **** * of the application or use of any product or circuit described herein. Cypress 
  32:.\main.c      **** * does not authorize its products for use as critical components in life-support 
  33:.\main.c      **** * systems where a malfunction or failure may reasonably be expected to result in 
  34:.\main.c      **** * significant injury to the user. The inclusion of Cypress' product in a life-
  35:.\main.c      **** * support systems application implies that the manufacturer assumes all risk of 
  36:.\main.c      **** * such use and in doing so indemnifies Cypress against all charges. 
  37:.\main.c      **** *
  38:.\main.c      **** * Use of this Software may be limited by and subject to the applicable Cypress
  39:.\main.c      **** * software license agreement. 
  40:.\main.c      **** *******************************************************************************/
  41:.\main.c      **** 
  42:.\main.c      **** #include <device.h>
  43:.\main.c      **** #include <stdio.h>
  44:.\main.c      **** #include <string.h>
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccgwgd2K.s 			page 3


  45:.\main.c      **** #include <unistd.h>
  46:.\main.c      **** #include <stdbool.h>
  47:.\main.c      **** #include <errno.h>
  48:.\main.c      **** 
  49:.\main.c      **** /*******************************************************************************
  50:.\main.c      **** * Function Name: main
  51:.\main.c      **** ********************************************************************************
  52:.\main.c      **** *
  53:.\main.c      **** * Summary:
  54:.\main.c      **** *  Software-controller PWM controls and LED to blink in 1s interval
  55:.\main.c      ****                            as well as control the brightness
  56:.\main.c      **** *
  57:.\main.c      **** * Parameters:
  58:.\main.c      **** *  None.
  59:.\main.c      **** *
  60:.\main.c      **** * Return:
  61:.\main.c      **** *  None.
  62:.\main.c      **** *
  63:.\main.c      **** 
  64:.\main.c      **** Partner Names: John Dempsey, Haitham Alzerma, Kwesi
  65:.\main.c      **** Partner Lab Group name: 3GL (3 Guys in a Lab)
  66:.\main.c      **** *******************************************************************************/
  67:.\main.c      **** 
  68:.\main.c      **** //CONSTANTS
  69:.\main.c      **** //settings
  70:.\main.c      **** #define USING_INTERRUPTS 1      //1 for using interrupts, 0 for polling
  71:.\main.c      **** #define HUMAN_EYE_FPS 60        //at 60hz, most people can't detect difference
  72:.\main.c      **** #define DEBOUNCE_TIME 50       //minimum time to wait for button to finish bouncing
  73:.\main.c      **** #define RAMP_RESOLUTION 50           //RAMP_RESOLUTION for duty cycle
  74:.\main.c      **** #define POT_MAX 4080            //max reading from DAC potentiometer @ 4V
  75:.\main.c      **** 
  76:.\main.c      **** //global constants
  77:.\main.c      **** #define on 1
  78:.\main.c      **** #define off 0
  79:.\main.c      **** 
  80:.\main.c      **** //placeholder variables
  81:.\main.c      **** bool debounce_on = false;       //used to delay polling to debounce button
  82:.\main.c      **** //float currentBrightness = 0;
  83:.\main.c      **** bool dimming = false;                   //used with the 'ramp' function
  84:.\main.c      **** uint32 toggle_light_time_ms = 500;      //how fast to blink LED in 'blink' mode, can adjust with Po
  85:.\main.c      ****                                         //default to blink the light every half second
  86:.\main.c      **** 
  87:.\main.c      **** //PWM variables
  88:.\main.c      **** uint32 total_time_ms = 500;               //period of PWM, default 500ms
  89:.\main.c      **** uint32 on_time_ms = 250;                  //how many ms the LED is on, must be < total_time_ms
  90:.\main.c      **** uint32 off_time_ms = 250;
  91:.\main.c      **** float duty_cycle = 0.5;                 //what % of PWM is high, default to 50% on
  92:.\main.c      **** 
  93:.\main.c      **** 
  94:.\main.c      **** //possible modes for LED
  95:.\main.c      **** enum pwmMode {blink, ramp};
  96:.\main.c      **** enum pwmMode currentMode;
  97:.\main.c      **** enum pwmMode previousMode;
  98:.\main.c      **** 
  99:.\main.c      **** 
 100:.\main.c      **** //functions
 101:.\main.c      **** void write_led(int);
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccgwgd2K.s 			page 4


 102:.\main.c      **** void Software_PWM_Start();
 103:.\main.c      **** void PWM_Blink(uint32);
 104:.\main.c      **** void PWM_Ramp(uint32, uint32);
 105:.\main.c      **** uint16_t GetPotentiometerValue();
 106:.\main.c      **** CY_ISR(ToggleModes) {
  71              		.loc 1 106 0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 0
  74              		@ frame_needed = 1, uses_anonymous_args = 0
  75 0000 80B5     		push	{r7, lr}
  76              		.cfi_def_cfa_offset 8
  77              		.cfi_offset 7, -8
  78              		.cfi_offset 14, -4
  79 0002 00AF     		add	r7, sp, #0
  80              		.cfi_def_cfa_register 7
 107:.\main.c      ****     if (currentMode == blink) {
  81              		.loc 1 107 0
  82 0004 084B     		ldr	r3, .L4
  83 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  84 0008 002B     		cmp	r3, #0
  85 000a 06D1     		bne	.L2
 108:.\main.c      ****         currentMode = ramp;
  86              		.loc 1 108 0
  87 000c 064B     		ldr	r3, .L4
  88 000e 0122     		movs	r2, #1
  89 0010 1A70     		strb	r2, [r3]
 109:.\main.c      ****         write_led(on);      //for debugging
  90              		.loc 1 109 0
  91 0012 0120     		movs	r0, #1
  92 0014 FFF7FEFF 		bl	write_led
  93 0018 05E0     		b	.L1
  94              	.L2:
 110:.\main.c      ****     } else {
 111:.\main.c      ****         currentMode = blink;
  95              		.loc 1 111 0
  96 001a 034B     		ldr	r3, .L4
  97 001c 0022     		movs	r2, #0
  98 001e 1A70     		strb	r2, [r3]
 112:.\main.c      ****         write_led(off);     //for debugging
  99              		.loc 1 112 0
 100 0020 0020     		movs	r0, #0
 101 0022 FFF7FEFF 		bl	write_led
 102              	.L1:
 113:.\main.c      ****     }
 114:.\main.c      **** }
 103              		.loc 1 114 0
 104 0026 80BD     		pop	{r7, pc}
 105              	.L5:
 106              		.align	2
 107              	.L4:
 108 0028 00000000 		.word	currentMode
 109              		.cfi_endproc
 110              	.LFE63:
 111              		.size	ToggleModes, .-ToggleModes
 112              		.section	.text.main,"ax",%progbits
 113              		.align	2
 114              		.global	main
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccgwgd2K.s 			page 5


 115              		.thumb
 116              		.thumb_func
 117              		.type	main, %function
 118              	main:
 119              	.LFB64:
 115:.\main.c      **** 
 116:.\main.c      **** 
 117:.\main.c      **** 
 118:.\main.c      **** 
 119:.\main.c      **** 
 120:.\main.c      **** 
 121:.\main.c      **** 
 122:.\main.c      **** //TODO:
 123:.\main.c      **** //find out how threading works
 124:.\main.c      **** 
 125:.\main.c      **** int main()
 126:.\main.c      **** {
 120              		.loc 1 126 0
 121              		.cfi_startproc
 122              		@ args = 0, pretend = 0, frame = 0
 123              		@ frame_needed = 1, uses_anonymous_args = 0
 124 0000 80B5     		push	{r7, lr}
 125              		.cfi_def_cfa_offset 8
 126              		.cfi_offset 7, -8
 127              		.cfi_offset 14, -4
 128 0002 00AF     		add	r7, sp, #0
 129              		.cfi_def_cfa_register 7
 127:.\main.c      **** 
 128:.\main.c      ****     #if USING_INTERRUPTS
 129:.\main.c      ****         //toggles the led mode by using an interrupt
 130:.\main.c      ****     isr_1_StartEx(ToggleModes);
 130              		.loc 1 130 0
 131 0004 0748     		ldr	r0, .L8
 132 0006 FFF7FEFF 		bl	isr_1_StartEx
 131:.\main.c      ****     CYGlobalIntEnable;
 133              		.loc 1 131 0
 134              	@ 131 ".\main.c" 1
 135 000a 62B6     		CPSIE   i
 136              	@ 0 "" 2
 132:.\main.c      ****     
 133:.\main.c      ****     #endif
 134:.\main.c      ****     
 135:.\main.c      ****     //set default currentMode
 136:.\main.c      ****     currentMode = blink;
 137              		.loc 1 136 0
 138              		.thumb
 139 000c 064B     		ldr	r3, .L8+4
 140 000e 0022     		movs	r2, #0
 141 0010 1A70     		strb	r2, [r3]
 137:.\main.c      ****     previousMode = ramp;
 142              		.loc 1 137 0
 143 0012 064B     		ldr	r3, .L8+8
 144 0014 0122     		movs	r2, #1
 145 0016 1A70     		strb	r2, [r3]
 138:.\main.c      ****     
 139:.\main.c      ****     //start ADC for potentiometer
 140:.\main.c      ****     ADC_SAR_1_Start();
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccgwgd2K.s 			page 6


 146              		.loc 1 140 0
 147 0018 FFF7FEFF 		bl	ADC_SAR_1_Start
 141:.\main.c      ****     
 142:.\main.c      ****     //start running our PWM thread
 143:.\main.c      ****     Software_PWM_Start();           //runs in a separate thread than polling
 148              		.loc 1 143 0
 149 001c FFF7FEFF 		bl	Software_PWM_Start
 150              	.L7:
 144:.\main.c      ****     
 145:.\main.c      ****     
 146:.\main.c      ****     //loop polls button for press if interrupts disabled
 147:.\main.c      ****     //polls potentiometer for values for period of PWM
 148:.\main.c      ****     //only runs if the threading implementation is successful
 149:.\main.c      ****     while (true)
 150:.\main.c      ****     {
 151:.\main.c      ****         //have to poll the button every loop if not using interrupts
 152:.\main.c      ****         #if !(USING_INTERRUPTS)
 153:.\main.c      ****             if(Status_Reg_1_Read() && !debounce_on) { //if the button is pressed
 154:.\main.c      ****                 debounce_on = true;
 155:.\main.c      ****                 
 156:.\main.c      ****                 //wait until button is debounced
 157:.\main.c      ****                 CyDelay(DEBOUNCE_TIME);
 158:.\main.c      ****                 
 159:.\main.c      ****                 if (Status_Reg_1_Read()) {
 160:.\main.c      ****                     if(currentMode != previousMode) {   //if we are indeed toggling a different val
 161:.\main.c      ****                         if (currentMode == blink) {
 162:.\main.c      ****                             currentMode = ramp;
 163:.\main.c      ****                             write_led(on);              //debugging to make sure polling was correc
 164:.\main.c      ****                             printf("current mode is blink");
 165:.\main.c      ****                         } else if (currentMode == ramp){
 166:.\main.c      ****                             currentMode = blink;
 167:.\main.c      ****                             write_led(off);             //for debugging
 168:.\main.c      ****                             printf("current mode is ramp");
 169:.\main.c      ****                         }
 170:.\main.c      ****                         previousMode = currentMode;
 171:.\main.c      ****                     }
 172:.\main.c      ****                     
 173:.\main.c      ****                     //debounce_on = false;
 174:.\main.c      ****                 }
 175:.\main.c      ****                 
 176:.\main.c      ****                 debounce_on = false;
 177:.\main.c      ****             } else {
 178:.\main.c      ****                 previousMode = !currentMode;   //if we're not pushing the button, we changed modes
 179:.\main.c      ****             }
 180:.\main.c      ****         #endif      
 181:.\main.c      ****     }
 151              		.loc 1 181 0 discriminator 1
 152 0020 FEE7     		b	.L7
 153              	.L9:
 154 0022 00BF     		.align	2
 155              	.L8:
 156 0024 00000000 		.word	ToggleModes
 157 0028 00000000 		.word	currentMode
 158 002c 00000000 		.word	previousMode
 159              		.cfi_endproc
 160              	.LFE64:
 161              		.size	main, .-main
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccgwgd2K.s 			page 7


 162              		.section	.text.GetPotentiometerValue,"ax",%progbits
 163              		.align	2
 164              		.global	GetPotentiometerValue
 165              		.thumb
 166              		.thumb_func
 167              		.type	GetPotentiometerValue, %function
 168              	GetPotentiometerValue:
 169              	.LFB65:
 182:.\main.c      ****     
 183:.\main.c      ****     return 0;
 184:.\main.c      **** }
 185:.\main.c      **** 
 186:.\main.c      **** //returns the value from potentiometer
 187:.\main.c      **** uint16_t GetPotentiometerValue() {
 170              		.loc 1 187 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 8
 173              		@ frame_needed = 1, uses_anonymous_args = 0
 174 0000 80B5     		push	{r7, lr}
 175              		.cfi_def_cfa_offset 8
 176              		.cfi_offset 7, -8
 177              		.cfi_offset 14, -4
 178 0002 82B0     		sub	sp, sp, #8
 179              		.cfi_def_cfa_offset 16
 180 0004 00AF     		add	r7, sp, #0
 181              		.cfi_def_cfa_register 7
 188:.\main.c      ****     //poll potentiometer
 189:.\main.c      ****         ADC_SAR_1_StartConvert(); 
 182              		.loc 1 189 0
 183 0006 FFF7FEFF 		bl	ADC_SAR_1_StartConvert
 190:.\main.c      ****         ADC_SAR_1_IsEndConversion(ADC_SAR_1_WAIT_FOR_RESULT);   //blocks until conversion complete
 184              		.loc 1 190 0
 185 000a 0020     		movs	r0, #0
 186 000c FFF7FEFF 		bl	ADC_SAR_1_IsEndConversion
 191:.\main.c      ****         
 192:.\main.c      ****         uint16_t result = ADC_SAR_1_GetResult16();
 187              		.loc 1 192 0
 188 0010 FFF7FEFF 		bl	ADC_SAR_1_GetResult16
 189 0014 0346     		mov	r3, r0
 190 0016 FB80     		strh	r3, [r7, #6]	@ movhi
 193:.\main.c      ****         
 194:.\main.c      ****         return result;
 191              		.loc 1 194 0
 192 0018 FB88     		ldrh	r3, [r7, #6]
 195:.\main.c      **** }
 193              		.loc 1 195 0
 194 001a 1846     		mov	r0, r3
 195 001c 0837     		adds	r7, r7, #8
 196              		.cfi_def_cfa_offset 8
 197 001e BD46     		mov	sp, r7
 198              		.cfi_def_cfa_register 13
 199              		@ sp needed
 200 0020 80BD     		pop	{r7, pc}
 201              		.cfi_endproc
 202              	.LFE65:
 203              		.size	GetPotentiometerValue, .-GetPotentiometerValue
 204 0022 00BF     		.section	.text.write_led,"ax",%progbits
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccgwgd2K.s 			page 8


 205              		.align	2
 206              		.global	write_led
 207              		.thumb
 208              		.thumb_func
 209              		.type	write_led, %function
 210              	write_led:
 211              	.LFB66:
 196:.\main.c      **** 
 197:.\main.c      **** //shorthand for writing to control register
 198:.\main.c      **** void write_led(int value) {
 212              		.loc 1 198 0
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 8
 215              		@ frame_needed = 1, uses_anonymous_args = 0
 216 0000 80B5     		push	{r7, lr}
 217              		.cfi_def_cfa_offset 8
 218              		.cfi_offset 7, -8
 219              		.cfi_offset 14, -4
 220 0002 82B0     		sub	sp, sp, #8
 221              		.cfi_def_cfa_offset 16
 222 0004 00AF     		add	r7, sp, #0
 223              		.cfi_def_cfa_register 7
 224 0006 7860     		str	r0, [r7, #4]
 199:.\main.c      ****     Control_Reg_1_Write(value);   
 225              		.loc 1 199 0
 226 0008 7B68     		ldr	r3, [r7, #4]
 227 000a DBB2     		uxtb	r3, r3
 228 000c 1846     		mov	r0, r3
 229 000e FFF7FEFF 		bl	Control_Reg_1_Write
 200:.\main.c      **** }
 230              		.loc 1 200 0
 231 0012 0837     		adds	r7, r7, #8
 232              		.cfi_def_cfa_offset 8
 233 0014 BD46     		mov	sp, r7
 234              		.cfi_def_cfa_register 13
 235              		@ sp needed
 236 0016 80BD     		pop	{r7, pc}
 237              		.cfi_endproc
 238              	.LFE66:
 239              		.size	write_led, .-write_led
 240              		.global	__aeabi_fcmpge
 241              		.global	__aeabi_fcmple
 242              		.global	__aeabi_f2d
 243              		.global	__aeabi_dsub
 244              		.global	__aeabi_d2f
 245              		.global	__aeabi_dadd
 246              		.global	__aeabi_ui2f
 247              		.global	__aeabi_fmul
 248              		.global	__aeabi_f2uiz
 249              		.section	.text.Software_PWM_Start,"ax",%progbits
 250              		.align	2
 251              		.global	Software_PWM_Start
 252              		.thumb
 253              		.thumb_func
 254              		.type	Software_PWM_Start, %function
 255              	Software_PWM_Start:
 256              	.LFB67:
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccgwgd2K.s 			page 9


 201:.\main.c      **** 
 202:.\main.c      **** //software PWM function runs in a separate thread.  
 203:.\main.c      **** //runs calculations for PWM parameters, then calls PWM_Blink for timing
 204:.\main.c      **** void Software_PWM_Start() {
 257              		.loc 1 204 0
 258              		.cfi_startproc
 259              		@ args = 0, pretend = 0, frame = 8
 260              		@ frame_needed = 1, uses_anonymous_args = 0
 261 0000 80B5     		push	{r7, lr}
 262              		.cfi_def_cfa_offset 8
 263              		.cfi_offset 7, -8
 264              		.cfi_offset 14, -4
 265 0002 82B0     		sub	sp, sp, #8
 266              		.cfi_def_cfa_offset 16
 267 0004 00AF     		add	r7, sp, #0
 268              		.cfi_def_cfa_register 7
 205:.\main.c      ****     pid_t pid = fork();
 269              		.loc 1 205 0
 270 0006 FFF7FEFF 		bl	fork
 271 000a 0346     		mov	r3, r0
 272 000c 7B60     		str	r3, [r7, #4]
 206:.\main.c      ****     int errsv = errno;
 273              		.loc 1 206 0
 274 000e FFF7FEFF 		bl	__errno
 275 0012 0346     		mov	r3, r0
 276 0014 1B68     		ldr	r3, [r3]
 277 0016 3B60     		str	r3, [r7]
 207:.\main.c      ****     
 208:.\main.c      ****     /*
 209:.\main.c      ****     if (pid < 0) {      //fork errored out
 210:.\main.c      ****         return;
 211:.\main.c      ****     } 
 212:.\main.c      ****     */
 213:.\main.c      ****     
 214:.\main.c      ****     if (pid > 0) {  //parent process returns to main loop
 278              		.loc 1 214 0
 279 0018 7B68     		ldr	r3, [r7, #4]
 280 001a 002B     		cmp	r3, #0
 281 001c 00DD     		ble	.L14
 215:.\main.c      ****         return;   
 282              		.loc 1 215 0
 283 001e 89E0     		b	.L26
 284              	.L14:
 216:.\main.c      ****     } else {
 217:.\main.c      ****         while(true) {  //child process continues forever blinking leds
 218:.\main.c      ****             
 219:.\main.c      ****             //if we're blinking, for this loop do a blink PWM cycle
 220:.\main.c      ****             if (currentMode == blink){
 285              		.loc 1 220 0
 286 0020 494B     		ldr	r3, .L28+8
 287 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 288 0024 002B     		cmp	r3, #0
 289 0026 0DD1     		bne	.L16
 221:.\main.c      ****                 //sets toggle_light_time_ms to value proportional to pot.
 222:.\main.c      ****                 toggle_light_time_ms = GetPotentiometerValue() / 4;      //min val=0, max val= 1sec
 290              		.loc 1 222 0
 291 0028 FFF7FEFF 		bl	GetPotentiometerValue
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccgwgd2K.s 			page 10


 292 002c 0346     		mov	r3, r0
 293 002e 9B08     		lsrs	r3, r3, #2
 294 0030 9BB2     		uxth	r3, r3
 295 0032 1A46     		mov	r2, r3
 296 0034 454B     		ldr	r3, .L28+12
 297 0036 1A60     		str	r2, [r3]
 223:.\main.c      ****                 PWM_Blink(toggle_light_time_ms);
 298              		.loc 1 223 0
 299 0038 444B     		ldr	r3, .L28+12
 300 003a 1B68     		ldr	r3, [r3]
 301 003c 1846     		mov	r0, r3
 302 003e FFF7FEFF 		bl	PWM_Blink
 303 0042 76E0     		b	.L17
 304              	.L16:
 224:.\main.c      ****             }
 225:.\main.c      ****             else if (currentMode == ramp) {
 305              		.loc 1 225 0
 306 0044 404B     		ldr	r3, .L28+8
 307 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 308 0048 012B     		cmp	r3, #1
 309 004a 72D1     		bne	.L17
 226:.\main.c      ****                 //calculate current ramp duty_cycle
 227:.\main.c      ****                 //PWM_Blink((float)toggle_light_time_ms / (float) 5);
 228:.\main.c      ****                 
 229:.\main.c      ****                 if (duty_cycle >= 1)    //we have reached full brightness, time to dim
 310              		.loc 1 229 0
 311 004c 404B     		ldr	r3, .L28+16
 312 004e 1B68     		ldr	r3, [r3]	@ float
 313 0050 1846     		mov	r0, r3
 314 0052 4FF07E51 		mov	r1, #1065353216
 315 0056 FFF7FEFF 		bl	__aeabi_fcmpge
 316 005a 0346     		mov	r3, r0
 317 005c 002B     		cmp	r3, #0
 318 005e 03D0     		beq	.L27
 230:.\main.c      ****                 {
 231:.\main.c      ****                     dimming = true;
 319              		.loc 1 231 0
 320 0060 3C4B     		ldr	r3, .L28+20
 321 0062 0122     		movs	r2, #1
 322 0064 1A70     		strb	r2, [r3]
 323 0066 0CE0     		b	.L20
 324              	.L27:
 232:.\main.c      ****                 } else if (duty_cycle <= 0) {
 325              		.loc 1 232 0
 326 0068 394B     		ldr	r3, .L28+16
 327 006a 1B68     		ldr	r3, [r3]	@ float
 328 006c 1846     		mov	r0, r3
 329 006e 4FF00001 		mov	r1, #0
 330 0072 FFF7FEFF 		bl	__aeabi_fcmple
 331 0076 0346     		mov	r3, r0
 332 0078 002B     		cmp	r3, #0
 333 007a 02D0     		beq	.L20
 233:.\main.c      ****                     dimming = false;
 334              		.loc 1 233 0
 335 007c 354B     		ldr	r3, .L28+20
 336 007e 0022     		movs	r2, #0
 337 0080 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccgwgd2K.s 			page 11


 338              	.L20:
 234:.\main.c      ****                 }
 235:.\main.c      ****                 
 236:.\main.c      ****                 //if we're supposed to dim, lessen the duty cycle
 237:.\main.c      ****                 if (dimming) {
 339              		.loc 1 237 0
 340 0082 344B     		ldr	r3, .L28+20
 341 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 342 0086 002B     		cmp	r3, #0
 343 0088 17D0     		beq	.L22
 238:.\main.c      ****                     duty_cycle -= 1.0 / (float) RAMP_RESOLUTION;   
 344              		.loc 1 238 0
 345 008a 314B     		ldr	r3, .L28+16
 346 008c 1B68     		ldr	r3, [r3]	@ float
 347 008e 1846     		mov	r0, r3
 348 0090 FFF7FEFF 		bl	__aeabi_f2d
 349 0094 0246     		mov	r2, r0
 350 0096 0B46     		mov	r3, r1
 351 0098 1046     		mov	r0, r2
 352 009a 1946     		mov	r1, r3
 353 009c 28A3     		adr	r3, .L28
 354 009e D3E90023 		ldrd	r2, [r3]
 355 00a2 FFF7FEFF 		bl	__aeabi_dsub
 356 00a6 0246     		mov	r2, r0
 357 00a8 0B46     		mov	r3, r1
 358 00aa 1046     		mov	r0, r2
 359 00ac 1946     		mov	r1, r3
 360 00ae FFF7FEFF 		bl	__aeabi_d2f
 361 00b2 0246     		mov	r2, r0
 362 00b4 264B     		ldr	r3, .L28+16
 363 00b6 1A60     		str	r2, [r3]	@ float
 364 00b8 16E0     		b	.L23
 365              	.L22:
 239:.\main.c      ****                 } else {
 240:.\main.c      ****                     duty_cycle +=  1.0 / (float) RAMP_RESOLUTION;
 366              		.loc 1 240 0
 367 00ba 254B     		ldr	r3, .L28+16
 368 00bc 1B68     		ldr	r3, [r3]	@ float
 369 00be 1846     		mov	r0, r3
 370 00c0 FFF7FEFF 		bl	__aeabi_f2d
 371 00c4 0246     		mov	r2, r0
 372 00c6 0B46     		mov	r3, r1
 373 00c8 1046     		mov	r0, r2
 374 00ca 1946     		mov	r1, r3
 375 00cc 1CA3     		adr	r3, .L28
 376 00ce D3E90023 		ldrd	r2, [r3]
 377 00d2 FFF7FEFF 		bl	__aeabi_dadd
 378 00d6 0246     		mov	r2, r0
 379 00d8 0B46     		mov	r3, r1
 380 00da 1046     		mov	r0, r2
 381 00dc 1946     		mov	r1, r3
 382 00de FFF7FEFF 		bl	__aeabi_d2f
 383 00e2 0246     		mov	r2, r0
 384 00e4 1A4B     		ldr	r3, .L28+16
 385 00e6 1A60     		str	r2, [r3]	@ float
 386              	.L23:
 241:.\main.c      ****                 }
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccgwgd2K.s 			page 12


 242:.\main.c      ****                 
 243:.\main.c      ****                 total_time_ms = (1.0 / (float) HUMAN_EYE_FPS) * 1000;       //could be a constant i
 387              		.loc 1 243 0
 388 00e8 1B4B     		ldr	r3, .L28+24
 389 00ea 1022     		movs	r2, #16
 390 00ec 1A60     		str	r2, [r3]
 244:.\main.c      ****                 on_time_ms = duty_cycle * total_time_ms;
 391              		.loc 1 244 0
 392 00ee 1A4B     		ldr	r3, .L28+24
 393 00f0 1B68     		ldr	r3, [r3]
 394 00f2 1846     		mov	r0, r3
 395 00f4 FFF7FEFF 		bl	__aeabi_ui2f
 396 00f8 0246     		mov	r2, r0
 397 00fa 154B     		ldr	r3, .L28+16
 398 00fc 1B68     		ldr	r3, [r3]	@ float
 399 00fe 1046     		mov	r0, r2
 400 0100 1946     		mov	r1, r3
 401 0102 FFF7FEFF 		bl	__aeabi_fmul
 402 0106 0346     		mov	r3, r0
 403 0108 1846     		mov	r0, r3
 404 010a FFF7FEFF 		bl	__aeabi_f2uiz
 405 010e 0246     		mov	r2, r0
 406 0110 124B     		ldr	r3, .L28+28
 407 0112 1A60     		str	r2, [r3]
 245:.\main.c      ****                 off_time_ms = total_time_ms - on_time_ms;
 408              		.loc 1 245 0
 409 0114 104B     		ldr	r3, .L28+24
 410 0116 1A68     		ldr	r2, [r3]
 411 0118 104B     		ldr	r3, .L28+28
 412 011a 1B68     		ldr	r3, [r3]
 413 011c D31A     		subs	r3, r2, r3
 414 011e 104A     		ldr	r2, .L28+32
 415 0120 1360     		str	r3, [r2]
 246:.\main.c      ****                 
 247:.\main.c      ****                 PWM_Ramp(on_time_ms, off_time_ms);
 416              		.loc 1 247 0
 417 0122 0E4B     		ldr	r3, .L28+28
 418 0124 1A68     		ldr	r2, [r3]
 419 0126 0E4B     		ldr	r3, .L28+32
 420 0128 1B68     		ldr	r3, [r3]
 421 012a 1046     		mov	r0, r2
 422 012c 1946     		mov	r1, r3
 423 012e FFF7FEFF 		bl	PWM_Ramp
 424              	.L17:
 248:.\main.c      ****                 
 249:.\main.c      ****                 
 250:.\main.c      ****                 /*
 251:.\main.c      ****                 if (duty_cycle >= 1)
 252:.\main.c      ****                 {
 253:.\main.c      ****                  duty_cycle = 0;   
 254:.\main.c      ****                 }
 255:.\main.c      ****                 duty_cycle += 1 / (float) RAMP_RESOLUTION;
 256:.\main.c      ****                 
 257:.\main.c      ****                 
 258:.\main.c      ****                 total_time_ms = ((float)1 / (float)userFrequency) * 1000;
 259:.\main.c      ****                 on_time_ms = duty_cycle * total_time_ms;
 260:.\main.c      ****                 off_time_ms = total_time_ms - on_time_ms;
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccgwgd2K.s 			page 13


 261:.\main.c      ****                 
 262:.\main.c      ****                 PWM_Ramp(0.5, 5000);
 263:.\main.c      ****                 */
 264:.\main.c      ****             }
 265:.\main.c      ****         }
 425              		.loc 1 265 0
 426 0132 75E7     		b	.L14
 427              	.L26:
 266:.\main.c      ****     }
 267:.\main.c      **** }
 428              		.loc 1 267 0
 429 0134 0837     		adds	r7, r7, #8
 430              		.cfi_def_cfa_offset 8
 431 0136 BD46     		mov	sp, r7
 432              		.cfi_def_cfa_register 13
 433              		@ sp needed
 434 0138 80BD     		pop	{r7, pc}
 435              	.L29:
 436 013a 00BFAFF3 		.align	3
 436      0080
 437              	.L28:
 438 0140 7B14AE47 		.word	1202590843
 439 0144 E17A943F 		.word	1066695393
 440 0148 00000000 		.word	currentMode
 441 014c 00000000 		.word	toggle_light_time_ms
 442 0150 00000000 		.word	duty_cycle
 443 0154 00000000 		.word	dimming
 444 0158 00000000 		.word	total_time_ms
 445 015c 00000000 		.word	on_time_ms
 446 0160 00000000 		.word	off_time_ms
 447              		.cfi_endproc
 448              	.LFE67:
 449              		.size	Software_PWM_Start, .-Software_PWM_Start
 450              		.section	.text.PWM_Blink,"ax",%progbits
 451              		.align	2
 452              		.global	PWM_Blink
 453              		.thumb
 454              		.thumb_func
 455              		.type	PWM_Blink, %function
 456              	PWM_Blink:
 457              	.LFB68:
 268:.\main.c      **** 
 269:.\main.c      **** //shorthand to wait for timing
 270:.\main.c      **** //evenly blinks LED with equal on/off times
 271:.\main.c      **** void PWM_Blink(uint32 halfPeriod) {
 458              		.loc 1 271 0
 459              		.cfi_startproc
 460              		@ args = 0, pretend = 0, frame = 8
 461              		@ frame_needed = 1, uses_anonymous_args = 0
 462 0000 80B5     		push	{r7, lr}
 463              		.cfi_def_cfa_offset 8
 464              		.cfi_offset 7, -8
 465              		.cfi_offset 14, -4
 466 0002 82B0     		sub	sp, sp, #8
 467              		.cfi_def_cfa_offset 16
 468 0004 00AF     		add	r7, sp, #0
 469              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccgwgd2K.s 			page 14


 470 0006 7860     		str	r0, [r7, #4]
 272:.\main.c      ****     write_led(on);
 471              		.loc 1 272 0
 472 0008 0120     		movs	r0, #1
 473 000a FFF7FEFF 		bl	write_led
 273:.\main.c      ****     CyDelay(halfPeriod);
 474              		.loc 1 273 0
 475 000e 7868     		ldr	r0, [r7, #4]
 476 0010 FFF7FEFF 		bl	CyDelay
 274:.\main.c      ****     write_led(off);
 477              		.loc 1 274 0
 478 0014 0020     		movs	r0, #0
 479 0016 FFF7FEFF 		bl	write_led
 275:.\main.c      ****     CyDelay(halfPeriod); 
 480              		.loc 1 275 0
 481 001a 7868     		ldr	r0, [r7, #4]
 482 001c FFF7FEFF 		bl	CyDelay
 276:.\main.c      **** }
 483              		.loc 1 276 0
 484 0020 0837     		adds	r7, r7, #8
 485              		.cfi_def_cfa_offset 8
 486 0022 BD46     		mov	sp, r7
 487              		.cfi_def_cfa_register 13
 488              		@ sp needed
 489 0024 80BD     		pop	{r7, pc}
 490              		.cfi_endproc
 491              	.LFE68:
 492              		.size	PWM_Blink, .-PWM_Blink
 493 0026 00BF     		.section	.text.PWM_Ramp,"ax",%progbits
 494              		.align	2
 495              		.global	PWM_Ramp
 496              		.thumb
 497              		.thumb_func
 498              		.type	PWM_Ramp, %function
 499              	PWM_Ramp:
 500              	.LFB69:
 277:.\main.c      **** 
 278:.\main.c      **** //used for different duty cycle
 279:.\main.c      **** void PWM_Ramp(uint32 on_time, uint32 off_time) {
 501              		.loc 1 279 0
 502              		.cfi_startproc
 503              		@ args = 0, pretend = 0, frame = 8
 504              		@ frame_needed = 1, uses_anonymous_args = 0
 505 0000 80B5     		push	{r7, lr}
 506              		.cfi_def_cfa_offset 8
 507              		.cfi_offset 7, -8
 508              		.cfi_offset 14, -4
 509 0002 82B0     		sub	sp, sp, #8
 510              		.cfi_def_cfa_offset 16
 511 0004 00AF     		add	r7, sp, #0
 512              		.cfi_def_cfa_register 7
 513 0006 7860     		str	r0, [r7, #4]
 514 0008 3960     		str	r1, [r7]
 280:.\main.c      ****     write_led(on);
 515              		.loc 1 280 0
 516 000a 0120     		movs	r0, #1
 517 000c FFF7FEFF 		bl	write_led
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccgwgd2K.s 			page 15


 281:.\main.c      ****     CyDelay(on_time);
 518              		.loc 1 281 0
 519 0010 7868     		ldr	r0, [r7, #4]
 520 0012 FFF7FEFF 		bl	CyDelay
 282:.\main.c      ****     write_led(off);
 521              		.loc 1 282 0
 522 0016 0020     		movs	r0, #0
 523 0018 FFF7FEFF 		bl	write_led
 283:.\main.c      ****     CyDelay(off_time); 
 524              		.loc 1 283 0
 525 001c 3868     		ldr	r0, [r7]
 526 001e FFF7FEFF 		bl	CyDelay
 284:.\main.c      **** }
 527              		.loc 1 284 0
 528 0022 0837     		adds	r7, r7, #8
 529              		.cfi_def_cfa_offset 8
 530 0024 BD46     		mov	sp, r7
 531              		.cfi_def_cfa_register 13
 532              		@ sp needed
 533 0026 80BD     		pop	{r7, pc}
 534              		.cfi_endproc
 535              	.LFE69:
 536              		.size	PWM_Ramp, .-PWM_Ramp
 537              		.text
 538              	.Letext0:
 539              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 540              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 541              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 542              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 543              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 544              		.section	.debug_info,"",%progbits
 545              	.Ldebug_info0:
 546 0000 90020000 		.4byte	0x290
 547 0004 0400     		.2byte	0x4
 548 0006 00000000 		.4byte	.Ldebug_abbrev0
 549 000a 04       		.byte	0x4
 550 000b 01       		.uleb128 0x1
 551 000c 47000000 		.4byte	.LASF44
 552 0010 01       		.byte	0x1
 553 0011 3F010000 		.4byte	.LASF45
 554 0015 EA000000 		.4byte	.LASF46
 555 0019 00000000 		.4byte	.Ldebug_ranges0+0
 556 001d 00000000 		.4byte	0
 557 0021 00000000 		.4byte	.Ldebug_line0
 558 0025 02       		.uleb128 0x2
 559 0026 01       		.byte	0x1
 560 0027 06       		.byte	0x6
 561 0028 9C020000 		.4byte	.LASF0
 562 002c 02       		.uleb128 0x2
 563 002d 01       		.byte	0x1
 564 002e 08       		.byte	0x8
 565 002f 8C010000 		.4byte	.LASF1
 566 0033 02       		.uleb128 0x2
 567 0034 02       		.byte	0x2
 568 0035 05       		.byte	0x5
 569 0036 5E020000 		.4byte	.LASF2
 570 003a 03       		.uleb128 0x3
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccgwgd2K.s 			page 16


 571 003b 9A010000 		.4byte	.LASF4
 572 003f 02       		.byte	0x2
 573 0040 2B       		.byte	0x2b
 574 0041 45000000 		.4byte	0x45
 575 0045 02       		.uleb128 0x2
 576 0046 02       		.byte	0x2
 577 0047 07       		.byte	0x7
 578 0048 A8020000 		.4byte	.LASF3
 579 004c 03       		.uleb128 0x3
 580 004d 34000000 		.4byte	.LASF5
 581 0051 02       		.byte	0x2
 582 0052 3F       		.byte	0x3f
 583 0053 57000000 		.4byte	0x57
 584 0057 02       		.uleb128 0x2
 585 0058 04       		.byte	0x4
 586 0059 05       		.byte	0x5
 587 005a 3E000000 		.4byte	.LASF6
 588 005e 02       		.uleb128 0x2
 589 005f 04       		.byte	0x4
 590 0060 07       		.byte	0x7
 591 0061 48010000 		.4byte	.LASF7
 592 0065 02       		.uleb128 0x2
 593 0066 08       		.byte	0x8
 594 0067 05       		.byte	0x5
 595 0068 00000000 		.4byte	.LASF8
 596 006c 02       		.uleb128 0x2
 597 006d 08       		.byte	0x8
 598 006e 07       		.byte	0x7
 599 006f FD010000 		.4byte	.LASF9
 600 0073 04       		.uleb128 0x4
 601 0074 04       		.byte	0x4
 602 0075 05       		.byte	0x5
 603 0076 696E7400 		.ascii	"int\000"
 604 007a 02       		.uleb128 0x2
 605 007b 04       		.byte	0x4
 606 007c 07       		.byte	0x7
 607 007d F0010000 		.4byte	.LASF10
 608 0081 03       		.uleb128 0x3
 609 0082 73020000 		.4byte	.LASF11
 610 0086 03       		.byte	0x3
 611 0087 21       		.byte	0x21
 612 0088 3A000000 		.4byte	0x3a
 613 008c 03       		.uleb128 0x3
 614 008d 32020000 		.4byte	.LASF12
 615 0091 03       		.byte	0x3
 616 0092 2C       		.byte	0x2c
 617 0093 4C000000 		.4byte	0x4c
 618 0097 05       		.uleb128 0x5
 619 0098 D6010000 		.4byte	.LASF13
 620 009c 04       		.byte	0x4
 621 009d 9401     		.2byte	0x194
 622 009f 5E000000 		.4byte	0x5e
 623 00a3 02       		.uleb128 0x2
 624 00a4 04       		.byte	0x4
 625 00a5 04       		.byte	0x4
 626 00a6 24010000 		.4byte	.LASF14
 627 00aa 02       		.uleb128 0x2
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccgwgd2K.s 			page 17


 628 00ab 08       		.byte	0x8
 629 00ac 04       		.byte	0x4
 630 00ad DD000000 		.4byte	.LASF15
 631 00b1 02       		.uleb128 0x2
 632 00b2 01       		.byte	0x1
 633 00b3 08       		.byte	0x8
 634 00b4 59020000 		.4byte	.LASF16
 635 00b8 02       		.uleb128 0x2
 636 00b9 04       		.byte	0x4
 637 00ba 07       		.byte	0x7
 638 00bb 3A020000 		.4byte	.LASF17
 639 00bf 03       		.uleb128 0x3
 640 00c0 E4000000 		.4byte	.LASF18
 641 00c4 05       		.byte	0x5
 642 00c5 C1       		.byte	0xc1
 643 00c6 73000000 		.4byte	0x73
 644 00ca 06       		.uleb128 0x6
 645 00cb 1B020000 		.4byte	.LASF47
 646 00cf 01       		.byte	0x1
 647 00d0 01       		.byte	0x1
 648 00d1 5F       		.byte	0x5f
 649 00d2 E3000000 		.4byte	0xe3
 650 00d6 07       		.uleb128 0x7
 651 00d7 66010000 		.4byte	.LASF19
 652 00db 00       		.sleb128 0
 653 00dc 07       		.uleb128 0x7
 654 00dd 23020000 		.4byte	.LASF20
 655 00e1 01       		.sleb128 1
 656 00e2 00       		.byte	0
 657 00e3 08       		.uleb128 0x8
 658 00e4 90020000 		.4byte	.LASF21
 659 00e8 01       		.byte	0x1
 660 00e9 6A       		.byte	0x6a
 661 00ea 00000000 		.4byte	.LFB63
 662 00ee 2C000000 		.4byte	.LFE63-.LFB63
 663 00f2 01       		.uleb128 0x1
 664 00f3 9C       		.byte	0x9c
 665 00f4 09       		.uleb128 0x9
 666 00f5 B1010000 		.4byte	.LASF22
 667 00f9 01       		.byte	0x1
 668 00fa 7D       		.byte	0x7d
 669 00fb 73000000 		.4byte	0x73
 670 00ff 00000000 		.4byte	.LFB64
 671 0103 30000000 		.4byte	.LFE64-.LFB64
 672 0107 01       		.uleb128 0x1
 673 0108 9C       		.byte	0x9c
 674 0109 0A       		.uleb128 0xa
 675 010a B6010000 		.4byte	.LASF23
 676 010e 01       		.byte	0x1
 677 010f BB       		.byte	0xbb
 678 0110 81000000 		.4byte	0x81
 679 0114 00000000 		.4byte	.LFB65
 680 0118 22000000 		.4byte	.LFE65-.LFB65
 681 011c 01       		.uleb128 0x1
 682 011d 9C       		.byte	0x9c
 683 011e 31010000 		.4byte	0x131
 684 0122 0B       		.uleb128 0xb
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccgwgd2K.s 			page 18


 685 0123 14020000 		.4byte	.LASF25
 686 0127 01       		.byte	0x1
 687 0128 C0       		.byte	0xc0
 688 0129 81000000 		.4byte	0x81
 689 012d 02       		.uleb128 0x2
 690 012e 91       		.byte	0x91
 691 012f 76       		.sleb128 -10
 692 0130 00       		.byte	0
 693 0131 0C       		.uleb128 0xc
 694 0132 CC010000 		.4byte	.LASF24
 695 0136 01       		.byte	0x1
 696 0137 C6       		.byte	0xc6
 697 0138 00000000 		.4byte	.LFB66
 698 013c 18000000 		.4byte	.LFE66-.LFB66
 699 0140 01       		.uleb128 0x1
 700 0141 9C       		.byte	0x9c
 701 0142 55010000 		.4byte	0x155
 702 0146 0D       		.uleb128 0xd
 703 0147 2E000000 		.4byte	.LASF28
 704 014b 01       		.byte	0x1
 705 014c C6       		.byte	0xc6
 706 014d 73000000 		.4byte	0x73
 707 0151 02       		.uleb128 0x2
 708 0152 91       		.byte	0x91
 709 0153 74       		.sleb128 -12
 710 0154 00       		.byte	0
 711 0155 0E       		.uleb128 0xe
 712 0156 79010000 		.4byte	.LASF48
 713 015a 01       		.byte	0x1
 714 015b CC       		.byte	0xcc
 715 015c 00000000 		.4byte	.LFB67
 716 0160 64010000 		.4byte	.LFE67-.LFB67
 717 0164 01       		.uleb128 0x1
 718 0165 9C       		.byte	0x9c
 719 0166 87010000 		.4byte	0x187
 720 016a 0F       		.uleb128 0xf
 721 016b 70696400 		.ascii	"pid\000"
 722 016f 01       		.byte	0x1
 723 0170 CD       		.byte	0xcd
 724 0171 BF000000 		.4byte	0xbf
 725 0175 02       		.uleb128 0x2
 726 0176 91       		.byte	0x91
 727 0177 74       		.sleb128 -12
 728 0178 0B       		.uleb128 0xb
 729 0179 8A020000 		.4byte	.LASF26
 730 017d 01       		.byte	0x1
 731 017e CE       		.byte	0xce
 732 017f 73000000 		.4byte	0x73
 733 0183 02       		.uleb128 0x2
 734 0184 91       		.byte	0x91
 735 0185 70       		.sleb128 -16
 736 0186 00       		.byte	0
 737 0187 10       		.uleb128 0x10
 738 0188 28020000 		.4byte	.LASF27
 739 018c 01       		.byte	0x1
 740 018d 0F01     		.2byte	0x10f
 741 018f 00000000 		.4byte	.LFB68
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccgwgd2K.s 			page 19


 742 0193 26000000 		.4byte	.LFE68-.LFB68
 743 0197 01       		.uleb128 0x1
 744 0198 9C       		.byte	0x9c
 745 0199 AD010000 		.4byte	0x1ad
 746 019d 11       		.uleb128 0x11
 747 019e 0E000000 		.4byte	.LASF29
 748 01a2 01       		.byte	0x1
 749 01a3 0F01     		.2byte	0x10f
 750 01a5 97000000 		.4byte	0x97
 751 01a9 02       		.uleb128 0x2
 752 01aa 91       		.byte	0x91
 753 01ab 74       		.sleb128 -12
 754 01ac 00       		.byte	0
 755 01ad 10       		.uleb128 0x10
 756 01ae 50020000 		.4byte	.LASF30
 757 01b2 01       		.byte	0x1
 758 01b3 1701     		.2byte	0x117
 759 01b5 00000000 		.4byte	.LFB69
 760 01b9 28000000 		.4byte	.LFE69-.LFB69
 761 01bd 01       		.uleb128 0x1
 762 01be 9C       		.byte	0x9c
 763 01bf E2010000 		.4byte	0x1e2
 764 01c3 11       		.uleb128 0x11
 765 01c4 DD010000 		.4byte	.LASF31
 766 01c8 01       		.byte	0x1
 767 01c9 1701     		.2byte	0x117
 768 01cb 97000000 		.4byte	0x97
 769 01cf 02       		.uleb128 0x2
 770 01d0 91       		.byte	0x91
 771 01d1 74       		.sleb128 -12
 772 01d2 11       		.uleb128 0x11
 773 01d3 36010000 		.4byte	.LASF32
 774 01d7 01       		.byte	0x1
 775 01d8 1701     		.2byte	0x117
 776 01da 97000000 		.4byte	0x97
 777 01de 02       		.uleb128 0x2
 778 01df 91       		.byte	0x91
 779 01e0 70       		.sleb128 -16
 780 01e1 00       		.byte	0
 781 01e2 12       		.uleb128 0x12
 782 01e3 6C010000 		.4byte	.LASF33
 783 01e7 06       		.byte	0x6
 784 01e8 9606     		.2byte	0x696
 785 01ea EE010000 		.4byte	0x1ee
 786 01ee 13       		.uleb128 0x13
 787 01ef 8C000000 		.4byte	0x8c
 788 01f3 14       		.uleb128 0x14
 789 01f4 5A010000 		.4byte	.LASF34
 790 01f8 01       		.byte	0x1
 791 01f9 51       		.byte	0x51
 792 01fa 04020000 		.4byte	0x204
 793 01fe 05       		.uleb128 0x5
 794 01ff 03       		.byte	0x3
 795 0200 00000000 		.4byte	debounce_on
 796 0204 02       		.uleb128 0x2
 797 0205 01       		.byte	0x1
 798 0206 02       		.byte	0x2
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccgwgd2K.s 			page 20


 799 0207 BB020000 		.4byte	.LASF35
 800 020b 14       		.uleb128 0x14
 801 020c D5000000 		.4byte	.LASF36
 802 0210 01       		.byte	0x1
 803 0211 53       		.byte	0x53
 804 0212 04020000 		.4byte	0x204
 805 0216 05       		.uleb128 0x5
 806 0217 03       		.byte	0x3
 807 0218 00000000 		.4byte	dimming
 808 021c 14       		.uleb128 0x14
 809 021d 19000000 		.4byte	.LASF37
 810 0221 01       		.byte	0x1
 811 0222 54       		.byte	0x54
 812 0223 97000000 		.4byte	0x97
 813 0227 05       		.uleb128 0x5
 814 0228 03       		.byte	0x3
 815 0229 00000000 		.4byte	toggle_light_time_ms
 816 022d 14       		.uleb128 0x14
 817 022e 7C020000 		.4byte	.LASF38
 818 0232 01       		.byte	0x1
 819 0233 58       		.byte	0x58
 820 0234 97000000 		.4byte	0x97
 821 0238 05       		.uleb128 0x5
 822 0239 03       		.byte	0x3
 823 023a 00000000 		.4byte	total_time_ms
 824 023e 14       		.uleb128 0x14
 825 023f 68020000 		.4byte	.LASF39
 826 0243 01       		.byte	0x1
 827 0244 59       		.byte	0x59
 828 0245 97000000 		.4byte	0x97
 829 0249 05       		.uleb128 0x5
 830 024a 03       		.byte	0x3
 831 024b 00000000 		.4byte	on_time_ms
 832 024f 14       		.uleb128 0x14
 833 0250 2A010000 		.4byte	.LASF40
 834 0254 01       		.byte	0x1
 835 0255 5A       		.byte	0x5a
 836 0256 97000000 		.4byte	0x97
 837 025a 05       		.uleb128 0x5
 838 025b 03       		.byte	0x3
 839 025c 00000000 		.4byte	off_time_ms
 840 0260 14       		.uleb128 0x14
 841 0261 E5010000 		.4byte	.LASF41
 842 0265 01       		.byte	0x1
 843 0266 5B       		.byte	0x5b
 844 0267 A3000000 		.4byte	0xa3
 845 026b 05       		.uleb128 0x5
 846 026c 03       		.byte	0x3
 847 026d 00000000 		.4byte	duty_cycle
 848 0271 14       		.uleb128 0x14
 849 0272 A5010000 		.4byte	.LASF42
 850 0276 01       		.byte	0x1
 851 0277 60       		.byte	0x60
 852 0278 CA000000 		.4byte	0xca
 853 027c 05       		.uleb128 0x5
 854 027d 03       		.byte	0x3
 855 027e 00000000 		.4byte	currentMode
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccgwgd2K.s 			page 21


 856 0282 14       		.uleb128 0x14
 857 0283 43020000 		.4byte	.LASF43
 858 0287 01       		.byte	0x1
 859 0288 61       		.byte	0x61
 860 0289 CA000000 		.4byte	0xca
 861 028d 05       		.uleb128 0x5
 862 028e 03       		.byte	0x3
 863 028f 00000000 		.4byte	previousMode
 864 0293 00       		.byte	0
 865              		.section	.debug_abbrev,"",%progbits
 866              	.Ldebug_abbrev0:
 867 0000 01       		.uleb128 0x1
 868 0001 11       		.uleb128 0x11
 869 0002 01       		.byte	0x1
 870 0003 25       		.uleb128 0x25
 871 0004 0E       		.uleb128 0xe
 872 0005 13       		.uleb128 0x13
 873 0006 0B       		.uleb128 0xb
 874 0007 03       		.uleb128 0x3
 875 0008 0E       		.uleb128 0xe
 876 0009 1B       		.uleb128 0x1b
 877 000a 0E       		.uleb128 0xe
 878 000b 55       		.uleb128 0x55
 879 000c 17       		.uleb128 0x17
 880 000d 11       		.uleb128 0x11
 881 000e 01       		.uleb128 0x1
 882 000f 10       		.uleb128 0x10
 883 0010 17       		.uleb128 0x17
 884 0011 00       		.byte	0
 885 0012 00       		.byte	0
 886 0013 02       		.uleb128 0x2
 887 0014 24       		.uleb128 0x24
 888 0015 00       		.byte	0
 889 0016 0B       		.uleb128 0xb
 890 0017 0B       		.uleb128 0xb
 891 0018 3E       		.uleb128 0x3e
 892 0019 0B       		.uleb128 0xb
 893 001a 03       		.uleb128 0x3
 894 001b 0E       		.uleb128 0xe
 895 001c 00       		.byte	0
 896 001d 00       		.byte	0
 897 001e 03       		.uleb128 0x3
 898 001f 16       		.uleb128 0x16
 899 0020 00       		.byte	0
 900 0021 03       		.uleb128 0x3
 901 0022 0E       		.uleb128 0xe
 902 0023 3A       		.uleb128 0x3a
 903 0024 0B       		.uleb128 0xb
 904 0025 3B       		.uleb128 0x3b
 905 0026 0B       		.uleb128 0xb
 906 0027 49       		.uleb128 0x49
 907 0028 13       		.uleb128 0x13
 908 0029 00       		.byte	0
 909 002a 00       		.byte	0
 910 002b 04       		.uleb128 0x4
 911 002c 24       		.uleb128 0x24
 912 002d 00       		.byte	0
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccgwgd2K.s 			page 22


 913 002e 0B       		.uleb128 0xb
 914 002f 0B       		.uleb128 0xb
 915 0030 3E       		.uleb128 0x3e
 916 0031 0B       		.uleb128 0xb
 917 0032 03       		.uleb128 0x3
 918 0033 08       		.uleb128 0x8
 919 0034 00       		.byte	0
 920 0035 00       		.byte	0
 921 0036 05       		.uleb128 0x5
 922 0037 16       		.uleb128 0x16
 923 0038 00       		.byte	0
 924 0039 03       		.uleb128 0x3
 925 003a 0E       		.uleb128 0xe
 926 003b 3A       		.uleb128 0x3a
 927 003c 0B       		.uleb128 0xb
 928 003d 3B       		.uleb128 0x3b
 929 003e 05       		.uleb128 0x5
 930 003f 49       		.uleb128 0x49
 931 0040 13       		.uleb128 0x13
 932 0041 00       		.byte	0
 933 0042 00       		.byte	0
 934 0043 06       		.uleb128 0x6
 935 0044 04       		.uleb128 0x4
 936 0045 01       		.byte	0x1
 937 0046 03       		.uleb128 0x3
 938 0047 0E       		.uleb128 0xe
 939 0048 0B       		.uleb128 0xb
 940 0049 0B       		.uleb128 0xb
 941 004a 3A       		.uleb128 0x3a
 942 004b 0B       		.uleb128 0xb
 943 004c 3B       		.uleb128 0x3b
 944 004d 0B       		.uleb128 0xb
 945 004e 01       		.uleb128 0x1
 946 004f 13       		.uleb128 0x13
 947 0050 00       		.byte	0
 948 0051 00       		.byte	0
 949 0052 07       		.uleb128 0x7
 950 0053 28       		.uleb128 0x28
 951 0054 00       		.byte	0
 952 0055 03       		.uleb128 0x3
 953 0056 0E       		.uleb128 0xe
 954 0057 1C       		.uleb128 0x1c
 955 0058 0D       		.uleb128 0xd
 956 0059 00       		.byte	0
 957 005a 00       		.byte	0
 958 005b 08       		.uleb128 0x8
 959 005c 2E       		.uleb128 0x2e
 960 005d 00       		.byte	0
 961 005e 3F       		.uleb128 0x3f
 962 005f 19       		.uleb128 0x19
 963 0060 03       		.uleb128 0x3
 964 0061 0E       		.uleb128 0xe
 965 0062 3A       		.uleb128 0x3a
 966 0063 0B       		.uleb128 0xb
 967 0064 3B       		.uleb128 0x3b
 968 0065 0B       		.uleb128 0xb
 969 0066 27       		.uleb128 0x27
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccgwgd2K.s 			page 23


 970 0067 19       		.uleb128 0x19
 971 0068 11       		.uleb128 0x11
 972 0069 01       		.uleb128 0x1
 973 006a 12       		.uleb128 0x12
 974 006b 06       		.uleb128 0x6
 975 006c 40       		.uleb128 0x40
 976 006d 18       		.uleb128 0x18
 977 006e 9642     		.uleb128 0x2116
 978 0070 19       		.uleb128 0x19
 979 0071 00       		.byte	0
 980 0072 00       		.byte	0
 981 0073 09       		.uleb128 0x9
 982 0074 2E       		.uleb128 0x2e
 983 0075 00       		.byte	0
 984 0076 3F       		.uleb128 0x3f
 985 0077 19       		.uleb128 0x19
 986 0078 03       		.uleb128 0x3
 987 0079 0E       		.uleb128 0xe
 988 007a 3A       		.uleb128 0x3a
 989 007b 0B       		.uleb128 0xb
 990 007c 3B       		.uleb128 0x3b
 991 007d 0B       		.uleb128 0xb
 992 007e 49       		.uleb128 0x49
 993 007f 13       		.uleb128 0x13
 994 0080 11       		.uleb128 0x11
 995 0081 01       		.uleb128 0x1
 996 0082 12       		.uleb128 0x12
 997 0083 06       		.uleb128 0x6
 998 0084 40       		.uleb128 0x40
 999 0085 18       		.uleb128 0x18
 1000 0086 9642     		.uleb128 0x2116
 1001 0088 19       		.uleb128 0x19
 1002 0089 00       		.byte	0
 1003 008a 00       		.byte	0
 1004 008b 0A       		.uleb128 0xa
 1005 008c 2E       		.uleb128 0x2e
 1006 008d 01       		.byte	0x1
 1007 008e 3F       		.uleb128 0x3f
 1008 008f 19       		.uleb128 0x19
 1009 0090 03       		.uleb128 0x3
 1010 0091 0E       		.uleb128 0xe
 1011 0092 3A       		.uleb128 0x3a
 1012 0093 0B       		.uleb128 0xb
 1013 0094 3B       		.uleb128 0x3b
 1014 0095 0B       		.uleb128 0xb
 1015 0096 49       		.uleb128 0x49
 1016 0097 13       		.uleb128 0x13
 1017 0098 11       		.uleb128 0x11
 1018 0099 01       		.uleb128 0x1
 1019 009a 12       		.uleb128 0x12
 1020 009b 06       		.uleb128 0x6
 1021 009c 40       		.uleb128 0x40
 1022 009d 18       		.uleb128 0x18
 1023 009e 9642     		.uleb128 0x2116
 1024 00a0 19       		.uleb128 0x19
 1025 00a1 01       		.uleb128 0x1
 1026 00a2 13       		.uleb128 0x13
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccgwgd2K.s 			page 24


 1027 00a3 00       		.byte	0
 1028 00a4 00       		.byte	0
 1029 00a5 0B       		.uleb128 0xb
 1030 00a6 34       		.uleb128 0x34
 1031 00a7 00       		.byte	0
 1032 00a8 03       		.uleb128 0x3
 1033 00a9 0E       		.uleb128 0xe
 1034 00aa 3A       		.uleb128 0x3a
 1035 00ab 0B       		.uleb128 0xb
 1036 00ac 3B       		.uleb128 0x3b
 1037 00ad 0B       		.uleb128 0xb
 1038 00ae 49       		.uleb128 0x49
 1039 00af 13       		.uleb128 0x13
 1040 00b0 02       		.uleb128 0x2
 1041 00b1 18       		.uleb128 0x18
 1042 00b2 00       		.byte	0
 1043 00b3 00       		.byte	0
 1044 00b4 0C       		.uleb128 0xc
 1045 00b5 2E       		.uleb128 0x2e
 1046 00b6 01       		.byte	0x1
 1047 00b7 3F       		.uleb128 0x3f
 1048 00b8 19       		.uleb128 0x19
 1049 00b9 03       		.uleb128 0x3
 1050 00ba 0E       		.uleb128 0xe
 1051 00bb 3A       		.uleb128 0x3a
 1052 00bc 0B       		.uleb128 0xb
 1053 00bd 3B       		.uleb128 0x3b
 1054 00be 0B       		.uleb128 0xb
 1055 00bf 27       		.uleb128 0x27
 1056 00c0 19       		.uleb128 0x19
 1057 00c1 11       		.uleb128 0x11
 1058 00c2 01       		.uleb128 0x1
 1059 00c3 12       		.uleb128 0x12
 1060 00c4 06       		.uleb128 0x6
 1061 00c5 40       		.uleb128 0x40
 1062 00c6 18       		.uleb128 0x18
 1063 00c7 9642     		.uleb128 0x2116
 1064 00c9 19       		.uleb128 0x19
 1065 00ca 01       		.uleb128 0x1
 1066 00cb 13       		.uleb128 0x13
 1067 00cc 00       		.byte	0
 1068 00cd 00       		.byte	0
 1069 00ce 0D       		.uleb128 0xd
 1070 00cf 05       		.uleb128 0x5
 1071 00d0 00       		.byte	0
 1072 00d1 03       		.uleb128 0x3
 1073 00d2 0E       		.uleb128 0xe
 1074 00d3 3A       		.uleb128 0x3a
 1075 00d4 0B       		.uleb128 0xb
 1076 00d5 3B       		.uleb128 0x3b
 1077 00d6 0B       		.uleb128 0xb
 1078 00d7 49       		.uleb128 0x49
 1079 00d8 13       		.uleb128 0x13
 1080 00d9 02       		.uleb128 0x2
 1081 00da 18       		.uleb128 0x18
 1082 00db 00       		.byte	0
 1083 00dc 00       		.byte	0
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccgwgd2K.s 			page 25


 1084 00dd 0E       		.uleb128 0xe
 1085 00de 2E       		.uleb128 0x2e
 1086 00df 01       		.byte	0x1
 1087 00e0 3F       		.uleb128 0x3f
 1088 00e1 19       		.uleb128 0x19
 1089 00e2 03       		.uleb128 0x3
 1090 00e3 0E       		.uleb128 0xe
 1091 00e4 3A       		.uleb128 0x3a
 1092 00e5 0B       		.uleb128 0xb
 1093 00e6 3B       		.uleb128 0x3b
 1094 00e7 0B       		.uleb128 0xb
 1095 00e8 11       		.uleb128 0x11
 1096 00e9 01       		.uleb128 0x1
 1097 00ea 12       		.uleb128 0x12
 1098 00eb 06       		.uleb128 0x6
 1099 00ec 40       		.uleb128 0x40
 1100 00ed 18       		.uleb128 0x18
 1101 00ee 9642     		.uleb128 0x2116
 1102 00f0 19       		.uleb128 0x19
 1103 00f1 01       		.uleb128 0x1
 1104 00f2 13       		.uleb128 0x13
 1105 00f3 00       		.byte	0
 1106 00f4 00       		.byte	0
 1107 00f5 0F       		.uleb128 0xf
 1108 00f6 34       		.uleb128 0x34
 1109 00f7 00       		.byte	0
 1110 00f8 03       		.uleb128 0x3
 1111 00f9 08       		.uleb128 0x8
 1112 00fa 3A       		.uleb128 0x3a
 1113 00fb 0B       		.uleb128 0xb
 1114 00fc 3B       		.uleb128 0x3b
 1115 00fd 0B       		.uleb128 0xb
 1116 00fe 49       		.uleb128 0x49
 1117 00ff 13       		.uleb128 0x13
 1118 0100 02       		.uleb128 0x2
 1119 0101 18       		.uleb128 0x18
 1120 0102 00       		.byte	0
 1121 0103 00       		.byte	0
 1122 0104 10       		.uleb128 0x10
 1123 0105 2E       		.uleb128 0x2e
 1124 0106 01       		.byte	0x1
 1125 0107 3F       		.uleb128 0x3f
 1126 0108 19       		.uleb128 0x19
 1127 0109 03       		.uleb128 0x3
 1128 010a 0E       		.uleb128 0xe
 1129 010b 3A       		.uleb128 0x3a
 1130 010c 0B       		.uleb128 0xb
 1131 010d 3B       		.uleb128 0x3b
 1132 010e 05       		.uleb128 0x5
 1133 010f 27       		.uleb128 0x27
 1134 0110 19       		.uleb128 0x19
 1135 0111 11       		.uleb128 0x11
 1136 0112 01       		.uleb128 0x1
 1137 0113 12       		.uleb128 0x12
 1138 0114 06       		.uleb128 0x6
 1139 0115 40       		.uleb128 0x40
 1140 0116 18       		.uleb128 0x18
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccgwgd2K.s 			page 26


 1141 0117 9642     		.uleb128 0x2116
 1142 0119 19       		.uleb128 0x19
 1143 011a 01       		.uleb128 0x1
 1144 011b 13       		.uleb128 0x13
 1145 011c 00       		.byte	0
 1146 011d 00       		.byte	0
 1147 011e 11       		.uleb128 0x11
 1148 011f 05       		.uleb128 0x5
 1149 0120 00       		.byte	0
 1150 0121 03       		.uleb128 0x3
 1151 0122 0E       		.uleb128 0xe
 1152 0123 3A       		.uleb128 0x3a
 1153 0124 0B       		.uleb128 0xb
 1154 0125 3B       		.uleb128 0x3b
 1155 0126 05       		.uleb128 0x5
 1156 0127 49       		.uleb128 0x49
 1157 0128 13       		.uleb128 0x13
 1158 0129 02       		.uleb128 0x2
 1159 012a 18       		.uleb128 0x18
 1160 012b 00       		.byte	0
 1161 012c 00       		.byte	0
 1162 012d 12       		.uleb128 0x12
 1163 012e 34       		.uleb128 0x34
 1164 012f 00       		.byte	0
 1165 0130 03       		.uleb128 0x3
 1166 0131 0E       		.uleb128 0xe
 1167 0132 3A       		.uleb128 0x3a
 1168 0133 0B       		.uleb128 0xb
 1169 0134 3B       		.uleb128 0x3b
 1170 0135 05       		.uleb128 0x5
 1171 0136 49       		.uleb128 0x49
 1172 0137 13       		.uleb128 0x13
 1173 0138 3F       		.uleb128 0x3f
 1174 0139 19       		.uleb128 0x19
 1175 013a 3C       		.uleb128 0x3c
 1176 013b 19       		.uleb128 0x19
 1177 013c 00       		.byte	0
 1178 013d 00       		.byte	0
 1179 013e 13       		.uleb128 0x13
 1180 013f 35       		.uleb128 0x35
 1181 0140 00       		.byte	0
 1182 0141 49       		.uleb128 0x49
 1183 0142 13       		.uleb128 0x13
 1184 0143 00       		.byte	0
 1185 0144 00       		.byte	0
 1186 0145 14       		.uleb128 0x14
 1187 0146 34       		.uleb128 0x34
 1188 0147 00       		.byte	0
 1189 0148 03       		.uleb128 0x3
 1190 0149 0E       		.uleb128 0xe
 1191 014a 3A       		.uleb128 0x3a
 1192 014b 0B       		.uleb128 0xb
 1193 014c 3B       		.uleb128 0x3b
 1194 014d 0B       		.uleb128 0xb
 1195 014e 49       		.uleb128 0x49
 1196 014f 13       		.uleb128 0x13
 1197 0150 3F       		.uleb128 0x3f
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccgwgd2K.s 			page 27


 1198 0151 19       		.uleb128 0x19
 1199 0152 02       		.uleb128 0x2
 1200 0153 18       		.uleb128 0x18
 1201 0154 00       		.byte	0
 1202 0155 00       		.byte	0
 1203 0156 00       		.byte	0
 1204              		.section	.debug_aranges,"",%progbits
 1205 0000 4C000000 		.4byte	0x4c
 1206 0004 0200     		.2byte	0x2
 1207 0006 00000000 		.4byte	.Ldebug_info0
 1208 000a 04       		.byte	0x4
 1209 000b 00       		.byte	0
 1210 000c 0000     		.2byte	0
 1211 000e 0000     		.2byte	0
 1212 0010 00000000 		.4byte	.LFB63
 1213 0014 2C000000 		.4byte	.LFE63-.LFB63
 1214 0018 00000000 		.4byte	.LFB64
 1215 001c 30000000 		.4byte	.LFE64-.LFB64
 1216 0020 00000000 		.4byte	.LFB65
 1217 0024 22000000 		.4byte	.LFE65-.LFB65
 1218 0028 00000000 		.4byte	.LFB66
 1219 002c 18000000 		.4byte	.LFE66-.LFB66
 1220 0030 00000000 		.4byte	.LFB67
 1221 0034 64010000 		.4byte	.LFE67-.LFB67
 1222 0038 00000000 		.4byte	.LFB68
 1223 003c 26000000 		.4byte	.LFE68-.LFB68
 1224 0040 00000000 		.4byte	.LFB69
 1225 0044 28000000 		.4byte	.LFE69-.LFB69
 1226 0048 00000000 		.4byte	0
 1227 004c 00000000 		.4byte	0
 1228              		.section	.debug_ranges,"",%progbits
 1229              	.Ldebug_ranges0:
 1230 0000 00000000 		.4byte	.LFB63
 1231 0004 2C000000 		.4byte	.LFE63
 1232 0008 00000000 		.4byte	.LFB64
 1233 000c 30000000 		.4byte	.LFE64
 1234 0010 00000000 		.4byte	.LFB65
 1235 0014 22000000 		.4byte	.LFE65
 1236 0018 00000000 		.4byte	.LFB66
 1237 001c 18000000 		.4byte	.LFE66
 1238 0020 00000000 		.4byte	.LFB67
 1239 0024 64010000 		.4byte	.LFE67
 1240 0028 00000000 		.4byte	.LFB68
 1241 002c 26000000 		.4byte	.LFE68
 1242 0030 00000000 		.4byte	.LFB69
 1243 0034 28000000 		.4byte	.LFE69
 1244 0038 00000000 		.4byte	0
 1245 003c 00000000 		.4byte	0
 1246              		.section	.debug_line,"",%progbits
 1247              	.Ldebug_line0:
 1248 0000 74020000 		.section	.debug_str,"MS",%progbits,1
 1248      0200C001 
 1248      00000201 
 1248      FB0E0D00 
 1248      01010101 
 1249              	.LASF8:
 1250 0000 6C6F6E67 		.ascii	"long long int\000"
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccgwgd2K.s 			page 28


 1250      206C6F6E 
 1250      6720696E 
 1250      7400
 1251              	.LASF29:
 1252 000e 68616C66 		.ascii	"halfPeriod\000"
 1252      50657269 
 1252      6F6400
 1253              	.LASF37:
 1254 0019 746F6767 		.ascii	"toggle_light_time_ms\000"
 1254      6C655F6C 
 1254      69676874 
 1254      5F74696D 
 1254      655F6D73 
 1255              	.LASF28:
 1256 002e 76616C75 		.ascii	"value\000"
 1256      6500
 1257              	.LASF5:
 1258 0034 5F5F696E 		.ascii	"__int32_t\000"
 1258      7433325F 
 1258      7400
 1259              	.LASF6:
 1260 003e 6C6F6E67 		.ascii	"long int\000"
 1260      20696E74 
 1260      00
 1261              	.LASF44:
 1262 0047 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1262      4320342E 
 1262      392E3320 
 1262      32303135 
 1262      30333033 
 1263 007a 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 1263      20726576 
 1263      6973696F 
 1263      6E203232 
 1263      31323230 
 1264 00ad 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 1264      66756E63 
 1264      74696F6E 
 1264      2D736563 
 1264      74696F6E 
 1265              	.LASF36:
 1266 00d5 64696D6D 		.ascii	"dimming\000"
 1266      696E6700 
 1267              	.LASF15:
 1268 00dd 646F7562 		.ascii	"double\000"
 1268      6C6500
 1269              	.LASF18:
 1270 00e4 7069645F 		.ascii	"pid_t\000"
 1270      7400
 1271              	.LASF46:
 1272 00ea 453A5C44 		.ascii	"E:\\Documents\\PSoC Creator\\engr478labs\\Lab2_Soft"
 1272      6F63756D 
 1272      656E7473 
 1272      5C50536F 
 1272      43204372 
 1273 0119 77617265 		.ascii	"ware.cydsn\000"
 1273      2E637964 
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccgwgd2K.s 			page 29


 1273      736E00
 1274              	.LASF14:
 1275 0124 666C6F61 		.ascii	"float\000"
 1275      7400
 1276              	.LASF40:
 1277 012a 6F66665F 		.ascii	"off_time_ms\000"
 1277      74696D65 
 1277      5F6D7300 
 1278              	.LASF32:
 1279 0136 6F66665F 		.ascii	"off_time\000"
 1279      74696D65 
 1279      00
 1280              	.LASF45:
 1281 013f 2E5C6D61 		.ascii	".\\main.c\000"
 1281      696E2E63 
 1281      00
 1282              	.LASF7:
 1283 0148 6C6F6E67 		.ascii	"long unsigned int\000"
 1283      20756E73 
 1283      69676E65 
 1283      6420696E 
 1283      7400
 1284              	.LASF34:
 1285 015a 6465626F 		.ascii	"debounce_on\000"
 1285      756E6365 
 1285      5F6F6E00 
 1286              	.LASF19:
 1287 0166 626C696E 		.ascii	"blink\000"
 1287      6B00
 1288              	.LASF33:
 1289 016c 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1289      52784275 
 1289      66666572 
 1289      00
 1290              	.LASF48:
 1291 0179 536F6674 		.ascii	"Software_PWM_Start\000"
 1291      77617265 
 1291      5F50574D 
 1291      5F537461 
 1291      727400
 1292              	.LASF1:
 1293 018c 756E7369 		.ascii	"unsigned char\000"
 1293      676E6564 
 1293      20636861 
 1293      7200
 1294              	.LASF4:
 1295 019a 5F5F7569 		.ascii	"__uint16_t\000"
 1295      6E743136 
 1295      5F7400
 1296              	.LASF42:
 1297 01a5 63757272 		.ascii	"currentMode\000"
 1297      656E744D 
 1297      6F646500 
 1298              	.LASF22:
 1299 01b1 6D61696E 		.ascii	"main\000"
 1299      00
 1300              	.LASF23:
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccgwgd2K.s 			page 30


 1301 01b6 47657450 		.ascii	"GetPotentiometerValue\000"
 1301      6F74656E 
 1301      74696F6D 
 1301      65746572 
 1301      56616C75 
 1302              	.LASF24:
 1303 01cc 77726974 		.ascii	"write_led\000"
 1303      655F6C65 
 1303      6400
 1304              	.LASF13:
 1305 01d6 75696E74 		.ascii	"uint32\000"
 1305      333200
 1306              	.LASF31:
 1307 01dd 6F6E5F74 		.ascii	"on_time\000"
 1307      696D6500 
 1308              	.LASF41:
 1309 01e5 64757479 		.ascii	"duty_cycle\000"
 1309      5F637963 
 1309      6C6500
 1310              	.LASF10:
 1311 01f0 756E7369 		.ascii	"unsigned int\000"
 1311      676E6564 
 1311      20696E74 
 1311      00
 1312              	.LASF9:
 1313 01fd 6C6F6E67 		.ascii	"long long unsigned int\000"
 1313      206C6F6E 
 1313      6720756E 
 1313      7369676E 
 1313      65642069 
 1314              	.LASF25:
 1315 0214 72657375 		.ascii	"result\000"
 1315      6C7400
 1316              	.LASF47:
 1317 021b 70776D4D 		.ascii	"pwmMode\000"
 1317      6F646500 
 1318              	.LASF20:
 1319 0223 72616D70 		.ascii	"ramp\000"
 1319      00
 1320              	.LASF27:
 1321 0228 50574D5F 		.ascii	"PWM_Blink\000"
 1321      426C696E 
 1321      6B00
 1322              	.LASF12:
 1323 0232 696E7433 		.ascii	"int32_t\000"
 1323      325F7400 
 1324              	.LASF17:
 1325 023a 73697A65 		.ascii	"sizetype\000"
 1325      74797065 
 1325      00
 1326              	.LASF43:
 1327 0243 70726576 		.ascii	"previousMode\000"
 1327      696F7573 
 1327      4D6F6465 
 1327      00
 1328              	.LASF30:
 1329 0250 50574D5F 		.ascii	"PWM_Ramp\000"
ARM GAS  C:\Users\Jonah\AppData\Local\Temp\ccgwgd2K.s 			page 31


 1329      52616D70 
 1329      00
 1330              	.LASF16:
 1331 0259 63686172 		.ascii	"char\000"
 1331      00
 1332              	.LASF2:
 1333 025e 73686F72 		.ascii	"short int\000"
 1333      7420696E 
 1333      7400
 1334              	.LASF39:
 1335 0268 6F6E5F74 		.ascii	"on_time_ms\000"
 1335      696D655F 
 1335      6D7300
 1336              	.LASF11:
 1337 0273 75696E74 		.ascii	"uint16_t\000"
 1337      31365F74 
 1337      00
 1338              	.LASF38:
 1339 027c 746F7461 		.ascii	"total_time_ms\000"
 1339      6C5F7469 
 1339      6D655F6D 
 1339      7300
 1340              	.LASF26:
 1341 028a 65727273 		.ascii	"errsv\000"
 1341      7600
 1342              	.LASF21:
 1343 0290 546F6767 		.ascii	"ToggleModes\000"
 1343      6C654D6F 
 1343      64657300 
 1344              	.LASF0:
 1345 029c 7369676E 		.ascii	"signed char\000"
 1345      65642063 
 1345      68617200 
 1346              	.LASF3:
 1347 02a8 73686F72 		.ascii	"short unsigned int\000"
 1347      7420756E 
 1347      7369676E 
 1347      65642069 
 1347      6E7400
 1348              	.LASF35:
 1349 02bb 5F426F6F 		.ascii	"_Bool\000"
 1349      6C00
 1350              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
